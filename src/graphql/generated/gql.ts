/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "mutation CreateUser($email: String!, $password: String!, $inviteCode: String) {\n  createUser(email: $email, password: $password, inviteCode: $inviteCode) {\n    id\n    email\n  }\n}\n\nmutation ActivateUser($accessToken: String!) {\n  activateUser(access_token: $accessToken) {\n    access_token\n    user {\n      id\n      uid\n      name\n      avatar\n      username\n      nickname\n      email\n      role\n      voteRole\n      status\n      inviteCode\n      invitedBy\n      hackCoin {\n        coin\n      }\n      levelInfo {\n        level\n        exp\n      }\n    }\n    status\n    error\n  }\n}\n\nmutation EmailExists($email: String!) {\n  emailExists(email: $email)\n}\n\nmutation Login($email: String!, $password: String!) {\n  data: login(email: $email, password: $password) {\n    access_token\n    user {\n      id\n      uid\n      name\n      avatar\n      username\n      nickname\n      email\n      role\n      voteRole\n      status\n      inviteCode\n      invitedBy\n      hackCoin {\n        coin\n      }\n      levelInfo {\n        level\n        exp\n      }\n    }\n  }\n}\n\nmutation ResendConfirmEmail($email: String!) {\n  resendConfirmEmail(email: $email)\n}\n\nmutation ResetPasswordEmail($email: String!) {\n  resetPasswordEmail(email: $email)\n}\n\nmutation ResetPassword($accessToken: String!, $password: String!) {\n  resetPassword(access_token: $accessToken, password: $password)\n}": types.CreateUserDocument,
    "query ListBlogs($limit: Int, $page: Int, $orderBy: [BlogOrderByWithRelationInput!], $where: BlogWhereInput) {\n  listBlogs(limit: $limit, page: $page, orderBy: $orderBy, where: $where) {\n    data {\n      id\n      title\n      alias\n      description\n      image\n      categories\n      creatorName\n      duration\n      top\n      publishDate\n      createdAt\n      updatedAt\n    }\n    total\n  }\n}\n\nquery FindUniqueBlog($where: BlogWhereUniqueInput!) {\n  findUniqueBlog(where: $where) {\n    id\n    title\n    alias\n    description\n    image\n    categories\n    content\n    creatorName\n    duration\n    top\n    publishDate\n    createdAt\n    updatedAt\n  }\n}": types.ListBlogsDocument,
    "query FindUserCertification($certificateId: Float!) {\n  certification: findUserCertification(certificateId: $certificateId) {\n    certificateId\n    certificateTime\n    username\n    template\n  }\n}\n\nmutation GetCertificationSignature($certificationId: String!, $address: String!) {\n  signature: getCertificationSignature(\n    certificationId: $certificationId\n    address: $address\n  ) {\n    msg\n    signature\n  }\n}\n\nmutation ClaimCertification($ecosystemId: String!) {\n  claimCertification(ecosystemId: $ecosystemId)\n}\n\nmutation MintCertification($certificationId: String!, $txId: String!) {\n  mintCertification(certificationId: $certificationId, txId: $txId)\n}": types.FindUserCertificationDocument,
    "mutation CreateCoLearning($data: CoLearningCreateInput!) {\n  createCoLearning(data: $data) {\n    id\n  }\n}\n\nmutation UpdateCoLearning($id: String!, $data: CoLearningUpdateInput!) {\n  updateCoLearning(id: $id, data: $data) {\n    name\n    intro\n    reward\n    ecosystem\n    description\n    communityType\n    communityUrl\n  }\n}\n\nquery ListCoLearning($where: CoLearningCoustomWhereInput) {\n  listCoLearning(where: $where) {\n    data {\n      id\n      todos {\n        name\n        order\n        completed\n        url\n        type\n        id\n      }\n      events {\n        endTime\n        startTime\n        description\n        url\n        title\n        id\n      }\n      timeline {\n        timezone\n        startTime\n        endTime\n      }\n      progress\n      name\n      intro\n      events {\n        endTime\n        description\n      }\n      reward\n      ecosystem\n      description\n      communityType\n      communityUrl\n      qrImage\n      application\n    }\n    total\n  }\n}\n\nquery ListCoLearningTodo($orderBy: [CoLearningTodoOrderByWithRelationInput!], $where: CoLearningTodoWhereInput) {\n  listCoLearningTodo(orderBy: $orderBy, where: $where) {\n    data {\n      type\n      order\n      url\n      name\n      id\n    }\n  }\n}\n\nmutation CreateCoLearningMember($data: CoLearningMemberCreateInput!) {\n  createCoLearningMember(data: $data) {\n    id\n  }\n}": types.CreateCoLearningDocument,
    "mutation CreateCustomKeyword($data: CustomKeywordCreateInput!) {\n  createCustomKeyword(data: $data) {\n    keyword\n  }\n}\n\nquery FindTracks {\n  tracks: findTracks\n}\n\nquery GlobalSearch($keyword: String!) {\n  globalSearch(keyword: $keyword) {\n    ecosystem {\n      ecosystemId\n      name\n      alias\n      description\n      lang\n    }\n    course {\n      id\n      title\n      alias\n      description\n      image\n      language\n      level\n      status\n      track\n      type\n      ecosystem\n    }\n    hackathon {\n      id\n      name\n      alias\n      info {\n        image\n        intro\n      }\n      language\n      progress\n      rewards {\n        totalRewards\n        name\n      }\n      timeline {\n        openReviewSame\n        registrationClose\n        registrationOpen\n        rewardTime\n        submissionOpen\n        timeZone\n      }\n      status\n    }\n    blog {\n      id\n      title\n      alias\n      image\n      description\n      categories\n      creatorName\n      publishDate\n      duration\n    }\n    glossary {\n      id\n      title\n      alias\n      image\n      description\n      categories\n      tracks\n      publishDate\n      creatorName\n    }\n    event {\n      id\n      name\n      endTime\n      eventUrl\n      description\n      prUrl\n      tags\n      startTime\n    }\n    project {\n      id\n      name\n      alias\n      detail {\n        oneLineIntro\n      }\n      status\n      teamLead {\n        avatar\n        nickname\n        username\n      }\n      logo\n      ecology\n    }\n    job {\n      id\n      name\n      description\n      companyName\n      status\n      tags\n      website\n      createdAt\n      companyLogo\n      workMode\n      workType\n      maxSalary\n      minSalary\n      location\n      favorites {\n        jobId\n      }\n    }\n  }\n}": types.CreateCustomKeywordDocument,
    "query ListCourses($page: Int, $limit: Int, $orderBy: [CourseV2OrderByWithRelationInput!], $where: CourseV2WhereInput) {\n  listCourses(page: $page, limit: $limit, orderBy: $orderBy, where: $where) {\n    data {\n      id\n      title\n      alias\n      subTitle\n      description\n      image\n      type\n      optional\n      intendedLearners\n      knowledgeGain\n      level\n      language\n      track\n      creatorId\n      duration\n      peopleJoined\n      status\n      documentationId\n      ecosystem\n      lang\n      createdAt\n      updatedAt\n    }\n    total\n  }\n}\n\nquery findCourseDetail($where: CourseV2WhereInput) {\n  findCourseDetail(where: $where) {\n    title\n    alias\n    description\n    language\n    duration\n    intendedLearners\n    knowledgeGain\n    image\n    units {\n      id\n      title\n      progress\n      nextPageId\n      description\n      pages {\n        id\n        title\n        isCompleted\n      }\n    }\n    currentPageId\n    progress\n    ecosystemInfoList {\n      image\n      type\n      language\n    }\n  }\n}\n\nquery FindCourseUnits($where: CourseV2WhereInput) {\n  findCourseDetail(where: $where) {\n    units {\n      title\n      description\n      progress\n      pages {\n        id\n        title\n        isCompleted\n      }\n    }\n    currentPageId\n    nextPageId\n  }\n}\n\nquery FindUniquePage($where: PageV2WhereUniqueInput!) {\n  findUniquePage(where: $where) {\n    id\n    title\n    content\n    type\n    unitPage {\n      pageId\n      unitId\n    }\n  }\n}": types.ListCoursesDocument,
    "query ListEcosystemInfos($where: EcosystemInfoWhereInput, $page: Int, $limit: Int) {\n  listEcosystemInfos(where: $where, page: $page, limit: $limit) {\n    data {\n      ecosystemId\n      lang\n      name\n      alias\n      description\n      basic {\n        id\n        image\n        track\n        language\n        type\n        tags\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nquery ListEcosystems($where: EcosystemWhereInput) {\n  listEcosystems(where: $where) {\n    data {\n      id\n      image\n      type\n      language\n      tags\n      track\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery FindEcosystemInfo($where: EcosystemInfoWhereUniqueInput!) {\n  ecosystem: findUniqueEcosystemInfo(where: $where) {\n    ecosystemId\n    name\n    description\n    progress\n    basic {\n      type\n      image\n    }\n    phases {\n      id\n      coin\n      title\n      progress\n      order\n      courses {\n        id\n        alias\n        type\n        title\n        progress\n        currentPageId\n        units {\n          id\n          currentPageId\n          title\n          progress\n        }\n      }\n      quizzes {\n        id\n        order\n        progress\n        quizList {\n          id\n        }\n        description\n      }\n      extra\n    }\n    certifications {\n      id\n      name\n      description\n      image\n    }\n  }\n}\n\nquery ListActiveEcosystemInfos($lang: String!) {\n  ecosystems: listActiveEcosystemInfos(lang: $lang) {\n    ecosystemId\n    basic {\n      image\n      type\n    }\n  }\n}\n\nquery FindActiveEcosystem {\n  ecosystem: findActiveEcosystem\n}\n\nmutation SwitchEcosystem($ecosystemId: String) {\n  switchEcosystem(ecosystemId: $ecosystemId)\n}\n\nquery CertificateProgress($where: EcosystemInfoWhereUniqueInput!) {\n  certificate: certificateProgress(where: $where) {\n    id\n    name\n    description\n    image\n    progress\n  }\n}": types.ListEcosystemInfosDocument,
    "query ListEvents($where: EventsWhereInput, $orderBy: [EventsOrderByWithRelationInput!], $page: Int, $limit: Int) {\n  listEvents(where: $where, orderBy: $orderBy, page: $page, limit: $limit) {\n    data {\n      name\n      medias\n      location\n      description\n      startTime\n      eventUrl\n      prUrl\n    }\n    total\n  }\n}": types.ListEventsDocument,
    "query getAllFaucets($where: FaucetWhereInput) {\n  listFaucets(where: $where) {\n    data {\n      chainId\n      name\n      thumbnail\n      amount\n      symbol\n      balance\n    }\n  }\n}\n\nquery getFaucetDetailById($where: FaucetWhereInput) {\n  findFirstFaucet(where: $where) {\n    chainId\n    name\n    thumbnail\n    name\n    amount\n    symbol\n    balance\n    owner\n  }\n}\n\nquery listFaucetsClaimRecordByChainId($chainId: String!, $page: Int, $limit: Int) {\n  listFaucetsClaimRecordByChainId(chainId: $chainId, page: $page, limit: $limit) {\n    data {\n      exportUrl\n      claimTime\n    }\n    total\n  }\n}\n\nmutation createFaucetClaim($chainId: Int!, $address: String!) {\n  createFaucetClaim(chainId: $chainId, address: $address) {\n    exportUrl\n  }\n}": types.GetAllFaucetsDocument,
    "query ListGlossarys($page: Int) {\n  listGlossarys(page: $page) {\n    data {\n      alias\n      categories\n      id\n      title\n      description\n      image\n      tracks\n      creatorName\n      duration\n      top\n      publishDate\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery ListGlossarysTracks {\n  listGlossarysTracks\n}\n\nquery FindUniqueGlossary($where: GlossaryWhereUniqueInput!) {\n  findUniqueGlossary(where: $where) {\n    id\n    title\n    alias\n    description\n    image\n    categories\n    tracks\n    content\n    creatorName\n    duration\n    top\n    publishDate\n    createdAt\n    updatedAt\n  }\n}": types.ListGlossarysDocument,
    "query getAllHackathonInfo($where: HackathonWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonOrderByWithRelationInput!], $status: HackathonStatus) {\n  listHackathons(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n    status: $status\n  ) {\n    data {\n      id\n      name\n      participants\n      alias\n      status\n      projectCount\n      priority\n      ecosystem {\n        image\n        type\n      }\n      members {\n        avatar\n      }\n      info {\n        host\n        image\n        intro\n        levelTag\n      }\n      timeline {\n        rewardTime\n        submissionClose\n        submissionOpen\n        registrationClose\n        registrationOpen\n        openReviewSame\n        timeZone\n      }\n      rewards {\n        totalRewards\n        currency\n      }\n    }\n    total\n  }\n}\n\nquery HighlightProject($where: ProjectWhereInput) {\n  highlightProject(where: $where) {\n    id\n    alias\n    logo\n    name\n    winner {\n      name\n    }\n    detail {\n      oneLineIntro\n    }\n    ecology\n    tracks\n    teamLead {\n      avatar\n      username\n      nickname\n    }\n    teachStack\n  }\n}\n\nquery HighlightBuilder {\n  highlightBuilder {\n    avatar\n    nickname\n    username\n    location\n    bio\n    profile {\n      techStack\n    }\n  }\n}": types.GetAllHackathonInfoDocument,
    "query ListHackathonsByOrganizer($status: OrganizerHackathonStatus!) {\n  listHackathonsByOrganizer(status: $status) {\n    data {\n      progress\n      id\n      name\n      info {\n        intro\n        image\n      }\n      projectCount\n      timeline {\n        submissionClose\n        submissionOpen\n        registrationClose\n        registrationOpen\n        rewardTime\n      }\n      members {\n        avatar\n      }\n      participants\n      alias\n    }\n  }\n}\n\nquery FindOrganizerHackathonIncrecementInfo($id: String!) {\n  findOrganizerHackathonIncrecementInfo(id: $id) {\n    application\n    confirmation\n    pageView\n    submission\n    todayApplication\n    todayConfirmation\n    todayPageView\n    todaySubmission\n    winner\n  }\n}\n\nquery ListOrganizerApplication($where: HackathonMemberWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonMemberOrderByWithRelationInput!]) {\n  listOrganizerApplication(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n  ) {\n    data {\n      bio\n      status\n      location\n      username\n      weChat\n      info\n      avatar\n      github\n      email\n      discord\n      createdAt\n      linkedIn\n      userId\n      twitter\n      telegram\n      id\n      isSubmitted\n      isRegister\n      discord\n      registerConfirm\n    }\n  }\n}\n\nquery listOrganizerSubmissionProject($where: ProjectWhereInput, $page: Int, $limit: Int, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listOrganizerSubmissionProject(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n  ) {\n    data {\n      team {\n        members {\n          info\n          createdAt\n          username\n          location\n          avatar\n          memberType\n          bio\n          nickname\n        }\n      }\n      name\n      id\n      createdAt\n      tracks\n      demoVideo\n      logo\n      status\n      pitchVideo\n      location\n      prizeTrack\n      detail {\n        detailedIntro\n        oneLineIntro\n      }\n      addition {\n        contract\n        githubLink\n        isOpenSource\n      }\n      teachStack\n      wallet\n      ecosystem {\n        image\n        id\n      }\n    }\n  }\n}\n\nquery ListOrganizerJudge($where: HackathonJudgeWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonJudgeOrderByWithRelationInput!]) {\n  listOrganizerJudge(where: $where, page: $page, limit: $limit, orderBy: $orderBy) {\n    data {\n      criteria\n      judgeTotalVote\n      judgeProjectVote\n      judgeMode\n      rewardName\n      id\n      totalVote\n      voteMode\n      userTotalVotes\n      hackathon {\n        name\n        timeline {\n          rewardTime\n          submissionClose\n        }\n      }\n      judgeAccountInfo {\n        avatar\n        nickname\n      }\n      announce\n      reward {\n        name\n        rewards\n        totalRewards\n        order\n      }\n    }\n  }\n}\n\nquery ListOrganizerJudgeProject($where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listOrganizerJudgeProject(where: $where, orderBy: $orderBy) {\n    projects {\n      name\n      id\n      hackathonId\n      tracks\n      team {\n        members {\n          nickname\n          memberType\n          username\n        }\n      }\n      rewards {\n        rank {\n          rank\n        }\n        name\n      }\n      logo\n      vote\n      fixOrSocreVote {\n        ... on ScoreVote {\n          scoresMember {\n            avatar\n            name\n            score\n          }\n          rank\n          finalScore\n        }\n        ... on FixedVote {\n          rank\n          totalVotes\n          userVotes\n          judgeVotes\n          isIncrease\n        }\n      }\n    }\n    reward {\n      rewards\n      mode\n      name\n      id\n    }\n  }\n}\n\nquery FindListTemplate($id: String!, $mode: ModeEnum!) {\n  findListTemplate(id: $id, mode: $mode) {\n    timeline {\n      submissionClose\n      rewardTime\n      submissionOpen\n    }\n    registration {\n      template\n      disable\n      type\n      receivers\n    }\n    reward {\n      template\n      type\n      disable\n      receivers\n    }\n    submission {\n      template\n      type\n      disable\n      receivers\n    }\n    judging {\n      receivers\n      disable\n      template\n      type\n    }\n  }\n}\n\nquery FindReceivers($id: String!) {\n  findReceivers(id: $id) {\n    count\n    type\n  }\n}\n\nmutation UpdateManyOrganizerApplicationMemberStatus($ids: [String!]!, $joinStatus: HackathonMemberJoinStatus!) {\n  updateManyOrganizerApplicationMemberStatus(ids: $ids, joinStatus: $joinStatus)\n}\n\nmutation CreateAndUpdateHackathonAnnouncement($data: HackathonAnnouncementInput!) {\n  createAndUpdateHackathonAnnouncement(data: $data) {\n    id\n  }\n}\n\nquery ListHackathonAnnouncement($id: String!) {\n  listHackathonAnnouncement(id: $id) {\n    actualTime\n    message\n    receivers\n    title\n    id\n    timezone\n    rightNow\n  }\n}\n\nquery ListOrganizerDistributionUTMSources($where: HackathonUTMWhereInput) {\n  listOrganizerDistributionUTMSources(where: $where) {\n    color\n    sourceName\n    url\n    id\n  }\n}\n\nmutation CreateHackathonUTM($data: HackathonUTMCreateInput!) {\n  createHackathonUTM(data: $data) {\n    id\n  }\n}\n\nmutation UpdateHackathonUTM($data: HackathonUTMUpdateInput!, $where: HackathonUTMWhereUniqueInput!) {\n  updateHackathonUTM(data: $data, where: $where) {\n    id\n  }\n}\n\nquery FindDistributionGrouth($id: String, $growthType: GrowthType, $growthFilter: GrowthFilter) {\n  findDistributionGrouth(\n    id: $id\n    growthType: $growthType\n    growthFilter: $growthFilter\n  ) {\n    data {\n      count\n      time\n    }\n    color\n    id\n    sourceName\n  }\n}\n\nmutation DeleteHackathonAnnouncement($id: Float!, $hackathonId: String!) {\n  deleteHackathonAnnouncement(id: $id, hackathonId: $hackathonId) {\n    id\n  }\n}\n\nquery FindDistribution($id: String!) {\n  findDistribution(id: $id) {\n    pageView {\n      rate\n      count\n      id\n      color\n      sourceName\n    }\n    submission {\n      sourceName\n      rate\n      id\n      count\n      color\n    }\n    registration {\n      id\n      color\n      count\n      rate\n      sourceName\n    }\n    winner {\n      id\n      color\n      count\n      rate\n      sourceName\n    }\n  }\n}\n\nmutation AnnounceJudge($id: String!, $hackathonId: String!) {\n  announceJudge(id: $id, hackathonId: $hackathonId) {\n    id\n  }\n}\n\nquery findHackathonWinner($id: String!, $prizeTrack: String!) {\n  findHackathonWinner(id: $id, prizeTrack: $prizeTrack) {\n    name\n    hackathonId\n    type\n    rewardId\n    projectId\n    id\n    project {\n      name\n      logo\n    }\n    place\n    rankAndVote {\n      rank\n      totalVotes\n    }\n    winnersInfo {\n      nickname\n    }\n  }\n}\n\nmutation UpdateHackathonWinner($id: Int!, $data: HackathonWinnerInputExtend!) {\n  updateHackathonWinner(winnerId: $id, data: $data)\n}\n\nmutation CreateHackathonWinner($data: HackathonWinnerInputExtend!) {\n  createHackathonWinner(data: $data) {\n    id\n  }\n}\n\nmutation ToggleSchedule($id: String!, $type: [TemplateType!]!, $isStart: Boolean!) {\n  toggleSchedule(id: $id, type: $type, isStart: $isStart)\n}": types.ListHackathonsByOrganizerDocument,
    "fragment hackathonBaseInfo on HackathonExtend {\n  id\n  name\n  alias\n  creatorId\n  status\n  currentStatus\n  sectionSequences\n  enable\n  track\n  language\n  progress\n  participants\n  pageView\n  priority\n  createdAt\n  updatedAt\n  currentStatus\n  todos {\n    id\n    name\n    intro\n    url\n    type\n    metadata\n    order\n    completed\n  }\n  projectCount\n  timeline {\n    timeZone\n    submissionOpen\n    submissionClose\n    rewardTime\n    registrationOpen\n    registrationClose\n    openReviewSame\n    schedule {\n      id\n      eventName\n      openTime\n      closeTime\n      eventURL\n      description\n      type\n    }\n  }\n  ecosystem {\n    id\n    image\n    type\n  }\n  members {\n    username\n    userId\n    nickname\n    avatar\n  }\n}\n\nquery FindUniqueHackathon($where: HackathonWhereUniqueInput!) {\n  findUniqueHackathon(where: $where) {\n    ...hackathonBaseInfo\n    info {\n      id\n      host\n      intro\n      ecosystem\n      levelTag\n      description\n      conduct\n      mode\n      allowSubmission\n      address\n      application\n      submission\n      sections\n      image\n    }\n    links {\n      website\n      links\n      id\n      email\n    }\n    judge {\n      voteMode\n      totalVote\n      setWinner\n      rewardName\n      projectJudgeCount\n      userTotalVotes\n      judgeTotalVote\n      judgeProjectVote\n      judgeMode\n      id\n      disableJudge\n      criteria\n      announce\n      userTags\n      judgeAccounts {\n        password\n        avatar\n        nickname\n        email\n        id\n      }\n    }\n    rewards {\n      id\n      hackathonId\n      name\n      mode\n      currency\n      rewards\n      totalRewards\n      rule\n      order\n    }\n  }\n}\n\nquery HackathonListProjects($page: Int, $limit: Int, $where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listProjects(page: $page, limit: $limit, where: $where, orderBy: $orderBy) {\n    total\n    data {\n      id\n      hackathonId\n      hackathonName\n      status\n      creatorId\n      teamId\n      versionName\n      type\n      fromId\n      isSubmit\n      detail {\n        oneLineIntro\n        detailedIntro\n      }\n      lock\n      name\n      alias\n      logo\n      teamLead {\n        avatar\n        nickname\n      }\n      location\n      prizeTrack\n      ecology\n      tracks\n      wallet\n      fields\n      createdAt\n      updatedAt\n      vote\n      isLiked\n      likes\n      winner {\n        place\n        id\n        name\n      }\n    }\n  }\n}\n\nquery ListHackathonsBySelf($limit: Int, $page: Int, $status: HackathonStatus) {\n  listHackathonsBySelf(limit: $limit, page: $page, status: $status) {\n    total\n    data {\n      ...hackathonBaseInfo\n      info {\n        host\n        intro\n        description\n        mode\n        allowSubmission\n        image\n      }\n      rewards {\n        id\n        name\n        currency\n        totalRewards\n      }\n      submitted {\n        logo\n        alias\n        name\n        isSubmit\n        prizeTrack\n        progress\n        status\n        id\n        creatorId\n        tracks\n      }\n      members {\n        userId\n        teamId\n        id\n        nickname\n        avatar\n        email\n      }\n    }\n  }\n}\n\nquery ListHackathons($status: HackathonStatus, $page: Int, $limit: Int, $projectId: String) {\n  listHackathons(\n    status: $status\n    page: $page\n    limit: $limit\n    projectId: $projectId\n  ) {\n    total\n    data {\n      ...hackathonBaseInfo\n      info {\n        intro\n        image\n        host\n      }\n      rewards {\n        name\n        id\n      }\n    }\n  }\n}\n\nmutation CreateHackathon($name: String!) {\n  hackathon: createHackathon(name: $name) {\n    id\n    alias\n    name\n    createdAt\n  }\n}\n\nmutation UpdateHackathon($updateHackathonId: String!, $data: HackathonUpdateInputExtend!) {\n  hackathon: updateHackathon(id: $updateHackathonId, data: $data) {\n    id\n    alias\n    updatedAt\n  }\n}\n\nmutation CreateHackathonReword($hackathonId: String!, $data: HackathonRewardCreateInputExtend!) {\n  reward: createHackathonReword(hackathonId: $hackathonId, data: $data) {\n    id\n    name\n  }\n}\n\nmutation UpdateHackathonReward($rewardId: String!, $data: HackathonRewardUpdateInputExtend!) {\n  reward: updateHackathonReward(rewardId: $rewardId, data: $data) {\n    id\n    name\n  }\n}\n\nmutation DeleteHackathonReward($rewardId: String!) {\n  deleteHackathonReward(rewardId: $rewardId)\n}\n\nmutation SendContactEmail($email: String!) {\n  sendContactEmail(email: $email)\n}\n\nmutation VerifyContactEmail($hackathonId: String!, $code: String!) {\n  verifyContactEmail(hackathonId: $hackathonId, code: $code)\n}\n\nmutation UpdateJudge($judgeId: String!, $data: HackathonJudgeUpdateInputExtend!) {\n  updateJudge(judgeId: $judgeId, data: $data) {\n    id\n  }\n}\n\nmutation CreateJudgeAccount($judgeId: String!) {\n  createJudgeAccount(judgeId: $judgeId) {\n    id\n    email\n    nickname\n    avatar\n    password\n  }\n}\n\nmutation UpdateJudgeAccount($accountId: String!, $nickname: String!, $judgeId: String!) {\n  updateJudgeAccount(\n    accountId: $accountId\n    nickname: $nickname\n    judgeId: $judgeId\n  ) {\n    id\n    email\n    nickname\n    avatar\n    password\n  }\n}\n\nmutation DeleteJudgeAccount($judgeId: String!, $accountId: String!) {\n  deleteJudgeAccount(judgeId: $judgeId, accountId: $accountId)\n}\n\nquery Query($userTags: [UserJudgeType!]!) {\n  getUserJudgeCount(userTags: $userTags)\n}\n\nmutation CreateHackathonSchedule($hackathonId: String!, $data: HackathonScheduleCreateInputExtend!) {\n  createHackathonSchedule(hackathonId: $hackathonId, data: $data) {\n    id\n    eventName\n    openTime\n    closeTime\n    eventURL\n    description\n    type\n  }\n}\n\nmutation UpdateHackathonSchedule($scheduleId: String!, $data: HackathonScheduleUpdateInputExtend!) {\n  updateHackathonSchedule(scheduleId: $scheduleId, data: $data) {\n    id\n    eventName\n    openTime\n    closeTime\n    eventURL\n    description\n    type\n  }\n}\n\nmutation DeleteHackathonSchedule($scheduleId: String!) {\n  deleteHackathonSchedule(scheduleId: $scheduleId) {\n    id\n  }\n}\n\nmutation HackathonRegister($hackathonId: String!, $data: MemberCreateInput!) {\n  hackathonRegister(hackathonId: $hackathonId, data: $data) {\n    id\n    info\n    isRegister\n    joinState\n    status\n  }\n}\n\nquery GetHackathonRegisterInfo($hackathonId: String!) {\n  info: getHackathonRegisterInfo(hackathonId: $hackathonId) {\n    id\n    info\n    isRegister\n    status\n    utmSource\n  }\n}\n\nmutation CreateHackathonTodo($hackathonId: String!, $data: HackathonTodoCreateInputExtend!) {\n  createHackathonTodo(hackathonId: $hackathonId, data: $data) {\n    id\n    name\n    intro\n    type\n    order\n    metadata\n    url\n  }\n}\n\nmutation UpdateHackathonTodo($todoId: String!, $data: HackathonTodoCreateInputExtend!) {\n  updateHackathonTodo(todoId: $todoId, data: $data) {\n    id\n    name\n    intro\n    url\n    type\n    metadata\n    order\n  }\n}\n\nmutation DeleteHackathonTodo($todoId: String!) {\n  deleteHackathonTodo(todoId: $todoId) {\n    id\n  }\n}\n\nquery FindHackathonPrizeTracks($hackathonId: String!) {\n  prizeTracks: findHackathonReward(hackathonId: $hackathonId) {\n    name\n  }\n}\n\nmutation CompleteHackathonTodo($todoId: String!) {\n  completeHackathonTodo(todoId: $todoId)\n}\n\nquery FindHackathonJudgeDetailByUser {\n  findHackathonJudgeDetailByUser {\n    alias\n    id\n    judge {\n      totalVote\n      judgeMode\n      voteMode\n      judgeTotalVote\n      judgeProjectVote\n      userTotalVotes\n      rewardName\n      userTags\n      projectJudgeCount\n      judgeAccounts {\n        id\n        email\n        nickname\n        avatar\n        password\n      }\n      criteria\n      announce\n      disableJudge\n      userUnitVotes\n    }\n    track\n    timeline {\n      timeZone\n      openReviewSame\n      registrationOpen\n      registrationClose\n      submissionOpen\n      submissionClose\n      rewardTime\n    }\n    info {\n      image\n      intro\n    }\n    name\n    projects {\n      alias\n      id\n      detail {\n        oneLineIntro\n      }\n      vote\n      logo\n      name\n      prizeTrack\n      voteJudgeCount\n    }\n    remainingVotes {\n      remainingVotes\n      canVote\n    }\n    currentStatus\n  }\n}\n\nmutation JudgeBatchByVote($hackathonId: String!, $data: [HackathonVoteInput!]!) {\n  judgeBatchByVote(hackathonId: $hackathonId, data: $data)\n}\n\nmutation JudgeBatchByScore($hackathonId: String!, $data: [HackathonVoteInput!]!) {\n  judgeBatchByScore(hackathonId: $hackathonId, data: $data)\n}\n\nmutation ProjectVote($rewardId: Float!, $data: HackathonVoteInput!) {\n  projectVote(rewardId: $rewardId, data: $data)\n}\n\nquery FindHackathonReward($hackathonId: String!) {\n  findHackathonReward(hackathonId: $hackathonId) {\n    id\n    totalRewards\n    rule\n    name\n    order\n    currency\n    projects {\n      id\n      hackathonName\n      creatorId\n      teamId\n      type\n      lock\n      name\n      alias\n      logo\n      tracks\n      createdAt\n      updatedAt\n      detail {\n        oneLineIntro\n        detailedIntro\n      }\n      teamLead {\n        teamId\n        userId\n        username\n        nickname\n        avatar\n      }\n      likes\n      isLiked\n      rewards {\n        votes\n        hackathonStatus\n        rank {\n          rank\n          total\n        }\n        disableJudge\n        id\n      }\n      winner {\n        name\n        rewardId\n      }\n    }\n  }\n}\n\nmutation QuitProjectFromHackathon($projectId: String!) {\n  quitProjectFromHackathon(projectId: $projectId)\n}\n\nmutation QuitHackathon($hackathonId: String!) {\n  quitHackathon(hackathonId: $hackathonId)\n}\n\nmutation HackathonConfirm($hackathonId: String!) {\n  hackathonConfirm(hackathonId: $hackathonId)\n}\n\nmutation SubmitHackathonToReview($updateHackathonId: String!, $data: HackathonUpdateInputExtend!) {\n  updateHackathon(id: $updateHackathonId, data: $data) {\n    status\n    id\n  }\n}": types.HackathonBaseInfoFragmentDoc,
    "query listJobStations($where: JobStationWhereInput, $page: Int, $limit: Int) {\n  listJobStations(where: $where, page: $page, limit: $limit) {\n    data {\n      id\n      companyName\n      companyLogo\n      currency\n      name\n      minSalary\n      maxSalary\n      tags\n      workMode\n      workType\n      location\n      createdAt\n    }\n    total\n  }\n}\n\nquery FindUniqueJobStation($where: JobStationWhereUniqueInput!) {\n  findUniqueJobStation(where: $where) {\n    description\n    name\n    companyName\n    companyLogo\n    createdAt\n    maxSalary\n    minSalary\n    workMode\n    workType\n    currency\n    tags\n    updatedAt\n    contact\n    id\n    favorites {\n      jobId\n      userId\n    }\n  }\n}\n\nmutation DeleteJobFavorite($where: JobFavoriteWhereUniqueInput!) {\n  deleteJobFavorite(where: $where) {\n    jobId\n  }\n}\n\nmutation CreateJobFavorite($data: JobFavoriteCreateInput!) {\n  createJobFavorite(data: $data) {\n    jobId\n  }\n}\n\nquery listJobTags($where: JobTagWhereInput, $limit: Int, $orderBy: [JobTagOrderByWithRelationInput!], $page: Int) {\n  listJobTags(where: $where, limit: $limit, orderBy: $orderBy, page: $page) {\n    data {\n      name\n      id\n    }\n  }\n}\n\nquery listJobStationsFavorite($where: JobStationWhereInput, $page: Int, $limit: Int, $orderBy: [JobStationOrderByWithRelationInput!]) {\n  listJobStationsFavorite(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n  ) {\n    data {\n      id\n      companyName\n      companyLogo\n      currency\n      name\n      minSalary\n      maxSalary\n      tags\n      workMode\n      workType\n      createdAt\n    }\n  }\n}\n\nmutation CreateJobStation($data: JobStationCreateInput!) {\n  createJobStation(data: $data) {\n    status\n    id\n  }\n}": types.ListJobStationsDocument,
    "query FindUserProfile($username: String!) {\n  profile: findUserProfileByUsername(username: $username) {\n    id\n    location\n    bio\n    techStack\n    backgroundImage\n    personalLinks\n    githubActivity\n    onChainActivity\n    progress\n    web3Score {\n      latitude\n      score\n    }\n    user {\n      username\n      nickname\n      avatar\n      userResume {\n        id\n        name\n        file\n      }\n    }\n    userCertifications {\n      id\n      certificateId\n      certificationId\n      claimed\n      mint\n      txId\n      username\n      certificateTime\n      certification {\n        chainId\n        name\n        contract\n        extra\n      }\n    }\n    workExperiences {\n      id\n      title\n      companyName\n      employmentType\n      location\n      description\n      startDate\n      endDate\n    }\n  }\n}\n\nmutation UpdateUserProfile($data: UserProfileUpdateInput!) {\n  updateUserProfile(data: $data) {\n    id\n  }\n}\n\nmutation CreateUserWorkExperience($data: WorkExperienceCreateWithoutUserProfileInput!) {\n  createUserWorkExperience(data: $data) {\n    id\n  }\n}\n\nmutation UpdateUserWorkExperience($experienceId: String!, $data: WorkExperienceUpdateInput!) {\n  updateUserWorkExperience(experienceId: $experienceId, data: $data) {\n    id\n  }\n}\n\nmutation DeleteUserWorkExperience($experienceId: String!) {\n  deleteUserWorkExperience(experienceId: $experienceId)\n}\n\nmutation CreateUserResume($data: UserResumeCreateWithoutUserInput!) {\n  createUserResume(data: $data) {\n    id\n  }\n}\n\nmutation DeleteUserResume($resumeId: Float!) {\n  deleteUserResume(resumeId: $resumeId)\n}\n\nquery ListUserAttestations($username: String!) {\n  attestations: listUserAttestations(username: $username) {\n    id\n    attest\n    creatorId\n    sourceId\n    type\n    comment\n    chain\n    creator {\n      id\n      username\n      nickname\n      avatar\n    }\n  }\n}\n\nmutation CreateAttestation($data: AttestationCreateInput!) {\n  createAttestation(data: $data) {\n    id\n  }\n}\n\nmutation ConnectGithub($accessToken: String!) {\n  connectGithub(accessToken: $accessToken)\n}\n\nmutation DisconnectGithub {\n  disconnectGithub\n}\n\nmutation ConnectWallet($address: String!) {\n  connectWallet(address: $address)\n}\n\nmutation DisconnectWallet {\n  disconnectWallet\n}": types.FindUserProfileDocument,
    "fragment projectBaseInfo on ProjectExtend {\n  id\n  hackathonId\n  hackathonName\n  status\n  creatorId\n  teamId\n  versionName\n  type\n  fromId\n  isSubmit\n  lock\n  name\n  alias\n  logo\n  location\n  prizeTrack\n  ecology\n  tracks\n  wallet\n  fields\n  createdAt\n  updatedAt\n  vote\n  detail {\n    oneLineIntro\n    detailedIntro\n  }\n  teamLead {\n    teamId\n    userId\n    username\n    nickname\n    avatar\n  }\n  likes\n  isLiked\n}\n\nquery ListProjectsBySelf($where: ProjectWhereInput) {\n  listProjectsBySelf(where: $where) {\n    total\n    data {\n      ...projectBaseInfo\n      team {\n        code\n      }\n    }\n  }\n}\n\nmutation CreateProject($data: ProjectCreateInput) {\n  project: createProject(data: $data) {\n    alias\n    name\n    id\n  }\n}\n\nmutation UpdateProject($data: ProjectUpdateInput!, $where: ProjectWhereUniqueInput!) {\n  project: updateProject(data: $data, where: $where) {\n    alias\n    name\n    id\n  }\n}\n\nquery FindUniqueProject($where: ProjectWhereUniqueInput!) {\n  findUniqueProject(where: $where) {\n    id\n    hackathonId\n    hackathonName\n    creatorId\n    teamId\n    versionName\n    versions {\n      id\n      alias\n      versionName\n    }\n    type\n    isSubmit\n    lock\n    name\n    alias\n    logo\n    ecology\n    tracks\n    wallet\n    likes\n    isLiked\n    pitchVideo\n    demoVideo\n    teachStack\n    progress\n    createdAt\n    updatedAt\n    detail {\n      id\n      detailedIntro\n      oneLineIntro\n      progress\n    }\n    addition {\n      id\n      fundraisingStatus\n      githubLink\n      isOpenSource\n    }\n    teamLead {\n      userId\n      avatar\n      nickname\n      username\n    }\n    team {\n      code\n      intro\n      members {\n        id\n        userId\n        avatar\n        nickname\n        username\n        bio\n        skills\n        location\n      }\n    }\n    rewards {\n      votes\n      remainingVotes\n      rank {\n        rank\n        total\n      }\n      name\n      myVotes\n      id\n      canVote\n      hackathonStatus\n      hackathonName\n      hackathonImage\n      judgeMode\n      voteMode\n    }\n    prizeTrack\n  }\n}\n\nquery ListProjects($page: Int, $limit: Int, $where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listProjects(page: $page, limit: $limit, where: $where, orderBy: $orderBy) {\n    total\n    data {\n      ...projectBaseInfo\n    }\n  }\n}\n\nmutation JoinProject($where: HackathonTeamWhereUniqueInput!) {\n  joinProject(where: $where)\n}\n\nmutation LikeProject($likeProjectId: String!) {\n  project: likeProject(id: $likeProjectId) {\n    likes\n  }\n}\n\nmutation CopyProject($copyProjectId: String!) {\n  project: copyProject(id: $copyProjectId) {\n    alias\n    name\n    id\n  }\n}\n\nmutation QuitProject($quitProjectId: String!) {\n  project: quitProject(id: $quitProjectId)\n}\n\nmutation ProjectSubmit($data: ProjectSubmitInput!) {\n  projectSubmit(ProjectSubmitInput: $data) {\n    id\n    status\n    isSubmit\n  }\n}\n\nquery ListValidateProjects($hackathonId: String!) {\n  projects: listValidateProjects(hackathonId: $hackathonId) {\n    id\n    name\n    isSubmit\n  }\n}\n\nquery FindProjectSubmitInfo($where: ProjectWhereUniqueInput!) {\n  info: findUniqueProject(where: $where) {\n    fromId\n    prizeTrack\n    fields\n    isSubmit\n  }\n}\n\nmutation JoinProject($where: HackathonTeamWhereUniqueInput!) {\n  joinProject(where: $where)\n}\n\nmutation RemoveMember($projectId: String!, $memberId: String!) {\n  removeMember(projectId: $projectId, memberId: $memberId)\n}": types.ProjectBaseInfoFragmentDoc,
    "query GetUserInfo {\n  user: getUserInfo {\n    id\n    uid\n    name\n    avatar\n    username\n    nickname\n    email\n    role\n    voteRole\n    status\n    inviteCode\n    invitedBy\n    hackCoin {\n      coin\n    }\n    levelInfo {\n      level\n      exp\n    }\n  }\n}": types.GetUserInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateUser($email: String!, $password: String!, $inviteCode: String) {\n  createUser(email: $email, password: $password, inviteCode: $inviteCode) {\n    id\n    email\n  }\n}\n\nmutation ActivateUser($accessToken: String!) {\n  activateUser(access_token: $accessToken) {\n    access_token\n    user {\n      id\n      uid\n      name\n      avatar\n      username\n      nickname\n      email\n      role\n      voteRole\n      status\n      inviteCode\n      invitedBy\n      hackCoin {\n        coin\n      }\n      levelInfo {\n        level\n        exp\n      }\n    }\n    status\n    error\n  }\n}\n\nmutation EmailExists($email: String!) {\n  emailExists(email: $email)\n}\n\nmutation Login($email: String!, $password: String!) {\n  data: login(email: $email, password: $password) {\n    access_token\n    user {\n      id\n      uid\n      name\n      avatar\n      username\n      nickname\n      email\n      role\n      voteRole\n      status\n      inviteCode\n      invitedBy\n      hackCoin {\n        coin\n      }\n      levelInfo {\n        level\n        exp\n      }\n    }\n  }\n}\n\nmutation ResendConfirmEmail($email: String!) {\n  resendConfirmEmail(email: $email)\n}\n\nmutation ResetPasswordEmail($email: String!) {\n  resetPasswordEmail(email: $email)\n}\n\nmutation ResetPassword($accessToken: String!, $password: String!) {\n  resetPassword(access_token: $accessToken, password: $password)\n}"): typeof import('./graphql').CreateUserDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListBlogs($limit: Int, $page: Int, $orderBy: [BlogOrderByWithRelationInput!], $where: BlogWhereInput) {\n  listBlogs(limit: $limit, page: $page, orderBy: $orderBy, where: $where) {\n    data {\n      id\n      title\n      alias\n      description\n      image\n      categories\n      creatorName\n      duration\n      top\n      publishDate\n      createdAt\n      updatedAt\n    }\n    total\n  }\n}\n\nquery FindUniqueBlog($where: BlogWhereUniqueInput!) {\n  findUniqueBlog(where: $where) {\n    id\n    title\n    alias\n    description\n    image\n    categories\n    content\n    creatorName\n    duration\n    top\n    publishDate\n    createdAt\n    updatedAt\n  }\n}"): typeof import('./graphql').ListBlogsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindUserCertification($certificateId: Float!) {\n  certification: findUserCertification(certificateId: $certificateId) {\n    certificateId\n    certificateTime\n    username\n    template\n  }\n}\n\nmutation GetCertificationSignature($certificationId: String!, $address: String!) {\n  signature: getCertificationSignature(\n    certificationId: $certificationId\n    address: $address\n  ) {\n    msg\n    signature\n  }\n}\n\nmutation ClaimCertification($ecosystemId: String!) {\n  claimCertification(ecosystemId: $ecosystemId)\n}\n\nmutation MintCertification($certificationId: String!, $txId: String!) {\n  mintCertification(certificationId: $certificationId, txId: $txId)\n}"): typeof import('./graphql').FindUserCertificationDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateCoLearning($data: CoLearningCreateInput!) {\n  createCoLearning(data: $data) {\n    id\n  }\n}\n\nmutation UpdateCoLearning($id: String!, $data: CoLearningUpdateInput!) {\n  updateCoLearning(id: $id, data: $data) {\n    name\n    intro\n    reward\n    ecosystem\n    description\n    communityType\n    communityUrl\n  }\n}\n\nquery ListCoLearning($where: CoLearningCoustomWhereInput) {\n  listCoLearning(where: $where) {\n    data {\n      id\n      todos {\n        name\n        order\n        completed\n        url\n        type\n        id\n      }\n      events {\n        endTime\n        startTime\n        description\n        url\n        title\n        id\n      }\n      timeline {\n        timezone\n        startTime\n        endTime\n      }\n      progress\n      name\n      intro\n      events {\n        endTime\n        description\n      }\n      reward\n      ecosystem\n      description\n      communityType\n      communityUrl\n      qrImage\n      application\n    }\n    total\n  }\n}\n\nquery ListCoLearningTodo($orderBy: [CoLearningTodoOrderByWithRelationInput!], $where: CoLearningTodoWhereInput) {\n  listCoLearningTodo(orderBy: $orderBy, where: $where) {\n    data {\n      type\n      order\n      url\n      name\n      id\n    }\n  }\n}\n\nmutation CreateCoLearningMember($data: CoLearningMemberCreateInput!) {\n  createCoLearningMember(data: $data) {\n    id\n  }\n}"): typeof import('./graphql').CreateCoLearningDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateCustomKeyword($data: CustomKeywordCreateInput!) {\n  createCustomKeyword(data: $data) {\n    keyword\n  }\n}\n\nquery FindTracks {\n  tracks: findTracks\n}\n\nquery GlobalSearch($keyword: String!) {\n  globalSearch(keyword: $keyword) {\n    ecosystem {\n      ecosystemId\n      name\n      alias\n      description\n      lang\n    }\n    course {\n      id\n      title\n      alias\n      description\n      image\n      language\n      level\n      status\n      track\n      type\n      ecosystem\n    }\n    hackathon {\n      id\n      name\n      alias\n      info {\n        image\n        intro\n      }\n      language\n      progress\n      rewards {\n        totalRewards\n        name\n      }\n      timeline {\n        openReviewSame\n        registrationClose\n        registrationOpen\n        rewardTime\n        submissionOpen\n        timeZone\n      }\n      status\n    }\n    blog {\n      id\n      title\n      alias\n      image\n      description\n      categories\n      creatorName\n      publishDate\n      duration\n    }\n    glossary {\n      id\n      title\n      alias\n      image\n      description\n      categories\n      tracks\n      publishDate\n      creatorName\n    }\n    event {\n      id\n      name\n      endTime\n      eventUrl\n      description\n      prUrl\n      tags\n      startTime\n    }\n    project {\n      id\n      name\n      alias\n      detail {\n        oneLineIntro\n      }\n      status\n      teamLead {\n        avatar\n        nickname\n        username\n      }\n      logo\n      ecology\n    }\n    job {\n      id\n      name\n      description\n      companyName\n      status\n      tags\n      website\n      createdAt\n      companyLogo\n      workMode\n      workType\n      maxSalary\n      minSalary\n      location\n      favorites {\n        jobId\n      }\n    }\n  }\n}"): typeof import('./graphql').CreateCustomKeywordDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListCourses($page: Int, $limit: Int, $orderBy: [CourseV2OrderByWithRelationInput!], $where: CourseV2WhereInput) {\n  listCourses(page: $page, limit: $limit, orderBy: $orderBy, where: $where) {\n    data {\n      id\n      title\n      alias\n      subTitle\n      description\n      image\n      type\n      optional\n      intendedLearners\n      knowledgeGain\n      level\n      language\n      track\n      creatorId\n      duration\n      peopleJoined\n      status\n      documentationId\n      ecosystem\n      lang\n      createdAt\n      updatedAt\n    }\n    total\n  }\n}\n\nquery findCourseDetail($where: CourseV2WhereInput) {\n  findCourseDetail(where: $where) {\n    title\n    alias\n    description\n    language\n    duration\n    intendedLearners\n    knowledgeGain\n    image\n    units {\n      id\n      title\n      progress\n      nextPageId\n      description\n      pages {\n        id\n        title\n        isCompleted\n      }\n    }\n    currentPageId\n    progress\n    ecosystemInfoList {\n      image\n      type\n      language\n    }\n  }\n}\n\nquery FindCourseUnits($where: CourseV2WhereInput) {\n  findCourseDetail(where: $where) {\n    units {\n      title\n      description\n      progress\n      pages {\n        id\n        title\n        isCompleted\n      }\n    }\n    currentPageId\n    nextPageId\n  }\n}\n\nquery FindUniquePage($where: PageV2WhereUniqueInput!) {\n  findUniquePage(where: $where) {\n    id\n    title\n    content\n    type\n    unitPage {\n      pageId\n      unitId\n    }\n  }\n}"): typeof import('./graphql').ListCoursesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListEcosystemInfos($where: EcosystemInfoWhereInput, $page: Int, $limit: Int) {\n  listEcosystemInfos(where: $where, page: $page, limit: $limit) {\n    data {\n      ecosystemId\n      lang\n      name\n      alias\n      description\n      basic {\n        id\n        image\n        track\n        language\n        type\n        tags\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n\nquery ListEcosystems($where: EcosystemWhereInput) {\n  listEcosystems(where: $where) {\n    data {\n      id\n      image\n      type\n      language\n      tags\n      track\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery FindEcosystemInfo($where: EcosystemInfoWhereUniqueInput!) {\n  ecosystem: findUniqueEcosystemInfo(where: $where) {\n    ecosystemId\n    name\n    description\n    progress\n    basic {\n      type\n      image\n    }\n    phases {\n      id\n      coin\n      title\n      progress\n      order\n      courses {\n        id\n        alias\n        type\n        title\n        progress\n        currentPageId\n        units {\n          id\n          currentPageId\n          title\n          progress\n        }\n      }\n      quizzes {\n        id\n        order\n        progress\n        quizList {\n          id\n        }\n        description\n      }\n      extra\n    }\n    certifications {\n      id\n      name\n      description\n      image\n    }\n  }\n}\n\nquery ListActiveEcosystemInfos($lang: String!) {\n  ecosystems: listActiveEcosystemInfos(lang: $lang) {\n    ecosystemId\n    basic {\n      image\n      type\n    }\n  }\n}\n\nquery FindActiveEcosystem {\n  ecosystem: findActiveEcosystem\n}\n\nmutation SwitchEcosystem($ecosystemId: String) {\n  switchEcosystem(ecosystemId: $ecosystemId)\n}\n\nquery CertificateProgress($where: EcosystemInfoWhereUniqueInput!) {\n  certificate: certificateProgress(where: $where) {\n    id\n    name\n    description\n    image\n    progress\n  }\n}"): typeof import('./graphql').ListEcosystemInfosDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListEvents($where: EventsWhereInput, $orderBy: [EventsOrderByWithRelationInput!], $page: Int, $limit: Int) {\n  listEvents(where: $where, orderBy: $orderBy, page: $page, limit: $limit) {\n    data {\n      name\n      medias\n      location\n      description\n      startTime\n      eventUrl\n      prUrl\n    }\n    total\n  }\n}"): typeof import('./graphql').ListEventsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAllFaucets($where: FaucetWhereInput) {\n  listFaucets(where: $where) {\n    data {\n      chainId\n      name\n      thumbnail\n      amount\n      symbol\n      balance\n    }\n  }\n}\n\nquery getFaucetDetailById($where: FaucetWhereInput) {\n  findFirstFaucet(where: $where) {\n    chainId\n    name\n    thumbnail\n    name\n    amount\n    symbol\n    balance\n    owner\n  }\n}\n\nquery listFaucetsClaimRecordByChainId($chainId: String!, $page: Int, $limit: Int) {\n  listFaucetsClaimRecordByChainId(chainId: $chainId, page: $page, limit: $limit) {\n    data {\n      exportUrl\n      claimTime\n    }\n    total\n  }\n}\n\nmutation createFaucetClaim($chainId: Int!, $address: String!) {\n  createFaucetClaim(chainId: $chainId, address: $address) {\n    exportUrl\n  }\n}"): typeof import('./graphql').GetAllFaucetsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListGlossarys($page: Int) {\n  listGlossarys(page: $page) {\n    data {\n      alias\n      categories\n      id\n      title\n      description\n      image\n      tracks\n      creatorName\n      duration\n      top\n      publishDate\n      createdAt\n      updatedAt\n    }\n  }\n}\n\nquery ListGlossarysTracks {\n  listGlossarysTracks\n}\n\nquery FindUniqueGlossary($where: GlossaryWhereUniqueInput!) {\n  findUniqueGlossary(where: $where) {\n    id\n    title\n    alias\n    description\n    image\n    categories\n    tracks\n    content\n    creatorName\n    duration\n    top\n    publishDate\n    createdAt\n    updatedAt\n  }\n}"): typeof import('./graphql').ListGlossarysDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query getAllHackathonInfo($where: HackathonWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonOrderByWithRelationInput!], $status: HackathonStatus) {\n  listHackathons(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n    status: $status\n  ) {\n    data {\n      id\n      name\n      participants\n      alias\n      status\n      projectCount\n      priority\n      ecosystem {\n        image\n        type\n      }\n      members {\n        avatar\n      }\n      info {\n        host\n        image\n        intro\n        levelTag\n      }\n      timeline {\n        rewardTime\n        submissionClose\n        submissionOpen\n        registrationClose\n        registrationOpen\n        openReviewSame\n        timeZone\n      }\n      rewards {\n        totalRewards\n        currency\n      }\n    }\n    total\n  }\n}\n\nquery HighlightProject($where: ProjectWhereInput) {\n  highlightProject(where: $where) {\n    id\n    alias\n    logo\n    name\n    winner {\n      name\n    }\n    detail {\n      oneLineIntro\n    }\n    ecology\n    tracks\n    teamLead {\n      avatar\n      username\n      nickname\n    }\n    teachStack\n  }\n}\n\nquery HighlightBuilder {\n  highlightBuilder {\n    avatar\n    nickname\n    username\n    location\n    bio\n    profile {\n      techStack\n    }\n  }\n}"): typeof import('./graphql').GetAllHackathonInfoDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListHackathonsByOrganizer($status: OrganizerHackathonStatus!) {\n  listHackathonsByOrganizer(status: $status) {\n    data {\n      progress\n      id\n      name\n      info {\n        intro\n        image\n      }\n      projectCount\n      timeline {\n        submissionClose\n        submissionOpen\n        registrationClose\n        registrationOpen\n        rewardTime\n      }\n      members {\n        avatar\n      }\n      participants\n      alias\n    }\n  }\n}\n\nquery FindOrganizerHackathonIncrecementInfo($id: String!) {\n  findOrganizerHackathonIncrecementInfo(id: $id) {\n    application\n    confirmation\n    pageView\n    submission\n    todayApplication\n    todayConfirmation\n    todayPageView\n    todaySubmission\n    winner\n  }\n}\n\nquery ListOrganizerApplication($where: HackathonMemberWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonMemberOrderByWithRelationInput!]) {\n  listOrganizerApplication(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n  ) {\n    data {\n      bio\n      status\n      location\n      username\n      weChat\n      info\n      avatar\n      github\n      email\n      discord\n      createdAt\n      linkedIn\n      userId\n      twitter\n      telegram\n      id\n      isSubmitted\n      isRegister\n      discord\n      registerConfirm\n    }\n  }\n}\n\nquery listOrganizerSubmissionProject($where: ProjectWhereInput, $page: Int, $limit: Int, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listOrganizerSubmissionProject(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n  ) {\n    data {\n      team {\n        members {\n          info\n          createdAt\n          username\n          location\n          avatar\n          memberType\n          bio\n          nickname\n        }\n      }\n      name\n      id\n      createdAt\n      tracks\n      demoVideo\n      logo\n      status\n      pitchVideo\n      location\n      prizeTrack\n      detail {\n        detailedIntro\n        oneLineIntro\n      }\n      addition {\n        contract\n        githubLink\n        isOpenSource\n      }\n      teachStack\n      wallet\n      ecosystem {\n        image\n        id\n      }\n    }\n  }\n}\n\nquery ListOrganizerJudge($where: HackathonJudgeWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonJudgeOrderByWithRelationInput!]) {\n  listOrganizerJudge(where: $where, page: $page, limit: $limit, orderBy: $orderBy) {\n    data {\n      criteria\n      judgeTotalVote\n      judgeProjectVote\n      judgeMode\n      rewardName\n      id\n      totalVote\n      voteMode\n      userTotalVotes\n      hackathon {\n        name\n        timeline {\n          rewardTime\n          submissionClose\n        }\n      }\n      judgeAccountInfo {\n        avatar\n        nickname\n      }\n      announce\n      reward {\n        name\n        rewards\n        totalRewards\n        order\n      }\n    }\n  }\n}\n\nquery ListOrganizerJudgeProject($where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listOrganizerJudgeProject(where: $where, orderBy: $orderBy) {\n    projects {\n      name\n      id\n      hackathonId\n      tracks\n      team {\n        members {\n          nickname\n          memberType\n          username\n        }\n      }\n      rewards {\n        rank {\n          rank\n        }\n        name\n      }\n      logo\n      vote\n      fixOrSocreVote {\n        ... on ScoreVote {\n          scoresMember {\n            avatar\n            name\n            score\n          }\n          rank\n          finalScore\n        }\n        ... on FixedVote {\n          rank\n          totalVotes\n          userVotes\n          judgeVotes\n          isIncrease\n        }\n      }\n    }\n    reward {\n      rewards\n      mode\n      name\n      id\n    }\n  }\n}\n\nquery FindListTemplate($id: String!, $mode: ModeEnum!) {\n  findListTemplate(id: $id, mode: $mode) {\n    timeline {\n      submissionClose\n      rewardTime\n      submissionOpen\n    }\n    registration {\n      template\n      disable\n      type\n      receivers\n    }\n    reward {\n      template\n      type\n      disable\n      receivers\n    }\n    submission {\n      template\n      type\n      disable\n      receivers\n    }\n    judging {\n      receivers\n      disable\n      template\n      type\n    }\n  }\n}\n\nquery FindReceivers($id: String!) {\n  findReceivers(id: $id) {\n    count\n    type\n  }\n}\n\nmutation UpdateManyOrganizerApplicationMemberStatus($ids: [String!]!, $joinStatus: HackathonMemberJoinStatus!) {\n  updateManyOrganizerApplicationMemberStatus(ids: $ids, joinStatus: $joinStatus)\n}\n\nmutation CreateAndUpdateHackathonAnnouncement($data: HackathonAnnouncementInput!) {\n  createAndUpdateHackathonAnnouncement(data: $data) {\n    id\n  }\n}\n\nquery ListHackathonAnnouncement($id: String!) {\n  listHackathonAnnouncement(id: $id) {\n    actualTime\n    message\n    receivers\n    title\n    id\n    timezone\n    rightNow\n  }\n}\n\nquery ListOrganizerDistributionUTMSources($where: HackathonUTMWhereInput) {\n  listOrganizerDistributionUTMSources(where: $where) {\n    color\n    sourceName\n    url\n    id\n  }\n}\n\nmutation CreateHackathonUTM($data: HackathonUTMCreateInput!) {\n  createHackathonUTM(data: $data) {\n    id\n  }\n}\n\nmutation UpdateHackathonUTM($data: HackathonUTMUpdateInput!, $where: HackathonUTMWhereUniqueInput!) {\n  updateHackathonUTM(data: $data, where: $where) {\n    id\n  }\n}\n\nquery FindDistributionGrouth($id: String, $growthType: GrowthType, $growthFilter: GrowthFilter) {\n  findDistributionGrouth(\n    id: $id\n    growthType: $growthType\n    growthFilter: $growthFilter\n  ) {\n    data {\n      count\n      time\n    }\n    color\n    id\n    sourceName\n  }\n}\n\nmutation DeleteHackathonAnnouncement($id: Float!, $hackathonId: String!) {\n  deleteHackathonAnnouncement(id: $id, hackathonId: $hackathonId) {\n    id\n  }\n}\n\nquery FindDistribution($id: String!) {\n  findDistribution(id: $id) {\n    pageView {\n      rate\n      count\n      id\n      color\n      sourceName\n    }\n    submission {\n      sourceName\n      rate\n      id\n      count\n      color\n    }\n    registration {\n      id\n      color\n      count\n      rate\n      sourceName\n    }\n    winner {\n      id\n      color\n      count\n      rate\n      sourceName\n    }\n  }\n}\n\nmutation AnnounceJudge($id: String!, $hackathonId: String!) {\n  announceJudge(id: $id, hackathonId: $hackathonId) {\n    id\n  }\n}\n\nquery findHackathonWinner($id: String!, $prizeTrack: String!) {\n  findHackathonWinner(id: $id, prizeTrack: $prizeTrack) {\n    name\n    hackathonId\n    type\n    rewardId\n    projectId\n    id\n    project {\n      name\n      logo\n    }\n    place\n    rankAndVote {\n      rank\n      totalVotes\n    }\n    winnersInfo {\n      nickname\n    }\n  }\n}\n\nmutation UpdateHackathonWinner($id: Int!, $data: HackathonWinnerInputExtend!) {\n  updateHackathonWinner(winnerId: $id, data: $data)\n}\n\nmutation CreateHackathonWinner($data: HackathonWinnerInputExtend!) {\n  createHackathonWinner(data: $data) {\n    id\n  }\n}\n\nmutation ToggleSchedule($id: String!, $type: [TemplateType!]!, $isStart: Boolean!) {\n  toggleSchedule(id: $id, type: $type, isStart: $isStart)\n}"): typeof import('./graphql').ListHackathonsByOrganizerDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment hackathonBaseInfo on HackathonExtend {\n  id\n  name\n  alias\n  creatorId\n  status\n  currentStatus\n  sectionSequences\n  enable\n  track\n  language\n  progress\n  participants\n  pageView\n  priority\n  createdAt\n  updatedAt\n  currentStatus\n  todos {\n    id\n    name\n    intro\n    url\n    type\n    metadata\n    order\n    completed\n  }\n  projectCount\n  timeline {\n    timeZone\n    submissionOpen\n    submissionClose\n    rewardTime\n    registrationOpen\n    registrationClose\n    openReviewSame\n    schedule {\n      id\n      eventName\n      openTime\n      closeTime\n      eventURL\n      description\n      type\n    }\n  }\n  ecosystem {\n    id\n    image\n    type\n  }\n  members {\n    username\n    userId\n    nickname\n    avatar\n  }\n}\n\nquery FindUniqueHackathon($where: HackathonWhereUniqueInput!) {\n  findUniqueHackathon(where: $where) {\n    ...hackathonBaseInfo\n    info {\n      id\n      host\n      intro\n      ecosystem\n      levelTag\n      description\n      conduct\n      mode\n      allowSubmission\n      address\n      application\n      submission\n      sections\n      image\n    }\n    links {\n      website\n      links\n      id\n      email\n    }\n    judge {\n      voteMode\n      totalVote\n      setWinner\n      rewardName\n      projectJudgeCount\n      userTotalVotes\n      judgeTotalVote\n      judgeProjectVote\n      judgeMode\n      id\n      disableJudge\n      criteria\n      announce\n      userTags\n      judgeAccounts {\n        password\n        avatar\n        nickname\n        email\n        id\n      }\n    }\n    rewards {\n      id\n      hackathonId\n      name\n      mode\n      currency\n      rewards\n      totalRewards\n      rule\n      order\n    }\n  }\n}\n\nquery HackathonListProjects($page: Int, $limit: Int, $where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listProjects(page: $page, limit: $limit, where: $where, orderBy: $orderBy) {\n    total\n    data {\n      id\n      hackathonId\n      hackathonName\n      status\n      creatorId\n      teamId\n      versionName\n      type\n      fromId\n      isSubmit\n      detail {\n        oneLineIntro\n        detailedIntro\n      }\n      lock\n      name\n      alias\n      logo\n      teamLead {\n        avatar\n        nickname\n      }\n      location\n      prizeTrack\n      ecology\n      tracks\n      wallet\n      fields\n      createdAt\n      updatedAt\n      vote\n      isLiked\n      likes\n      winner {\n        place\n        id\n        name\n      }\n    }\n  }\n}\n\nquery ListHackathonsBySelf($limit: Int, $page: Int, $status: HackathonStatus) {\n  listHackathonsBySelf(limit: $limit, page: $page, status: $status) {\n    total\n    data {\n      ...hackathonBaseInfo\n      info {\n        host\n        intro\n        description\n        mode\n        allowSubmission\n        image\n      }\n      rewards {\n        id\n        name\n        currency\n        totalRewards\n      }\n      submitted {\n        logo\n        alias\n        name\n        isSubmit\n        prizeTrack\n        progress\n        status\n        id\n        creatorId\n        tracks\n      }\n      members {\n        userId\n        teamId\n        id\n        nickname\n        avatar\n        email\n      }\n    }\n  }\n}\n\nquery ListHackathons($status: HackathonStatus, $page: Int, $limit: Int, $projectId: String) {\n  listHackathons(\n    status: $status\n    page: $page\n    limit: $limit\n    projectId: $projectId\n  ) {\n    total\n    data {\n      ...hackathonBaseInfo\n      info {\n        intro\n        image\n        host\n      }\n      rewards {\n        name\n        id\n      }\n    }\n  }\n}\n\nmutation CreateHackathon($name: String!) {\n  hackathon: createHackathon(name: $name) {\n    id\n    alias\n    name\n    createdAt\n  }\n}\n\nmutation UpdateHackathon($updateHackathonId: String!, $data: HackathonUpdateInputExtend!) {\n  hackathon: updateHackathon(id: $updateHackathonId, data: $data) {\n    id\n    alias\n    updatedAt\n  }\n}\n\nmutation CreateHackathonReword($hackathonId: String!, $data: HackathonRewardCreateInputExtend!) {\n  reward: createHackathonReword(hackathonId: $hackathonId, data: $data) {\n    id\n    name\n  }\n}\n\nmutation UpdateHackathonReward($rewardId: String!, $data: HackathonRewardUpdateInputExtend!) {\n  reward: updateHackathonReward(rewardId: $rewardId, data: $data) {\n    id\n    name\n  }\n}\n\nmutation DeleteHackathonReward($rewardId: String!) {\n  deleteHackathonReward(rewardId: $rewardId)\n}\n\nmutation SendContactEmail($email: String!) {\n  sendContactEmail(email: $email)\n}\n\nmutation VerifyContactEmail($hackathonId: String!, $code: String!) {\n  verifyContactEmail(hackathonId: $hackathonId, code: $code)\n}\n\nmutation UpdateJudge($judgeId: String!, $data: HackathonJudgeUpdateInputExtend!) {\n  updateJudge(judgeId: $judgeId, data: $data) {\n    id\n  }\n}\n\nmutation CreateJudgeAccount($judgeId: String!) {\n  createJudgeAccount(judgeId: $judgeId) {\n    id\n    email\n    nickname\n    avatar\n    password\n  }\n}\n\nmutation UpdateJudgeAccount($accountId: String!, $nickname: String!, $judgeId: String!) {\n  updateJudgeAccount(\n    accountId: $accountId\n    nickname: $nickname\n    judgeId: $judgeId\n  ) {\n    id\n    email\n    nickname\n    avatar\n    password\n  }\n}\n\nmutation DeleteJudgeAccount($judgeId: String!, $accountId: String!) {\n  deleteJudgeAccount(judgeId: $judgeId, accountId: $accountId)\n}\n\nquery Query($userTags: [UserJudgeType!]!) {\n  getUserJudgeCount(userTags: $userTags)\n}\n\nmutation CreateHackathonSchedule($hackathonId: String!, $data: HackathonScheduleCreateInputExtend!) {\n  createHackathonSchedule(hackathonId: $hackathonId, data: $data) {\n    id\n    eventName\n    openTime\n    closeTime\n    eventURL\n    description\n    type\n  }\n}\n\nmutation UpdateHackathonSchedule($scheduleId: String!, $data: HackathonScheduleUpdateInputExtend!) {\n  updateHackathonSchedule(scheduleId: $scheduleId, data: $data) {\n    id\n    eventName\n    openTime\n    closeTime\n    eventURL\n    description\n    type\n  }\n}\n\nmutation DeleteHackathonSchedule($scheduleId: String!) {\n  deleteHackathonSchedule(scheduleId: $scheduleId) {\n    id\n  }\n}\n\nmutation HackathonRegister($hackathonId: String!, $data: MemberCreateInput!) {\n  hackathonRegister(hackathonId: $hackathonId, data: $data) {\n    id\n    info\n    isRegister\n    joinState\n    status\n  }\n}\n\nquery GetHackathonRegisterInfo($hackathonId: String!) {\n  info: getHackathonRegisterInfo(hackathonId: $hackathonId) {\n    id\n    info\n    isRegister\n    status\n    utmSource\n  }\n}\n\nmutation CreateHackathonTodo($hackathonId: String!, $data: HackathonTodoCreateInputExtend!) {\n  createHackathonTodo(hackathonId: $hackathonId, data: $data) {\n    id\n    name\n    intro\n    type\n    order\n    metadata\n    url\n  }\n}\n\nmutation UpdateHackathonTodo($todoId: String!, $data: HackathonTodoCreateInputExtend!) {\n  updateHackathonTodo(todoId: $todoId, data: $data) {\n    id\n    name\n    intro\n    url\n    type\n    metadata\n    order\n  }\n}\n\nmutation DeleteHackathonTodo($todoId: String!) {\n  deleteHackathonTodo(todoId: $todoId) {\n    id\n  }\n}\n\nquery FindHackathonPrizeTracks($hackathonId: String!) {\n  prizeTracks: findHackathonReward(hackathonId: $hackathonId) {\n    name\n  }\n}\n\nmutation CompleteHackathonTodo($todoId: String!) {\n  completeHackathonTodo(todoId: $todoId)\n}\n\nquery FindHackathonJudgeDetailByUser {\n  findHackathonJudgeDetailByUser {\n    alias\n    id\n    judge {\n      totalVote\n      judgeMode\n      voteMode\n      judgeTotalVote\n      judgeProjectVote\n      userTotalVotes\n      rewardName\n      userTags\n      projectJudgeCount\n      judgeAccounts {\n        id\n        email\n        nickname\n        avatar\n        password\n      }\n      criteria\n      announce\n      disableJudge\n      userUnitVotes\n    }\n    track\n    timeline {\n      timeZone\n      openReviewSame\n      registrationOpen\n      registrationClose\n      submissionOpen\n      submissionClose\n      rewardTime\n    }\n    info {\n      image\n      intro\n    }\n    name\n    projects {\n      alias\n      id\n      detail {\n        oneLineIntro\n      }\n      vote\n      logo\n      name\n      prizeTrack\n      voteJudgeCount\n    }\n    remainingVotes {\n      remainingVotes\n      canVote\n    }\n    currentStatus\n  }\n}\n\nmutation JudgeBatchByVote($hackathonId: String!, $data: [HackathonVoteInput!]!) {\n  judgeBatchByVote(hackathonId: $hackathonId, data: $data)\n}\n\nmutation JudgeBatchByScore($hackathonId: String!, $data: [HackathonVoteInput!]!) {\n  judgeBatchByScore(hackathonId: $hackathonId, data: $data)\n}\n\nmutation ProjectVote($rewardId: Float!, $data: HackathonVoteInput!) {\n  projectVote(rewardId: $rewardId, data: $data)\n}\n\nquery FindHackathonReward($hackathonId: String!) {\n  findHackathonReward(hackathonId: $hackathonId) {\n    id\n    totalRewards\n    rule\n    name\n    order\n    currency\n    projects {\n      id\n      hackathonName\n      creatorId\n      teamId\n      type\n      lock\n      name\n      alias\n      logo\n      tracks\n      createdAt\n      updatedAt\n      detail {\n        oneLineIntro\n        detailedIntro\n      }\n      teamLead {\n        teamId\n        userId\n        username\n        nickname\n        avatar\n      }\n      likes\n      isLiked\n      rewards {\n        votes\n        hackathonStatus\n        rank {\n          rank\n          total\n        }\n        disableJudge\n        id\n      }\n      winner {\n        name\n        rewardId\n      }\n    }\n  }\n}\n\nmutation QuitProjectFromHackathon($projectId: String!) {\n  quitProjectFromHackathon(projectId: $projectId)\n}\n\nmutation QuitHackathon($hackathonId: String!) {\n  quitHackathon(hackathonId: $hackathonId)\n}\n\nmutation HackathonConfirm($hackathonId: String!) {\n  hackathonConfirm(hackathonId: $hackathonId)\n}\n\nmutation SubmitHackathonToReview($updateHackathonId: String!, $data: HackathonUpdateInputExtend!) {\n  updateHackathon(id: $updateHackathonId, data: $data) {\n    status\n    id\n  }\n}"): typeof import('./graphql').HackathonBaseInfoFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query listJobStations($where: JobStationWhereInput, $page: Int, $limit: Int) {\n  listJobStations(where: $where, page: $page, limit: $limit) {\n    data {\n      id\n      companyName\n      companyLogo\n      currency\n      name\n      minSalary\n      maxSalary\n      tags\n      workMode\n      workType\n      location\n      createdAt\n    }\n    total\n  }\n}\n\nquery FindUniqueJobStation($where: JobStationWhereUniqueInput!) {\n  findUniqueJobStation(where: $where) {\n    description\n    name\n    companyName\n    companyLogo\n    createdAt\n    maxSalary\n    minSalary\n    workMode\n    workType\n    currency\n    tags\n    updatedAt\n    contact\n    id\n    favorites {\n      jobId\n      userId\n    }\n  }\n}\n\nmutation DeleteJobFavorite($where: JobFavoriteWhereUniqueInput!) {\n  deleteJobFavorite(where: $where) {\n    jobId\n  }\n}\n\nmutation CreateJobFavorite($data: JobFavoriteCreateInput!) {\n  createJobFavorite(data: $data) {\n    jobId\n  }\n}\n\nquery listJobTags($where: JobTagWhereInput, $limit: Int, $orderBy: [JobTagOrderByWithRelationInput!], $page: Int) {\n  listJobTags(where: $where, limit: $limit, orderBy: $orderBy, page: $page) {\n    data {\n      name\n      id\n    }\n  }\n}\n\nquery listJobStationsFavorite($where: JobStationWhereInput, $page: Int, $limit: Int, $orderBy: [JobStationOrderByWithRelationInput!]) {\n  listJobStationsFavorite(\n    where: $where\n    page: $page\n    limit: $limit\n    orderBy: $orderBy\n  ) {\n    data {\n      id\n      companyName\n      companyLogo\n      currency\n      name\n      minSalary\n      maxSalary\n      tags\n      workMode\n      workType\n      createdAt\n    }\n  }\n}\n\nmutation CreateJobStation($data: JobStationCreateInput!) {\n  createJobStation(data: $data) {\n    status\n    id\n  }\n}"): typeof import('./graphql').ListJobStationsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FindUserProfile($username: String!) {\n  profile: findUserProfileByUsername(username: $username) {\n    id\n    location\n    bio\n    techStack\n    backgroundImage\n    personalLinks\n    githubActivity\n    onChainActivity\n    progress\n    web3Score {\n      latitude\n      score\n    }\n    user {\n      username\n      nickname\n      avatar\n      userResume {\n        id\n        name\n        file\n      }\n    }\n    userCertifications {\n      id\n      certificateId\n      certificationId\n      claimed\n      mint\n      txId\n      username\n      certificateTime\n      certification {\n        chainId\n        name\n        contract\n        extra\n      }\n    }\n    workExperiences {\n      id\n      title\n      companyName\n      employmentType\n      location\n      description\n      startDate\n      endDate\n    }\n  }\n}\n\nmutation UpdateUserProfile($data: UserProfileUpdateInput!) {\n  updateUserProfile(data: $data) {\n    id\n  }\n}\n\nmutation CreateUserWorkExperience($data: WorkExperienceCreateWithoutUserProfileInput!) {\n  createUserWorkExperience(data: $data) {\n    id\n  }\n}\n\nmutation UpdateUserWorkExperience($experienceId: String!, $data: WorkExperienceUpdateInput!) {\n  updateUserWorkExperience(experienceId: $experienceId, data: $data) {\n    id\n  }\n}\n\nmutation DeleteUserWorkExperience($experienceId: String!) {\n  deleteUserWorkExperience(experienceId: $experienceId)\n}\n\nmutation CreateUserResume($data: UserResumeCreateWithoutUserInput!) {\n  createUserResume(data: $data) {\n    id\n  }\n}\n\nmutation DeleteUserResume($resumeId: Float!) {\n  deleteUserResume(resumeId: $resumeId)\n}\n\nquery ListUserAttestations($username: String!) {\n  attestations: listUserAttestations(username: $username) {\n    id\n    attest\n    creatorId\n    sourceId\n    type\n    comment\n    chain\n    creator {\n      id\n      username\n      nickname\n      avatar\n    }\n  }\n}\n\nmutation CreateAttestation($data: AttestationCreateInput!) {\n  createAttestation(data: $data) {\n    id\n  }\n}\n\nmutation ConnectGithub($accessToken: String!) {\n  connectGithub(accessToken: $accessToken)\n}\n\nmutation DisconnectGithub {\n  disconnectGithub\n}\n\nmutation ConnectWallet($address: String!) {\n  connectWallet(address: $address)\n}\n\nmutation DisconnectWallet {\n  disconnectWallet\n}"): typeof import('./graphql').FindUserProfileDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment projectBaseInfo on ProjectExtend {\n  id\n  hackathonId\n  hackathonName\n  status\n  creatorId\n  teamId\n  versionName\n  type\n  fromId\n  isSubmit\n  lock\n  name\n  alias\n  logo\n  location\n  prizeTrack\n  ecology\n  tracks\n  wallet\n  fields\n  createdAt\n  updatedAt\n  vote\n  detail {\n    oneLineIntro\n    detailedIntro\n  }\n  teamLead {\n    teamId\n    userId\n    username\n    nickname\n    avatar\n  }\n  likes\n  isLiked\n}\n\nquery ListProjectsBySelf($where: ProjectWhereInput) {\n  listProjectsBySelf(where: $where) {\n    total\n    data {\n      ...projectBaseInfo\n      team {\n        code\n      }\n    }\n  }\n}\n\nmutation CreateProject($data: ProjectCreateInput) {\n  project: createProject(data: $data) {\n    alias\n    name\n    id\n  }\n}\n\nmutation UpdateProject($data: ProjectUpdateInput!, $where: ProjectWhereUniqueInput!) {\n  project: updateProject(data: $data, where: $where) {\n    alias\n    name\n    id\n  }\n}\n\nquery FindUniqueProject($where: ProjectWhereUniqueInput!) {\n  findUniqueProject(where: $where) {\n    id\n    hackathonId\n    hackathonName\n    creatorId\n    teamId\n    versionName\n    versions {\n      id\n      alias\n      versionName\n    }\n    type\n    isSubmit\n    lock\n    name\n    alias\n    logo\n    ecology\n    tracks\n    wallet\n    likes\n    isLiked\n    pitchVideo\n    demoVideo\n    teachStack\n    progress\n    createdAt\n    updatedAt\n    detail {\n      id\n      detailedIntro\n      oneLineIntro\n      progress\n    }\n    addition {\n      id\n      fundraisingStatus\n      githubLink\n      isOpenSource\n    }\n    teamLead {\n      userId\n      avatar\n      nickname\n      username\n    }\n    team {\n      code\n      intro\n      members {\n        id\n        userId\n        avatar\n        nickname\n        username\n        bio\n        skills\n        location\n      }\n    }\n    rewards {\n      votes\n      remainingVotes\n      rank {\n        rank\n        total\n      }\n      name\n      myVotes\n      id\n      canVote\n      hackathonStatus\n      hackathonName\n      hackathonImage\n      judgeMode\n      voteMode\n    }\n    prizeTrack\n  }\n}\n\nquery ListProjects($page: Int, $limit: Int, $where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {\n  listProjects(page: $page, limit: $limit, where: $where, orderBy: $orderBy) {\n    total\n    data {\n      ...projectBaseInfo\n    }\n  }\n}\n\nmutation JoinProject($where: HackathonTeamWhereUniqueInput!) {\n  joinProject(where: $where)\n}\n\nmutation LikeProject($likeProjectId: String!) {\n  project: likeProject(id: $likeProjectId) {\n    likes\n  }\n}\n\nmutation CopyProject($copyProjectId: String!) {\n  project: copyProject(id: $copyProjectId) {\n    alias\n    name\n    id\n  }\n}\n\nmutation QuitProject($quitProjectId: String!) {\n  project: quitProject(id: $quitProjectId)\n}\n\nmutation ProjectSubmit($data: ProjectSubmitInput!) {\n  projectSubmit(ProjectSubmitInput: $data) {\n    id\n    status\n    isSubmit\n  }\n}\n\nquery ListValidateProjects($hackathonId: String!) {\n  projects: listValidateProjects(hackathonId: $hackathonId) {\n    id\n    name\n    isSubmit\n  }\n}\n\nquery FindProjectSubmitInfo($where: ProjectWhereUniqueInput!) {\n  info: findUniqueProject(where: $where) {\n    fromId\n    prizeTrack\n    fields\n    isSubmit\n  }\n}\n\nmutation JoinProject($where: HackathonTeamWhereUniqueInput!) {\n  joinProject(where: $where)\n}\n\nmutation RemoveMember($projectId: String!, $memberId: String!) {\n  removeMember(projectId: $projectId, memberId: $memberId)\n}"): typeof import('./graphql').ProjectBaseInfoFragmentDoc;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetUserInfo {\n  user: getUserInfo {\n    id\n    uid\n    name\n    avatar\n    username\n    nickname\n    email\n    role\n    voteRole\n    status\n    inviteCode\n    invitedBy\n    hackCoin {\n      coin\n    }\n    levelInfo {\n      level\n      exp\n    }\n  }\n}"): typeof import('./graphql').GetUserInfoDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
