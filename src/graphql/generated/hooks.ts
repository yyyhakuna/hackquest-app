import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import { fetcher } from './fetcher';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  Decimal: { input: any; output: any; }
  JSON: { input: any; output: any; }
  Upload: { input: any; output: any; }
};

export type AffectedRows = {
  __typename?: 'AffectedRows';
  count: Scalars['Int']['output'];
};

export type AggregateBlog = {
  __typename?: 'AggregateBlog';
  _avg?: Maybe<BlogAvgAggregate>;
  _count?: Maybe<BlogCountAggregate>;
  _max?: Maybe<BlogMaxAggregate>;
  _min?: Maybe<BlogMinAggregate>;
  _sum?: Maybe<BlogSumAggregate>;
};

export type AggregateCertification = {
  __typename?: 'AggregateCertification';
  _avg?: Maybe<CertificationAvgAggregate>;
  _count?: Maybe<CertificationCountAggregate>;
  _max?: Maybe<CertificationMaxAggregate>;
  _min?: Maybe<CertificationMinAggregate>;
  _sum?: Maybe<CertificationSumAggregate>;
};

export type AggregateCourseEcosystem = {
  __typename?: 'AggregateCourseEcosystem';
  _avg?: Maybe<CourseEcosystemAvgAggregate>;
  _count?: Maybe<CourseEcosystemCountAggregate>;
  _max?: Maybe<CourseEcosystemMaxAggregate>;
  _min?: Maybe<CourseEcosystemMinAggregate>;
  _sum?: Maybe<CourseEcosystemSumAggregate>;
};

export type AggregateCourseLearningTrack = {
  __typename?: 'AggregateCourseLearningTrack';
  _avg?: Maybe<CourseLearningTrackAvgAggregate>;
  _count?: Maybe<CourseLearningTrackCountAggregate>;
  _max?: Maybe<CourseLearningTrackMaxAggregate>;
  _min?: Maybe<CourseLearningTrackMinAggregate>;
  _sum?: Maybe<CourseLearningTrackSumAggregate>;
};

export type AggregateCustomKeyword = {
  __typename?: 'AggregateCustomKeyword';
  _avg?: Maybe<CustomKeywordAvgAggregate>;
  _count?: Maybe<CustomKeywordCountAggregate>;
  _max?: Maybe<CustomKeywordMaxAggregate>;
  _min?: Maybe<CustomKeywordMinAggregate>;
  _sum?: Maybe<CustomKeywordSumAggregate>;
};

export type AggregateDailyChallenge = {
  __typename?: 'AggregateDailyChallenge';
  _count?: Maybe<DailyChallengeCountAggregate>;
  _max?: Maybe<DailyChallengeMaxAggregate>;
  _min?: Maybe<DailyChallengeMinAggregate>;
};

export type AggregateDocs = {
  __typename?: 'AggregateDocs';
  _count?: Maybe<DocsCountAggregate>;
  _max?: Maybe<DocsMaxAggregate>;
  _min?: Maybe<DocsMinAggregate>;
};

export type AggregateDocumentation = {
  __typename?: 'AggregateDocumentation';
  _count?: Maybe<DocumentationCountAggregate>;
  _max?: Maybe<DocumentationMaxAggregate>;
  _min?: Maybe<DocumentationMinAggregate>;
};

export type AggregateEvents = {
  __typename?: 'AggregateEvents';
  _count?: Maybe<EventsCountAggregate>;
  _max?: Maybe<EventsMaxAggregate>;
  _min?: Maybe<EventsMinAggregate>;
};

export type AggregateFaucet = {
  __typename?: 'AggregateFaucet';
  _avg?: Maybe<FaucetAvgAggregate>;
  _count?: Maybe<FaucetCountAggregate>;
  _max?: Maybe<FaucetMaxAggregate>;
  _min?: Maybe<FaucetMinAggregate>;
  _sum?: Maybe<FaucetSumAggregate>;
};

export type AggregateGlossary = {
  __typename?: 'AggregateGlossary';
  _avg?: Maybe<GlossaryAvgAggregate>;
  _count?: Maybe<GlossaryCountAggregate>;
  _max?: Maybe<GlossaryMaxAggregate>;
  _min?: Maybe<GlossaryMinAggregate>;
  _sum?: Maybe<GlossarySumAggregate>;
};

export type AggregateIdeaBank = {
  __typename?: 'AggregateIdeaBank';
  _avg?: Maybe<IdeaBankAvgAggregate>;
  _count?: Maybe<IdeaBankCountAggregate>;
  _max?: Maybe<IdeaBankMaxAggregate>;
  _min?: Maybe<IdeaBankMinAggregate>;
  _sum?: Maybe<IdeaBankSumAggregate>;
};

export type AggregateJobStation = {
  __typename?: 'AggregateJobStation';
  _avg?: Maybe<JobStationAvgAggregate>;
  _count?: Maybe<JobStationCountAggregate>;
  _max?: Maybe<JobStationMaxAggregate>;
  _min?: Maybe<JobStationMinAggregate>;
  _sum?: Maybe<JobStationSumAggregate>;
};

export type AggregateJobTag = {
  __typename?: 'AggregateJobTag';
  _avg?: Maybe<JobTagAvgAggregate>;
  _count?: Maybe<JobTagCountAggregate>;
  _max?: Maybe<JobTagMaxAggregate>;
  _min?: Maybe<JobTagMinAggregate>;
  _sum?: Maybe<JobTagSumAggregate>;
};

export type AggregateLearningTrack = {
  __typename?: 'AggregateLearningTrack';
  _count?: Maybe<LearningTrackCountAggregate>;
  _max?: Maybe<LearningTrackMaxAggregate>;
  _min?: Maybe<LearningTrackMinAggregate>;
};

export type AggregateNotification = {
  __typename?: 'AggregateNotification';
  _count?: Maybe<NotificationCountAggregate>;
  _max?: Maybe<NotificationMaxAggregate>;
  _min?: Maybe<NotificationMinAggregate>;
};

export type AggregatePageView = {
  __typename?: 'AggregatePageView';
  _avg?: Maybe<PageViewAvgAggregate>;
  _count?: Maybe<PageViewCountAggregate>;
  _max?: Maybe<PageViewMaxAggregate>;
  _min?: Maybe<PageViewMinAggregate>;
  _sum?: Maybe<PageViewSumAggregate>;
};

export type AggregatePartnerShip = {
  __typename?: 'AggregatePartnerShip';
  _avg?: Maybe<PartnerShipAvgAggregate>;
  _count?: Maybe<PartnerShipCountAggregate>;
  _max?: Maybe<PartnerShipMaxAggregate>;
  _min?: Maybe<PartnerShipMinAggregate>;
  _sum?: Maybe<PartnerShipSumAggregate>;
};

export type AggregateProgressV2 = {
  __typename?: 'AggregateProgressV2';
  _avg?: Maybe<ProgressV2AvgAggregate>;
  _count?: Maybe<ProgressV2CountAggregate>;
  _max?: Maybe<ProgressV2MaxAggregate>;
  _min?: Maybe<ProgressV2MinAggregate>;
  _sum?: Maybe<ProgressV2SumAggregate>;
};

export type AggregateThirdUser = {
  __typename?: 'AggregateThirdUser';
  _count?: Maybe<ThirdUserCountAggregate>;
  _max?: Maybe<ThirdUserMaxAggregate>;
  _min?: Maybe<ThirdUserMinAggregate>;
};

export type AggregateTreasure = {
  __typename?: 'AggregateTreasure';
  _avg?: Maybe<TreasureAvgAggregate>;
  _count?: Maybe<TreasureCountAggregate>;
  _max?: Maybe<TreasureMaxAggregate>;
  _min?: Maybe<TreasureMinAggregate>;
  _sum?: Maybe<TreasureSumAggregate>;
};

export type AggregateUnitV2 = {
  __typename?: 'AggregateUnitV2';
  _avg?: Maybe<UnitV2AvgAggregate>;
  _count?: Maybe<UnitV2CountAggregate>;
  _max?: Maybe<UnitV2MaxAggregate>;
  _min?: Maybe<UnitV2MinAggregate>;
  _sum?: Maybe<UnitV2SumAggregate>;
};

export type AggregateUser = {
  __typename?: 'AggregateUser';
  _avg?: Maybe<UserAvgAggregate>;
  _count?: Maybe<UserCountAggregate>;
  _max?: Maybe<UserMaxAggregate>;
  _min?: Maybe<UserMinAggregate>;
  _sum?: Maybe<UserSumAggregate>;
};

export type AggregateUserClaimFaucetRecord = {
  __typename?: 'AggregateUserClaimFaucetRecord';
  _avg?: Maybe<UserClaimFaucetRecordAvgAggregate>;
  _count?: Maybe<UserClaimFaucetRecordCountAggregate>;
  _max?: Maybe<UserClaimFaucetRecordMaxAggregate>;
  _min?: Maybe<UserClaimFaucetRecordMinAggregate>;
  _sum?: Maybe<UserClaimFaucetRecordSumAggregate>;
};

export type AnnouncementTemplateAvgAggregate = {
  __typename?: 'AnnouncementTemplateAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type AnnouncementTemplateCountAggregate = {
  __typename?: 'AnnouncementTemplateCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  fields: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  templateType: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type AnnouncementTemplateMaxAggregate = {
  __typename?: 'AnnouncementTemplateMaxAggregate';
  content?: Maybe<Scalars['String']['output']>;
  createId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  templateType?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type AnnouncementTemplateMinAggregate = {
  __typename?: 'AnnouncementTemplateMinAggregate';
  content?: Maybe<Scalars['String']['output']>;
  createId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  templateType?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type AnnouncementTemplateSumAggregate = {
  __typename?: 'AnnouncementTemplateSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type Attestation = {
  __typename?: 'Attestation';
  attest: Scalars['Boolean']['output'];
  chain: Scalars['JSON']['output'];
  comment?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creatorId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  organizationId?: Maybe<Scalars['String']['output']>;
  sourceId: Scalars['String']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type AttestationCountAggregate = {
  __typename?: 'AttestationCountAggregate';
  _all: Scalars['Int']['output'];
  attest: Scalars['Int']['output'];
  chain: Scalars['Int']['output'];
  comment: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  organizationId: Scalars['Int']['output'];
  sourceId: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type AttestationCreateInput = {
  attest: Scalars['Boolean']['input'];
  chain?: InputMaybe<Scalars['JSON']['input']>;
  comment?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  sourceId: Scalars['String']['input'];
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type AttestationCreator = {
  __typename?: 'AttestationCreator';
  avatar?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  nickname?: Maybe<Scalars['String']['output']>;
  username: Scalars['String']['output'];
};

export type AttestationMaxAggregate = {
  __typename?: 'AttestationMaxAggregate';
  attest?: Maybe<Scalars['Boolean']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  sourceId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type AttestationMinAggregate = {
  __typename?: 'AttestationMinAggregate';
  attest?: Maybe<Scalars['Boolean']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  sourceId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type AttestationOrderByWithRelationInput = {
  attest?: InputMaybe<SortOrder>;
  chain?: InputMaybe<SortOrder>;
  comment?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  organizationId?: InputMaybe<SortOrderInput>;
  sourceId?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export enum AttestationScalarFieldEnum {
  Attest = 'attest',
  Chain = 'chain',
  Comment = 'comment',
  CreatedAt = 'createdAt',
  CreatorId = 'creatorId',
  Id = 'id',
  OrganizationId = 'organizationId',
  SourceId = 'sourceId',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  UserId = 'userId'
}

export type AttestationWhereInput = {
  AND?: InputMaybe<Array<AttestationWhereInput>>;
  NOT?: InputMaybe<Array<AttestationWhereInput>>;
  OR?: InputMaybe<Array<AttestationWhereInput>>;
  attest?: InputMaybe<BoolFilter>;
  chain?: InputMaybe<JsonFilter>;
  comment?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<UuidFilter>;
  organizationId?: InputMaybe<UuidNullableFilter>;
  sourceId?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type AttestationWhereUniqueInput = {
  AND?: InputMaybe<Array<AttestationWhereInput>>;
  NOT?: InputMaybe<Array<AttestationWhereInput>>;
  OR?: InputMaybe<Array<AttestationWhereInput>>;
  attest?: InputMaybe<BoolFilter>;
  chain?: InputMaybe<JsonFilter>;
  comment?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<UuidNullableFilter>;
  sourceId?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type AttestationWithCreator = {
  __typename?: 'AttestationWithCreator';
  attest: Scalars['Boolean']['output'];
  chain: Scalars['JSON']['output'];
  comment?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creator?: Maybe<AttestationCreator>;
  creatorId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  organizationId?: Maybe<Scalars['String']['output']>;
  sourceId: Scalars['String']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export enum BlockChainType {
  Evm = 'EVM',
  Near = 'NEAR',
  Solana = 'SOLANA',
  Sui = 'SUI'
}

export type Blog = {
  __typename?: 'Blog';
  alias?: Maybe<Scalars['String']['output']>;
  categories?: Maybe<Array<Scalars['String']['output']>>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorName: Scalars['String']['output'];
  description: Scalars['String']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  publishDate: Scalars['DateTime']['output'];
  title: Scalars['String']['output'];
  top: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type BlogAvgAggregate = {
  __typename?: 'BlogAvgAggregate';
  duration?: Maybe<Scalars['Float']['output']>;
  top?: Maybe<Scalars['Float']['output']>;
};

export type BlogAvgAggregateInput = {
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogAvgOrderByAggregateInput = {
  duration?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
};

export type BlogCountAggregate = {
  __typename?: 'BlogCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  categories: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorName: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  publishDate: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  top: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type BlogCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  categories?: InputMaybe<Scalars['Boolean']['input']>;
  content?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  creatorName?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  publishDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogCountOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  categories?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type BlogCreateInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<BlogCreatecategoriesInput>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorName: Scalars['String']['input'];
  description: Scalars['String']['input'];
  duration: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['String']['input'];
  publishDate?: InputMaybe<Scalars['DateTime']['input']>;
  title: Scalars['String']['input'];
  top?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type BlogCreateManyInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<BlogCreatecategoriesInput>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorName: Scalars['String']['input'];
  description: Scalars['String']['input'];
  duration: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['String']['input'];
  publishDate?: InputMaybe<Scalars['DateTime']['input']>;
  title: Scalars['String']['input'];
  top?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type BlogCreatecategoriesInput = {
  set: Array<Scalars['String']['input']>;
};

export type BlogGroupBy = {
  __typename?: 'BlogGroupBy';
  _avg?: Maybe<BlogAvgAggregate>;
  _count?: Maybe<BlogCountAggregate>;
  _max?: Maybe<BlogMaxAggregate>;
  _min?: Maybe<BlogMinAggregate>;
  _sum?: Maybe<BlogSumAggregate>;
  alias?: Maybe<Scalars['String']['output']>;
  categories?: Maybe<Array<Scalars['String']['output']>>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorName: Scalars['String']['output'];
  description: Scalars['String']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  publishDate: Scalars['DateTime']['output'];
  title: Scalars['String']['output'];
  top: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type BlogListPaginated = {
  __typename?: 'BlogListPaginated';
  data?: Maybe<Array<Blog>>;
  total: Scalars['Int']['output'];
};

export type BlogMaxAggregate = {
  __typename?: 'BlogMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorName?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  publishDate?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  top?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type BlogMaxAggregateInput = {
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  creatorName?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  publishDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogMaxOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type BlogMinAggregate = {
  __typename?: 'BlogMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorName?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  publishDate?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  top?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type BlogMinAggregateInput = {
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  creatorName?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  publishDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogMinOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type BlogOrderByWithAggregationInput = {
  _avg?: InputMaybe<BlogAvgOrderByAggregateInput>;
  _count?: InputMaybe<BlogCountOrderByAggregateInput>;
  _max?: InputMaybe<BlogMaxOrderByAggregateInput>;
  _min?: InputMaybe<BlogMinOrderByAggregateInput>;
  _sum?: InputMaybe<BlogSumOrderByAggregateInput>;
  alias?: InputMaybe<SortOrderInput>;
  categories?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type BlogOrderByWithRelationInput = {
  alias?: InputMaybe<SortOrderInput>;
  categories?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum BlogScalarFieldEnum {
  Alias = 'alias',
  Categories = 'categories',
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatorName = 'creatorName',
  Description = 'description',
  Duration = 'duration',
  Id = 'id',
  Image = 'image',
  PublishDate = 'publishDate',
  Title = 'title',
  Top = 'top',
  UpdatedAt = 'updatedAt'
}

export type BlogScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<BlogScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<BlogScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<BlogScalarWhereWithAggregatesInput>>;
  alias?: InputMaybe<StringNullableWithAggregatesFilter>;
  categories?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  creatorName?: InputMaybe<StringWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  duration?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  image?: InputMaybe<StringWithAggregatesFilter>;
  publishDate?: InputMaybe<DateTimeWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  top?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type BlogSumAggregate = {
  __typename?: 'BlogSumAggregate';
  duration?: Maybe<Scalars['Int']['output']>;
  top?: Maybe<Scalars['Int']['output']>;
};

export type BlogSumAggregateInput = {
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogSumOrderByAggregateInput = {
  duration?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
};

export type BlogUpdateInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  categories?: InputMaybe<BlogUpdatecategoriesInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorName?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  duration?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  publishDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  top?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type BlogUpdateManyMutationInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  categories?: InputMaybe<BlogUpdatecategoriesInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorName?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  duration?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  publishDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  top?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type BlogUpdatecategoriesInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type BlogWhereInput = {
  AND?: InputMaybe<Array<BlogWhereInput>>;
  NOT?: InputMaybe<Array<BlogWhereInput>>;
  OR?: InputMaybe<Array<BlogWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  categories?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorName?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  duration?: InputMaybe<IntFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  top?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type BlogWhereUniqueInput = {
  AND?: InputMaybe<Array<BlogWhereInput>>;
  NOT?: InputMaybe<Array<BlogWhereInput>>;
  OR?: InputMaybe<Array<BlogWhereInput>>;
  alias?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorName?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  duration?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  top?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type BoolFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolFilter>;
};

export type BoolNullableFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolNullableFilter>;
};

export type BoolWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedBoolFilter>;
  _min?: InputMaybe<NestedBoolFilter>;
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolWithAggregatesFilter>;
};

export type Campaign = {
  __typename?: 'Campaign';
  _count: CampaignCount;
  campaignTargets?: Maybe<Array<CampaignTarget>>;
  certification?: Maybe<Certification>;
  certificationId?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  id: Scalars['String']['output'];
  learningTracks?: Maybe<Array<LearningTrack>>;
  name: Scalars['String']['output'];
  sequence: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  userCampaignTargets?: Maybe<Array<UserCampaignTarget>>;
  userCampaigns?: Maybe<Array<UserCampaign>>;
};

export type CampaignAvgAggregate = {
  __typename?: 'CampaignAvgAggregate';
  sequence?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type CampaignCount = {
  __typename?: 'CampaignCount';
  campaignTargets: Scalars['Int']['output'];
  learningTracks: Scalars['Int']['output'];
  userCampaignTargets: Scalars['Int']['output'];
  userCampaigns: Scalars['Int']['output'];
};

export type CampaignCountAggregate = {
  __typename?: 'CampaignCountAggregate';
  _all: Scalars['Int']['output'];
  certificationId: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
};

export type CampaignCreateNestedOneWithoutCampaignTargetsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutCampaignTargetsInput>;
  create?: InputMaybe<CampaignCreateWithoutCampaignTargetsInput>;
};

export type CampaignCreateNestedOneWithoutCertificationInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutCertificationInput>;
  create?: InputMaybe<CampaignCreateWithoutCertificationInput>;
};

export type CampaignCreateNestedOneWithoutLearningTracksInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutLearningTracksInput>;
  create?: InputMaybe<CampaignCreateWithoutLearningTracksInput>;
};

export type CampaignCreateNestedOneWithoutUserCampaignTargetsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutUserCampaignTargetsInput>;
  create?: InputMaybe<CampaignCreateWithoutUserCampaignTargetsInput>;
};

export type CampaignCreateNestedOneWithoutUserCampaignsInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutUserCampaignsInput>;
  create?: InputMaybe<CampaignCreateWithoutUserCampaignsInput>;
};

export type CampaignCreateOrConnectWithoutCampaignTargetsInput = {
  create: CampaignCreateWithoutCampaignTargetsInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignCreateOrConnectWithoutCertificationInput = {
  create: CampaignCreateWithoutCertificationInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignCreateOrConnectWithoutLearningTracksInput = {
  create: CampaignCreateWithoutLearningTracksInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignCreateOrConnectWithoutUserCampaignTargetsInput = {
  create: CampaignCreateWithoutUserCampaignTargetsInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignCreateOrConnectWithoutUserCampaignsInput = {
  create: CampaignCreateWithoutUserCampaignsInput;
  where: CampaignWhereUniqueInput;
};

export type CampaignCreateWithoutCampaignTargetsInput = {
  certification?: InputMaybe<CertificationCreateNestedOneWithoutCampaignsInput>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  learningTracks?: InputMaybe<LearningTrackCreateNestedManyWithoutCampaignInput>;
  name: Scalars['String']['input'];
  sequence: Scalars['Int']['input'];
  target: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  userCampaignTargets?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutCampaignInput>;
  userCampaigns?: InputMaybe<UserCampaignCreateNestedManyWithoutCampaignInput>;
};

export type CampaignCreateWithoutCertificationInput = {
  campaignTargets?: InputMaybe<CampaignTargetCreateNestedManyWithoutCampaignInput>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  learningTracks?: InputMaybe<LearningTrackCreateNestedManyWithoutCampaignInput>;
  name: Scalars['String']['input'];
  sequence: Scalars['Int']['input'];
  target: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  userCampaignTargets?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutCampaignInput>;
  userCampaigns?: InputMaybe<UserCampaignCreateNestedManyWithoutCampaignInput>;
};

export type CampaignCreateWithoutLearningTracksInput = {
  campaignTargets?: InputMaybe<CampaignTargetCreateNestedManyWithoutCampaignInput>;
  certification?: InputMaybe<CertificationCreateNestedOneWithoutCampaignsInput>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  sequence: Scalars['Int']['input'];
  target: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  userCampaignTargets?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutCampaignInput>;
  userCampaigns?: InputMaybe<UserCampaignCreateNestedManyWithoutCampaignInput>;
};

export type CampaignCreateWithoutUserCampaignTargetsInput = {
  campaignTargets?: InputMaybe<CampaignTargetCreateNestedManyWithoutCampaignInput>;
  certification?: InputMaybe<CertificationCreateNestedOneWithoutCampaignsInput>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  learningTracks?: InputMaybe<LearningTrackCreateNestedManyWithoutCampaignInput>;
  name: Scalars['String']['input'];
  sequence: Scalars['Int']['input'];
  target: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  userCampaigns?: InputMaybe<UserCampaignCreateNestedManyWithoutCampaignInput>;
};

export type CampaignCreateWithoutUserCampaignsInput = {
  campaignTargets?: InputMaybe<CampaignTargetCreateNestedManyWithoutCampaignInput>;
  certification?: InputMaybe<CertificationCreateNestedOneWithoutCampaignsInput>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  learningTracks?: InputMaybe<LearningTrackCreateNestedManyWithoutCampaignInput>;
  name: Scalars['String']['input'];
  sequence: Scalars['Int']['input'];
  target: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  userCampaignTargets?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutCampaignInput>;
};

export type CampaignMaxAggregate = {
  __typename?: 'CampaignMaxAggregate';
  certificationId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type CampaignMinAggregate = {
  __typename?: 'CampaignMinAggregate';
  certificationId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type CampaignNullableRelationFilter = {
  is?: InputMaybe<CampaignWhereInput>;
  isNot?: InputMaybe<CampaignWhereInput>;
};

export type CampaignOrderByWithRelationInput = {
  campaignTargets?: InputMaybe<CampaignTargetOrderByRelationAggregateInput>;
  certification?: InputMaybe<CertificationOrderByWithRelationInput>;
  certificationId?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  learningTracks?: InputMaybe<LearningTrackOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetOrderByRelationAggregateInput>;
  userCampaigns?: InputMaybe<UserCampaignOrderByRelationAggregateInput>;
};

export type CampaignRelationFilter = {
  is?: InputMaybe<CampaignWhereInput>;
  isNot?: InputMaybe<CampaignWhereInput>;
};

export type CampaignSumAggregate = {
  __typename?: 'CampaignSumAggregate';
  sequence?: Maybe<Scalars['Int']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
};

export type CampaignTarget = {
  __typename?: 'CampaignTarget';
  UserCampaignTarget?: Maybe<Array<UserCampaignTarget>>;
  _count: CampaignTargetCount;
  campaign: Campaign;
  campaignId: Scalars['String']['output'];
  extra?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
  reward: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  type: CampaignType;
};

export type CampaignTargetAvgAggregate = {
  __typename?: 'CampaignTargetAvgAggregate';
  reward?: Maybe<Scalars['Float']['output']>;
  sequence?: Maybe<Scalars['Float']['output']>;
};

export type CampaignTargetCount = {
  __typename?: 'CampaignTargetCount';
  UserCampaignTarget: Scalars['Int']['output'];
};

export type CampaignTargetCountAggregate = {
  __typename?: 'CampaignTargetCountAggregate';
  _all: Scalars['Int']['output'];
  campaignId: Scalars['Int']['output'];
  extra: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  reward: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
};

export type CampaignTargetCreateManyCampaignInput = {
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  reward: Scalars['Int']['input'];
  sequence: Scalars['Int']['input'];
  type: CampaignType;
};

export type CampaignTargetCreateManyCampaignInputEnvelope = {
  data: Array<CampaignTargetCreateManyCampaignInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CampaignTargetCreateNestedManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<CampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CampaignTargetCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<CampaignTargetCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<CampaignTargetCreateManyCampaignInputEnvelope>;
};

export type CampaignTargetCreateNestedOneWithoutUserCampaignTargetInput = {
  connect?: InputMaybe<CampaignTargetWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignTargetCreateOrConnectWithoutUserCampaignTargetInput>;
  create?: InputMaybe<CampaignTargetCreateWithoutUserCampaignTargetInput>;
};

export type CampaignTargetCreateOrConnectWithoutCampaignInput = {
  create: CampaignTargetCreateWithoutCampaignInput;
  where: CampaignTargetWhereUniqueInput;
};

export type CampaignTargetCreateOrConnectWithoutUserCampaignTargetInput = {
  create: CampaignTargetCreateWithoutUserCampaignTargetInput;
  where: CampaignTargetWhereUniqueInput;
};

export type CampaignTargetCreateWithoutCampaignInput = {
  UserCampaignTarget?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutCampaignTargetInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  reward: Scalars['Int']['input'];
  sequence: Scalars['Int']['input'];
  type: CampaignType;
};

export type CampaignTargetCreateWithoutUserCampaignTargetInput = {
  campaign: CampaignCreateNestedOneWithoutCampaignTargetsInput;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  reward: Scalars['Int']['input'];
  sequence: Scalars['Int']['input'];
  type: CampaignType;
};

export type CampaignTargetListRelationFilter = {
  every?: InputMaybe<CampaignTargetWhereInput>;
  none?: InputMaybe<CampaignTargetWhereInput>;
  some?: InputMaybe<CampaignTargetWhereInput>;
};

export type CampaignTargetMaxAggregate = {
  __typename?: 'CampaignTargetMaxAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  reward?: Maybe<Scalars['Int']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<CampaignType>;
};

export type CampaignTargetMinAggregate = {
  __typename?: 'CampaignTargetMinAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  reward?: Maybe<Scalars['Int']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<CampaignType>;
};

export type CampaignTargetOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CampaignTargetRelationFilter = {
  is?: InputMaybe<CampaignTargetWhereInput>;
  isNot?: InputMaybe<CampaignTargetWhereInput>;
};

export type CampaignTargetScalarWhereInput = {
  AND?: InputMaybe<Array<CampaignTargetScalarWhereInput>>;
  NOT?: InputMaybe<Array<CampaignTargetScalarWhereInput>>;
  OR?: InputMaybe<Array<CampaignTargetScalarWhereInput>>;
  campaignId?: InputMaybe<UuidFilter>;
  extra?: InputMaybe<JsonNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  name?: InputMaybe<StringFilter>;
  reward?: InputMaybe<IntFilter>;
  sequence?: InputMaybe<IntFilter>;
  type?: InputMaybe<EnumCampaignTypeFilter>;
};

export type CampaignTargetSumAggregate = {
  __typename?: 'CampaignTargetSumAggregate';
  reward?: Maybe<Scalars['Int']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
};

export type CampaignTargetUpdateManyMutationInput = {
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  reward?: InputMaybe<IntFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
};

export type CampaignTargetUpdateManyWithWhereWithoutCampaignInput = {
  data: CampaignTargetUpdateManyMutationInput;
  where: CampaignTargetScalarWhereInput;
};

export type CampaignTargetUpdateManyWithoutCampaignNestedInput = {
  connect?: InputMaybe<Array<CampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CampaignTargetCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<CampaignTargetCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<CampaignTargetCreateManyCampaignInputEnvelope>;
  delete?: InputMaybe<Array<CampaignTargetWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CampaignTargetScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CampaignTargetWhereUniqueInput>>;
  set?: InputMaybe<Array<CampaignTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<CampaignTargetUpdateWithWhereUniqueWithoutCampaignInput>>;
  updateMany?: InputMaybe<Array<CampaignTargetUpdateManyWithWhereWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<CampaignTargetUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type CampaignTargetUpdateOneRequiredWithoutUserCampaignTargetNestedInput = {
  connect?: InputMaybe<CampaignTargetWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignTargetCreateOrConnectWithoutUserCampaignTargetInput>;
  create?: InputMaybe<CampaignTargetCreateWithoutUserCampaignTargetInput>;
  update?: InputMaybe<CampaignTargetUpdateToOneWithWhereWithoutUserCampaignTargetInput>;
  upsert?: InputMaybe<CampaignTargetUpsertWithoutUserCampaignTargetInput>;
};

export type CampaignTargetUpdateToOneWithWhereWithoutUserCampaignTargetInput = {
  data: CampaignTargetUpdateWithoutUserCampaignTargetInput;
  where?: InputMaybe<CampaignTargetWhereInput>;
};

export type CampaignTargetUpdateWithWhereUniqueWithoutCampaignInput = {
  data: CampaignTargetUpdateWithoutCampaignInput;
  where: CampaignTargetWhereUniqueInput;
};

export type CampaignTargetUpdateWithoutCampaignInput = {
  UserCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutCampaignTargetNestedInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  reward?: InputMaybe<IntFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
};

export type CampaignTargetUpdateWithoutUserCampaignTargetInput = {
  campaign?: InputMaybe<CampaignUpdateOneRequiredWithoutCampaignTargetsNestedInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  reward?: InputMaybe<IntFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
};

export type CampaignTargetUpsertWithWhereUniqueWithoutCampaignInput = {
  create: CampaignTargetCreateWithoutCampaignInput;
  update: CampaignTargetUpdateWithoutCampaignInput;
  where: CampaignTargetWhereUniqueInput;
};

export type CampaignTargetUpsertWithoutUserCampaignTargetInput = {
  create: CampaignTargetCreateWithoutUserCampaignTargetInput;
  update: CampaignTargetUpdateWithoutUserCampaignTargetInput;
  where?: InputMaybe<CampaignTargetWhereInput>;
};

export type CampaignTargetWhereInput = {
  AND?: InputMaybe<Array<CampaignTargetWhereInput>>;
  NOT?: InputMaybe<Array<CampaignTargetWhereInput>>;
  OR?: InputMaybe<Array<CampaignTargetWhereInput>>;
  UserCampaignTarget?: InputMaybe<UserCampaignTargetListRelationFilter>;
  campaign?: InputMaybe<CampaignRelationFilter>;
  campaignId?: InputMaybe<UuidFilter>;
  extra?: InputMaybe<JsonNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  name?: InputMaybe<StringFilter>;
  reward?: InputMaybe<IntFilter>;
  sequence?: InputMaybe<IntFilter>;
  type?: InputMaybe<EnumCampaignTypeFilter>;
};

export type CampaignTargetWhereUniqueInput = {
  AND?: InputMaybe<Array<CampaignTargetWhereInput>>;
  NOT?: InputMaybe<Array<CampaignTargetWhereInput>>;
  OR?: InputMaybe<Array<CampaignTargetWhereInput>>;
  UserCampaignTarget?: InputMaybe<UserCampaignTargetListRelationFilter>;
  campaign?: InputMaybe<CampaignRelationFilter>;
  campaignId?: InputMaybe<UuidFilter>;
  extra?: InputMaybe<JsonNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<StringFilter>;
  reward?: InputMaybe<IntFilter>;
  sequence?: InputMaybe<IntFilter>;
  type?: InputMaybe<EnumCampaignTypeFilter>;
};

export enum CampaignType {
  CompleteCourse = 'COMPLETE_COURSE',
  CompleteLearningTrack = 'COMPLETE_LEARNING_TRACK',
  ConnectGithub = 'CONNECT_GITHUB',
  FollowTwitter = 'FOLLOW_TWITTER',
  JoinDiscord = 'JOIN_DISCORD'
}

export type CampaignUpdateOneRequiredWithoutCampaignTargetsNestedInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutCampaignTargetsInput>;
  create?: InputMaybe<CampaignCreateWithoutCampaignTargetsInput>;
  update?: InputMaybe<CampaignUpdateToOneWithWhereWithoutCampaignTargetsInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutCampaignTargetsInput>;
};

export type CampaignUpdateOneRequiredWithoutCertificationNestedInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutCertificationInput>;
  create?: InputMaybe<CampaignCreateWithoutCertificationInput>;
  update?: InputMaybe<CampaignUpdateToOneWithWhereWithoutCertificationInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutCertificationInput>;
};

export type CampaignUpdateOneRequiredWithoutUserCampaignTargetsNestedInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutUserCampaignTargetsInput>;
  create?: InputMaybe<CampaignCreateWithoutUserCampaignTargetsInput>;
  update?: InputMaybe<CampaignUpdateToOneWithWhereWithoutUserCampaignTargetsInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutUserCampaignTargetsInput>;
};

export type CampaignUpdateOneRequiredWithoutUserCampaignsNestedInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutUserCampaignsInput>;
  create?: InputMaybe<CampaignCreateWithoutUserCampaignsInput>;
  update?: InputMaybe<CampaignUpdateToOneWithWhereWithoutUserCampaignsInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutUserCampaignsInput>;
};

export type CampaignUpdateOneWithoutLearningTracksNestedInput = {
  connect?: InputMaybe<CampaignWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CampaignCreateOrConnectWithoutLearningTracksInput>;
  create?: InputMaybe<CampaignCreateWithoutLearningTracksInput>;
  delete?: InputMaybe<CampaignWhereInput>;
  disconnect?: InputMaybe<CampaignWhereInput>;
  update?: InputMaybe<CampaignUpdateToOneWithWhereWithoutLearningTracksInput>;
  upsert?: InputMaybe<CampaignUpsertWithoutLearningTracksInput>;
};

export type CampaignUpdateToOneWithWhereWithoutCampaignTargetsInput = {
  data: CampaignUpdateWithoutCampaignTargetsInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpdateToOneWithWhereWithoutCertificationInput = {
  data: CampaignUpdateWithoutCertificationInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpdateToOneWithWhereWithoutLearningTracksInput = {
  data: CampaignUpdateWithoutLearningTracksInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpdateToOneWithWhereWithoutUserCampaignTargetsInput = {
  data: CampaignUpdateWithoutUserCampaignTargetsInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpdateToOneWithWhereWithoutUserCampaignsInput = {
  data: CampaignUpdateWithoutUserCampaignsInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpdateWithoutCampaignTargetsInput = {
  certification?: InputMaybe<CertificationUpdateOneWithoutCampaignsNestedInput>;
  certificationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTracks?: InputMaybe<LearningTrackUpdateManyWithoutCampaignNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetUpdateManyWithoutCampaignNestedInput>;
  userCampaigns?: InputMaybe<UserCampaignUpdateManyWithoutCampaignNestedInput>;
};

export type CampaignUpdateWithoutCertificationInput = {
  campaignTargets?: InputMaybe<CampaignTargetUpdateManyWithoutCampaignNestedInput>;
  certificationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTracks?: InputMaybe<LearningTrackUpdateManyWithoutCampaignNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetUpdateManyWithoutCampaignNestedInput>;
  userCampaigns?: InputMaybe<UserCampaignUpdateManyWithoutCampaignNestedInput>;
};

export type CampaignUpdateWithoutLearningTracksInput = {
  campaignTargets?: InputMaybe<CampaignTargetUpdateManyWithoutCampaignNestedInput>;
  certification?: InputMaybe<CertificationUpdateOneWithoutCampaignsNestedInput>;
  certificationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetUpdateManyWithoutCampaignNestedInput>;
  userCampaigns?: InputMaybe<UserCampaignUpdateManyWithoutCampaignNestedInput>;
};

export type CampaignUpdateWithoutUserCampaignTargetsInput = {
  campaignTargets?: InputMaybe<CampaignTargetUpdateManyWithoutCampaignNestedInput>;
  certification?: InputMaybe<CertificationUpdateOneWithoutCampaignsNestedInput>;
  certificationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTracks?: InputMaybe<LearningTrackUpdateManyWithoutCampaignNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userCampaigns?: InputMaybe<UserCampaignUpdateManyWithoutCampaignNestedInput>;
};

export type CampaignUpdateWithoutUserCampaignsInput = {
  campaignTargets?: InputMaybe<CampaignTargetUpdateManyWithoutCampaignNestedInput>;
  certification?: InputMaybe<CertificationUpdateOneWithoutCampaignsNestedInput>;
  certificationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTracks?: InputMaybe<LearningTrackUpdateManyWithoutCampaignNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetUpdateManyWithoutCampaignNestedInput>;
};

export type CampaignUpsertWithoutCampaignTargetsInput = {
  create: CampaignCreateWithoutCampaignTargetsInput;
  update: CampaignUpdateWithoutCampaignTargetsInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpsertWithoutCertificationInput = {
  create: CampaignCreateWithoutCertificationInput;
  update: CampaignUpdateWithoutCertificationInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpsertWithoutLearningTracksInput = {
  create: CampaignCreateWithoutLearningTracksInput;
  update: CampaignUpdateWithoutLearningTracksInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpsertWithoutUserCampaignTargetsInput = {
  create: CampaignCreateWithoutUserCampaignTargetsInput;
  update: CampaignUpdateWithoutUserCampaignTargetsInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignUpsertWithoutUserCampaignsInput = {
  create: CampaignCreateWithoutUserCampaignsInput;
  update: CampaignUpdateWithoutUserCampaignsInput;
  where?: InputMaybe<CampaignWhereInput>;
};

export type CampaignWhereInput = {
  AND?: InputMaybe<Array<CampaignWhereInput>>;
  NOT?: InputMaybe<Array<CampaignWhereInput>>;
  OR?: InputMaybe<Array<CampaignWhereInput>>;
  campaignTargets?: InputMaybe<CampaignTargetListRelationFilter>;
  certification?: InputMaybe<CertificationNullableRelationFilter>;
  certificationId?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<UuidFilter>;
  learningTracks?: InputMaybe<LearningTrackListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  sequence?: InputMaybe<IntFilter>;
  target?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetListRelationFilter>;
  userCampaigns?: InputMaybe<UserCampaignListRelationFilter>;
};

export type CampaignWhereUniqueInput = {
  AND?: InputMaybe<Array<CampaignWhereInput>>;
  NOT?: InputMaybe<Array<CampaignWhereInput>>;
  OR?: InputMaybe<Array<CampaignWhereInput>>;
  campaignTargets?: InputMaybe<CampaignTargetListRelationFilter>;
  certification?: InputMaybe<CertificationNullableRelationFilter>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  learningTracks?: InputMaybe<LearningTrackListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  sequence?: InputMaybe<IntFilter>;
  target?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  userCampaignTargets?: InputMaybe<UserCampaignTargetListRelationFilter>;
  userCampaigns?: InputMaybe<UserCampaignListRelationFilter>;
};

export type Certification = {
  __typename?: 'Certification';
  _count: CertificationCount;
  campaigns: Campaign;
  chainId: Scalars['Int']['output'];
  contract?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  credits: Scalars['Int']['output'];
  description: Scalars['String']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['JSON']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  learningTrack?: Maybe<Array<LearningTrack>>;
  name: Scalars['String']['output'];
  template?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userCertification?: Maybe<Array<UserCertification>>;
};

export type CertificationAvgAggregate = {
  __typename?: 'CertificationAvgAggregate';
  chainId?: Maybe<Scalars['Float']['output']>;
  credits?: Maybe<Scalars['Float']['output']>;
  exp?: Maybe<Scalars['Float']['output']>;
};

export type CertificationAvgAggregateInput = {
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  credits?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CertificationAvgOrderByAggregateInput = {
  chainId?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
};

export type CertificationCount = {
  __typename?: 'CertificationCount';
  learningTrack: Scalars['Int']['output'];
  userCertification: Scalars['Int']['output'];
};

export type CertificationCountAggregate = {
  __typename?: 'CertificationCountAggregate';
  _all: Scalars['Int']['output'];
  chainId: Scalars['Int']['output'];
  contract: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  credits: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  template: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CertificationCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  contract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  credits?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
  extra?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  template?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CertificationCountOrderByAggregateInput = {
  chainId?: InputMaybe<SortOrder>;
  contract?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  extra?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  template?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CertificationCreateInput = {
  campaigns?: InputMaybe<CampaignCreateNestedOneWithoutCertificationInput>;
  chainId?: InputMaybe<Scalars['Int']['input']>;
  contract?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  credits?: InputMaybe<Scalars['Int']['input']>;
  description: Scalars['String']['input'];
  exp?: InputMaybe<Scalars['Int']['input']>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image: Scalars['String']['input'];
  learningTrack?: InputMaybe<LearningTrackCreateNestedManyWithoutCertificationInput>;
  name: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCertification?: InputMaybe<UserCertificationCreateNestedManyWithoutCertificationInput>;
};

export type CertificationCreateManyInput = {
  chainId?: InputMaybe<Scalars['Int']['input']>;
  contract?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  credits?: InputMaybe<Scalars['Int']['input']>;
  description: Scalars['String']['input'];
  exp?: InputMaybe<Scalars['Int']['input']>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['String']['input'];
  name: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CertificationCreateNestedOneWithoutCampaignsInput = {
  connect?: InputMaybe<CertificationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CertificationCreateOrConnectWithoutCampaignsInput>;
  create?: InputMaybe<CertificationCreateWithoutCampaignsInput>;
};

export type CertificationCreateNestedOneWithoutLearningTrackInput = {
  connect?: InputMaybe<CertificationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CertificationCreateOrConnectWithoutLearningTrackInput>;
  create?: InputMaybe<CertificationCreateWithoutLearningTrackInput>;
};

export type CertificationCreateNestedOneWithoutUserCertificationInput = {
  connect?: InputMaybe<CertificationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CertificationCreateOrConnectWithoutUserCertificationInput>;
  create?: InputMaybe<CertificationCreateWithoutUserCertificationInput>;
};

export type CertificationCreateOrConnectWithoutCampaignsInput = {
  create: CertificationCreateWithoutCampaignsInput;
  where: CertificationWhereUniqueInput;
};

export type CertificationCreateOrConnectWithoutLearningTrackInput = {
  create: CertificationCreateWithoutLearningTrackInput;
  where: CertificationWhereUniqueInput;
};

export type CertificationCreateOrConnectWithoutUserCertificationInput = {
  create: CertificationCreateWithoutUserCertificationInput;
  where: CertificationWhereUniqueInput;
};

export type CertificationCreateWithoutCampaignsInput = {
  chainId?: InputMaybe<Scalars['Int']['input']>;
  contract?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  credits?: InputMaybe<Scalars['Int']['input']>;
  description: Scalars['String']['input'];
  exp?: InputMaybe<Scalars['Int']['input']>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image: Scalars['String']['input'];
  learningTrack?: InputMaybe<LearningTrackCreateNestedManyWithoutCertificationInput>;
  name: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCertification?: InputMaybe<UserCertificationCreateNestedManyWithoutCertificationInput>;
};

export type CertificationCreateWithoutLearningTrackInput = {
  campaigns?: InputMaybe<CampaignCreateNestedOneWithoutCertificationInput>;
  chainId?: InputMaybe<Scalars['Int']['input']>;
  contract?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  credits?: InputMaybe<Scalars['Int']['input']>;
  description: Scalars['String']['input'];
  exp?: InputMaybe<Scalars['Int']['input']>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image: Scalars['String']['input'];
  name: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCertification?: InputMaybe<UserCertificationCreateNestedManyWithoutCertificationInput>;
};

export type CertificationCreateWithoutUserCertificationInput = {
  campaigns?: InputMaybe<CampaignCreateNestedOneWithoutCertificationInput>;
  chainId?: InputMaybe<Scalars['Int']['input']>;
  contract?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  credits?: InputMaybe<Scalars['Int']['input']>;
  description: Scalars['String']['input'];
  exp?: InputMaybe<Scalars['Int']['input']>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image: Scalars['String']['input'];
  learningTrack?: InputMaybe<LearningTrackCreateNestedManyWithoutCertificationInput>;
  name: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CertificationExtend = {
  __typename?: 'CertificationExtend';
  _count: CertificationCount;
  campaigns: Campaign;
  chainId: Scalars['Int']['output'];
  contract?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  credits: Scalars['Int']['output'];
  description: Scalars['String']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['JSON']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  learningTrack?: Maybe<Array<LearningTrack>>;
  name: Scalars['String']['output'];
  template?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userCertification?: Maybe<UserCertification>;
};

export type CertificationGroupBy = {
  __typename?: 'CertificationGroupBy';
  _avg?: Maybe<CertificationAvgAggregate>;
  _count?: Maybe<CertificationCountAggregate>;
  _max?: Maybe<CertificationMaxAggregate>;
  _min?: Maybe<CertificationMinAggregate>;
  _sum?: Maybe<CertificationSumAggregate>;
  chainId: Scalars['Int']['output'];
  contract?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  credits: Scalars['Int']['output'];
  description: Scalars['String']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['JSON']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  name: Scalars['String']['output'];
  template?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type CertificationListPaginated = {
  __typename?: 'CertificationListPaginated';
  data?: Maybe<Array<Certification>>;
  total: Scalars['Int']['output'];
};

export type CertificationMaxAggregate = {
  __typename?: 'CertificationMaxAggregate';
  chainId?: Maybe<Scalars['Int']['output']>;
  contract?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  credits?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  template?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CertificationMaxAggregateInput = {
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  contract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  credits?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  template?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CertificationMaxOrderByAggregateInput = {
  chainId?: InputMaybe<SortOrder>;
  contract?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  template?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CertificationMinAggregate = {
  __typename?: 'CertificationMinAggregate';
  chainId?: Maybe<Scalars['Int']['output']>;
  contract?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  credits?: Maybe<Scalars['Int']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  template?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CertificationMinAggregateInput = {
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  contract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  credits?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  template?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CertificationMinOrderByAggregateInput = {
  chainId?: InputMaybe<SortOrder>;
  contract?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  template?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CertificationNullableRelationFilter = {
  is?: InputMaybe<CertificationWhereInput>;
  isNot?: InputMaybe<CertificationWhereInput>;
};

export type CertificationOrderByWithAggregationInput = {
  _avg?: InputMaybe<CertificationAvgOrderByAggregateInput>;
  _count?: InputMaybe<CertificationCountOrderByAggregateInput>;
  _max?: InputMaybe<CertificationMaxOrderByAggregateInput>;
  _min?: InputMaybe<CertificationMinOrderByAggregateInput>;
  _sum?: InputMaybe<CertificationSumOrderByAggregateInput>;
  chainId?: InputMaybe<SortOrder>;
  contract?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  extra?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  template?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CertificationOrderByWithRelationInput = {
  campaigns?: InputMaybe<CampaignOrderByWithRelationInput>;
  chainId?: InputMaybe<SortOrder>;
  contract?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  extra?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  learningTrack?: InputMaybe<LearningTrackOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  template?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  userCertification?: InputMaybe<UserCertificationOrderByRelationAggregateInput>;
};

export type CertificationProgress = {
  __typename?: 'CertificationProgress';
  _count: CertificationCount;
  campaigns: Campaign;
  chainId: Scalars['Int']['output'];
  contract?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  credits: Scalars['Int']['output'];
  description: Scalars['String']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['JSON']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  learningTrack?: Maybe<Array<LearningTrack>>;
  name: Scalars['String']['output'];
  progress?: Maybe<Scalars['Float']['output']>;
  template?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userCertification?: Maybe<Array<UserCertification>>;
};

export type CertificationRelationFilter = {
  is?: InputMaybe<CertificationWhereInput>;
  isNot?: InputMaybe<CertificationWhereInput>;
};

export enum CertificationScalarFieldEnum {
  ChainId = 'chainId',
  Contract = 'contract',
  CreatedAt = 'createdAt',
  Credits = 'credits',
  Description = 'description',
  Exp = 'exp',
  Extra = 'extra',
  Id = 'id',
  Image = 'image',
  Name = 'name',
  Template = 'template',
  UpdatedAt = 'updatedAt'
}

export type CertificationScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CertificationScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CertificationScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CertificationScalarWhereWithAggregatesInput>>;
  chainId?: InputMaybe<IntWithAggregatesFilter>;
  contract?: InputMaybe<StringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  credits?: InputMaybe<IntWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  exp?: InputMaybe<IntWithAggregatesFilter>;
  extra?: InputMaybe<JsonWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  image?: InputMaybe<StringWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  template?: InputMaybe<StringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type CertificationSignature = {
  __typename?: 'CertificationSignature';
  msg: Scalars['String']['output'];
  signature: Scalars['String']['output'];
};

export type CertificationSumAggregate = {
  __typename?: 'CertificationSumAggregate';
  chainId?: Maybe<Scalars['Int']['output']>;
  credits?: Maybe<Scalars['Int']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
};

export type CertificationSumAggregateInput = {
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  credits?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CertificationSumOrderByAggregateInput = {
  chainId?: InputMaybe<SortOrder>;
  credits?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
};

export type CertificationUpdateInput = {
  campaigns?: InputMaybe<CampaignUpdateOneRequiredWithoutCertificationNestedInput>;
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  contract?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  credits?: InputMaybe<IntFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTrack?: InputMaybe<LearningTrackUpdateManyWithoutCertificationNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  template?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCertification?: InputMaybe<UserCertificationUpdateManyWithoutCertificationNestedInput>;
};

export type CertificationUpdateManyMutationInput = {
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  contract?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  credits?: InputMaybe<IntFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  template?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CertificationUpdateOneRequiredWithoutUserCertificationNestedInput = {
  connect?: InputMaybe<CertificationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CertificationCreateOrConnectWithoutUserCertificationInput>;
  create?: InputMaybe<CertificationCreateWithoutUserCertificationInput>;
  update?: InputMaybe<CertificationUpdateToOneWithWhereWithoutUserCertificationInput>;
  upsert?: InputMaybe<CertificationUpsertWithoutUserCertificationInput>;
};

export type CertificationUpdateOneWithoutCampaignsNestedInput = {
  connect?: InputMaybe<CertificationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CertificationCreateOrConnectWithoutCampaignsInput>;
  create?: InputMaybe<CertificationCreateWithoutCampaignsInput>;
  delete?: InputMaybe<CertificationWhereInput>;
  disconnect?: InputMaybe<CertificationWhereInput>;
  update?: InputMaybe<CertificationUpdateToOneWithWhereWithoutCampaignsInput>;
  upsert?: InputMaybe<CertificationUpsertWithoutCampaignsInput>;
};

export type CertificationUpdateOneWithoutLearningTrackNestedInput = {
  connect?: InputMaybe<CertificationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CertificationCreateOrConnectWithoutLearningTrackInput>;
  create?: InputMaybe<CertificationCreateWithoutLearningTrackInput>;
  delete?: InputMaybe<CertificationWhereInput>;
  disconnect?: InputMaybe<CertificationWhereInput>;
  update?: InputMaybe<CertificationUpdateToOneWithWhereWithoutLearningTrackInput>;
  upsert?: InputMaybe<CertificationUpsertWithoutLearningTrackInput>;
};

export type CertificationUpdateToOneWithWhereWithoutCampaignsInput = {
  data: CertificationUpdateWithoutCampaignsInput;
  where?: InputMaybe<CertificationWhereInput>;
};

export type CertificationUpdateToOneWithWhereWithoutLearningTrackInput = {
  data: CertificationUpdateWithoutLearningTrackInput;
  where?: InputMaybe<CertificationWhereInput>;
};

export type CertificationUpdateToOneWithWhereWithoutUserCertificationInput = {
  data: CertificationUpdateWithoutUserCertificationInput;
  where?: InputMaybe<CertificationWhereInput>;
};

export type CertificationUpdateWithoutCampaignsInput = {
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  contract?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  credits?: InputMaybe<IntFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTrack?: InputMaybe<LearningTrackUpdateManyWithoutCertificationNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  template?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCertification?: InputMaybe<UserCertificationUpdateManyWithoutCertificationNestedInput>;
};

export type CertificationUpdateWithoutLearningTrackInput = {
  campaigns?: InputMaybe<CampaignUpdateOneRequiredWithoutCertificationNestedInput>;
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  contract?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  credits?: InputMaybe<IntFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  template?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCertification?: InputMaybe<UserCertificationUpdateManyWithoutCertificationNestedInput>;
};

export type CertificationUpdateWithoutUserCertificationInput = {
  campaigns?: InputMaybe<CampaignUpdateOneRequiredWithoutCertificationNestedInput>;
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  contract?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  credits?: InputMaybe<IntFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTrack?: InputMaybe<LearningTrackUpdateManyWithoutCertificationNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  template?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CertificationUpsertWithoutCampaignsInput = {
  create: CertificationCreateWithoutCampaignsInput;
  update: CertificationUpdateWithoutCampaignsInput;
  where?: InputMaybe<CertificationWhereInput>;
};

export type CertificationUpsertWithoutLearningTrackInput = {
  create: CertificationCreateWithoutLearningTrackInput;
  update: CertificationUpdateWithoutLearningTrackInput;
  where?: InputMaybe<CertificationWhereInput>;
};

export type CertificationUpsertWithoutUserCertificationInput = {
  create: CertificationCreateWithoutUserCertificationInput;
  update: CertificationUpdateWithoutUserCertificationInput;
  where?: InputMaybe<CertificationWhereInput>;
};

export type CertificationWhereInput = {
  AND?: InputMaybe<Array<CertificationWhereInput>>;
  NOT?: InputMaybe<Array<CertificationWhereInput>>;
  OR?: InputMaybe<Array<CertificationWhereInput>>;
  campaigns?: InputMaybe<CampaignRelationFilter>;
  chainId?: InputMaybe<IntFilter>;
  contract?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  credits?: InputMaybe<IntFilter>;
  description?: InputMaybe<StringFilter>;
  exp?: InputMaybe<IntFilter>;
  extra?: InputMaybe<JsonFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringFilter>;
  learningTrack?: InputMaybe<LearningTrackListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  template?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userCertification?: InputMaybe<UserCertificationListRelationFilter>;
};

export type CertificationWhereUniqueInput = {
  AND?: InputMaybe<Array<CertificationWhereInput>>;
  NOT?: InputMaybe<Array<CertificationWhereInput>>;
  OR?: InputMaybe<Array<CertificationWhereInput>>;
  campaigns?: InputMaybe<CampaignRelationFilter>;
  chainId?: InputMaybe<IntFilter>;
  contract?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  credits?: InputMaybe<IntFilter>;
  description?: InputMaybe<StringFilter>;
  exp?: InputMaybe<IntFilter>;
  extra?: InputMaybe<JsonFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<StringFilter>;
  learningTrack?: InputMaybe<LearningTrackListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  template?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userCertification?: InputMaybe<UserCertificationListRelationFilter>;
};

export type ChatBotResponse = {
  __typename?: 'ChatBotResponse';
  coin?: Maybe<Scalars['Int']['output']>;
  content?: Maybe<Scalars['String']['output']>;
  talkCount?: Maybe<Scalars['Int']['output']>;
};

export type CoLearning = {
  __typename?: 'CoLearning';
  _count: CoLearningCount;
  alias?: Maybe<Scalars['String']['output']>;
  application: Scalars['JSON']['output'];
  communityType?: Maybe<Scalars['String']['output']>;
  communityUrl?: Maybe<Scalars['String']['output']>;
  cover?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  ecosystem?: Maybe<Array<Scalars['String']['output']>>;
  events?: Maybe<Array<CoLearningEvent>>;
  id: Scalars['String']['output'];
  intro?: Maybe<Scalars['String']['output']>;
  latestDes?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  progress?: Maybe<Array<Scalars['String']['output']>>;
  qrImage?: Maybe<Scalars['String']['output']>;
  reward?: Maybe<Scalars['Decimal']['output']>;
  status: Scalars['Int']['output'];
  timeline?: Maybe<CoLearningTimeline>;
  todos?: Maybe<Array<CoLearningTodo>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type CoLearningAvgAggregate = {
  __typename?: 'CoLearningAvgAggregate';
  reward?: Maybe<Scalars['Decimal']['output']>;
  status?: Maybe<Scalars['Float']['output']>;
};

export type CoLearningCount = {
  __typename?: 'CoLearningCount';
  events: Scalars['Int']['output'];
  todos: Scalars['Int']['output'];
};

export type CoLearningCountAggregate = {
  __typename?: 'CoLearningCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  application: Scalars['Int']['output'];
  communityType: Scalars['Int']['output'];
  communityUrl: Scalars['Int']['output'];
  cover: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  ecosystem: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  intro: Scalars['Int']['output'];
  latestDes: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  qrImage: Scalars['Int']['output'];
  reward: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CoLearningCoustomWhereInput = {
  AND?: InputMaybe<Array<CoLearningWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningWhereInput>>;
  OR?: InputMaybe<Array<CoLearningWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  application?: InputMaybe<JsonFilter>;
  communityType?: InputMaybe<StringNullableFilter>;
  communityUrl?: InputMaybe<StringNullableFilter>;
  cover?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringNullableFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  events?: InputMaybe<CoLearningEventListRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  latestDes?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<StringNullableListFilter>;
  qrImage?: InputMaybe<StringNullableFilter>;
  reward?: InputMaybe<DecimalNullableFilter>;
  status?: InputMaybe<CoLearningStatus>;
  timeline?: InputMaybe<CoLearningTimelineNullableRelationFilter>;
  todos?: InputMaybe<CoLearningTodoListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CoLearningCreateInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  communityType?: InputMaybe<ComunityType>;
  communityUrl?: InputMaybe<Scalars['String']['input']>;
  cover?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ecosystem?: InputMaybe<Array<EcosystemValue>>;
  events?: InputMaybe<CoLearningEventCreateNestedManyWithoutCoLearningInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  latestDes?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<CoLearningCreateprogressInput>;
  qrImage?: InputMaybe<Scalars['String']['input']>;
  reward?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  timeline?: InputMaybe<CoLearningTimelineCreateNestedOneWithoutCoLearningInput>;
  todos?: InputMaybe<CoLearningTodoCreateNestedManyWithoutCoLearningInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningCreateNestedOneWithoutEventsInput = {
  connect?: InputMaybe<CoLearningWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CoLearningCreateOrConnectWithoutEventsInput>;
  create?: InputMaybe<CoLearningCreateWithoutEventsInput>;
};

export type CoLearningCreateNestedOneWithoutTimelineInput = {
  connect?: InputMaybe<CoLearningWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CoLearningCreateOrConnectWithoutTimelineInput>;
  create?: InputMaybe<CoLearningCreateWithoutTimelineInput>;
};

export type CoLearningCreateNestedOneWithoutTodosInput = {
  connect?: InputMaybe<CoLearningWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CoLearningCreateOrConnectWithoutTodosInput>;
  create?: InputMaybe<CoLearningCreateWithoutTodosInput>;
};

export type CoLearningCreateOrConnectWithoutEventsInput = {
  create: CoLearningCreateWithoutEventsInput;
  where: CoLearningWhereUniqueInput;
};

export type CoLearningCreateOrConnectWithoutTimelineInput = {
  create: CoLearningCreateWithoutTimelineInput;
  where: CoLearningWhereUniqueInput;
};

export type CoLearningCreateOrConnectWithoutTodosInput = {
  create: CoLearningCreateWithoutTodosInput;
  where: CoLearningWhereUniqueInput;
};

export type CoLearningCreateWithoutEventsInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  communityType?: InputMaybe<Scalars['String']['input']>;
  communityUrl?: InputMaybe<Scalars['String']['input']>;
  cover?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ecosystem?: InputMaybe<CoLearningCreateecosystemInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  latestDes?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<CoLearningCreateprogressInput>;
  qrImage?: InputMaybe<Scalars['String']['input']>;
  reward?: InputMaybe<Scalars['Decimal']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  timeline?: InputMaybe<CoLearningTimelineCreateNestedOneWithoutCoLearningInput>;
  todos?: InputMaybe<CoLearningTodoCreateNestedManyWithoutCoLearningInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningCreateWithoutTimelineInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  communityType?: InputMaybe<Scalars['String']['input']>;
  communityUrl?: InputMaybe<Scalars['String']['input']>;
  cover?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ecosystem?: InputMaybe<CoLearningCreateecosystemInput>;
  events?: InputMaybe<CoLearningEventCreateNestedManyWithoutCoLearningInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  latestDes?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<CoLearningCreateprogressInput>;
  qrImage?: InputMaybe<Scalars['String']['input']>;
  reward?: InputMaybe<Scalars['Decimal']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  todos?: InputMaybe<CoLearningTodoCreateNestedManyWithoutCoLearningInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningCreateWithoutTodosInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  communityType?: InputMaybe<Scalars['String']['input']>;
  communityUrl?: InputMaybe<Scalars['String']['input']>;
  cover?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ecosystem?: InputMaybe<CoLearningCreateecosystemInput>;
  events?: InputMaybe<CoLearningEventCreateNestedManyWithoutCoLearningInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  latestDes?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<CoLearningCreateprogressInput>;
  qrImage?: InputMaybe<Scalars['String']['input']>;
  reward?: InputMaybe<Scalars['Decimal']['input']>;
  status?: InputMaybe<Scalars['Int']['input']>;
  timeline?: InputMaybe<CoLearningTimelineCreateNestedOneWithoutCoLearningInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningCreateecosystemInput = {
  set: Array<Scalars['String']['input']>;
};

export type CoLearningCreateprogressInput = {
  set: Array<Scalars['String']['input']>;
};

export type CoLearningEvent = {
  __typename?: 'CoLearningEvent';
  coLearning?: Maybe<CoLearning>;
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['String']['output'];
  startTime?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

export type CoLearningEventCountAggregate = {
  __typename?: 'CoLearningEventCountAggregate';
  _all: Scalars['Int']['output'];
  coLearningId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  endTime: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  startTime: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  url: Scalars['Int']['output'];
};

export type CoLearningEventCreateInput = {
  coLearning?: InputMaybe<CoLearningCreateNestedOneWithoutEventsInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type CoLearningEventCreateManyCoLearningInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type CoLearningEventCreateManyCoLearningInputEnvelope = {
  data: Array<CoLearningEventCreateManyCoLearningInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CoLearningEventCreateNestedManyWithoutCoLearningInput = {
  connect?: InputMaybe<Array<CoLearningEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CoLearningEventCreateOrConnectWithoutCoLearningInput>>;
  create?: InputMaybe<Array<CoLearningEventCreateWithoutCoLearningInput>>;
  createMany?: InputMaybe<CoLearningEventCreateManyCoLearningInputEnvelope>;
};

export type CoLearningEventCreateOrConnectWithoutCoLearningInput = {
  create: CoLearningEventCreateWithoutCoLearningInput;
  where: CoLearningEventWhereUniqueInput;
};

export type CoLearningEventCreateWithoutCoLearningInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type CoLearningEventListPaginated = {
  __typename?: 'CoLearningEventListPaginated';
  data?: Maybe<Array<CoLearningEvent>>;
  total: Scalars['Int']['output'];
};

export type CoLearningEventListRelationFilter = {
  every?: InputMaybe<CoLearningEventWhereInput>;
  none?: InputMaybe<CoLearningEventWhereInput>;
  some?: InputMaybe<CoLearningEventWhereInput>;
};

export type CoLearningEventMaxAggregate = {
  __typename?: 'CoLearningEventMaxAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type CoLearningEventMinAggregate = {
  __typename?: 'CoLearningEventMinAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type CoLearningEventOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CoLearningEventOrderByWithRelationInput = {
  coLearning?: InputMaybe<CoLearningOrderByWithRelationInput>;
  coLearningId?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  endTime?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrderInput>;
  title?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrderInput>;
};

export enum CoLearningEventScalarFieldEnum {
  CoLearningId = 'coLearningId',
  CreatedAt = 'createdAt',
  Description = 'description',
  EndTime = 'endTime',
  Id = 'id',
  StartTime = 'startTime',
  Title = 'title',
  UpdatedAt = 'updatedAt',
  Url = 'url'
}

export type CoLearningEventScalarWhereInput = {
  AND?: InputMaybe<Array<CoLearningEventScalarWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningEventScalarWhereInput>>;
  OR?: InputMaybe<Array<CoLearningEventScalarWhereInput>>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  startTime?: InputMaybe<DateTimeNullableFilter>;
  title?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type CoLearningEventUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  endTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  startTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CoLearningEventUpdateManyWithWhereWithoutCoLearningInput = {
  data: CoLearningEventUpdateManyMutationInput;
  where: CoLearningEventScalarWhereInput;
};

export type CoLearningEventUpdateManyWithoutCoLearningNestedInput = {
  connect?: InputMaybe<Array<CoLearningEventWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CoLearningEventCreateOrConnectWithoutCoLearningInput>>;
  create?: InputMaybe<Array<CoLearningEventCreateWithoutCoLearningInput>>;
  createMany?: InputMaybe<CoLearningEventCreateManyCoLearningInputEnvelope>;
  delete?: InputMaybe<Array<CoLearningEventWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CoLearningEventScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CoLearningEventWhereUniqueInput>>;
  set?: InputMaybe<Array<CoLearningEventWhereUniqueInput>>;
  update?: InputMaybe<Array<CoLearningEventUpdateWithWhereUniqueWithoutCoLearningInput>>;
  updateMany?: InputMaybe<Array<CoLearningEventUpdateManyWithWhereWithoutCoLearningInput>>;
  upsert?: InputMaybe<Array<CoLearningEventUpsertWithWhereUniqueWithoutCoLearningInput>>;
};

export type CoLearningEventUpdateWithWhereUniqueWithoutCoLearningInput = {
  data: CoLearningEventUpdateWithoutCoLearningInput;
  where: CoLearningEventWhereUniqueInput;
};

export type CoLearningEventUpdateWithoutCoLearningInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  endTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  startTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CoLearningEventUpsertWithWhereUniqueWithoutCoLearningInput = {
  create: CoLearningEventCreateWithoutCoLearningInput;
  update: CoLearningEventUpdateWithoutCoLearningInput;
  where: CoLearningEventWhereUniqueInput;
};

export type CoLearningEventWhereInput = {
  AND?: InputMaybe<Array<CoLearningEventWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningEventWhereInput>>;
  OR?: InputMaybe<Array<CoLearningEventWhereInput>>;
  coLearning?: InputMaybe<CoLearningNullableRelationFilter>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  startTime?: InputMaybe<DateTimeNullableFilter>;
  title?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type CoLearningEventWhereUniqueInput = {
  AND?: InputMaybe<Array<CoLearningEventWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningEventWhereInput>>;
  OR?: InputMaybe<Array<CoLearningEventWhereInput>>;
  coLearning?: InputMaybe<CoLearningNullableRelationFilter>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<DateTimeNullableFilter>;
  title?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type CoLearningListPaginated = {
  __typename?: 'CoLearningListPaginated';
  data?: Maybe<Array<CoLearning>>;
  total: Scalars['Int']['output'];
};

export type CoLearningMaxAggregate = {
  __typename?: 'CoLearningMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  communityType?: Maybe<Scalars['String']['output']>;
  communityUrl?: Maybe<Scalars['String']['output']>;
  cover?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  latestDes?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  qrImage?: Maybe<Scalars['String']['output']>;
  reward?: Maybe<Scalars['Decimal']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CoLearningMember = {
  __typename?: 'CoLearningMember';
  coLearningId: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  info: Scalars['JSON']['output'];
  profile?: Maybe<UserProfile>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type CoLearningMemberCountAggregate = {
  __typename?: 'CoLearningMemberCountAggregate';
  _all: Scalars['Int']['output'];
  coLearningId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  info: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type CoLearningMemberCreateInput = {
  coLearningId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  profile?: InputMaybe<UserProfileCreateNestedOneWithoutCoLearningMemberInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningMemberCreateManyProfileInput = {
  coLearningId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningMemberCreateManyProfileInputEnvelope = {
  data: Array<CoLearningMemberCreateManyProfileInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CoLearningMemberCreateNestedManyWithoutProfileInput = {
  connect?: InputMaybe<Array<CoLearningMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CoLearningMemberCreateOrConnectWithoutProfileInput>>;
  create?: InputMaybe<Array<CoLearningMemberCreateWithoutProfileInput>>;
  createMany?: InputMaybe<CoLearningMemberCreateManyProfileInputEnvelope>;
};

export type CoLearningMemberCreateOrConnectWithoutProfileInput = {
  create: CoLearningMemberCreateWithoutProfileInput;
  where: CoLearningMemberWhereUniqueInput;
};

export type CoLearningMemberCreateWithoutProfileInput = {
  coLearningId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningMemberListPaginated = {
  __typename?: 'CoLearningMemberListPaginated';
  data?: Maybe<Array<CoLearningMember>>;
  total: Scalars['Int']['output'];
};

export type CoLearningMemberListRelationFilter = {
  every?: InputMaybe<CoLearningMemberWhereInput>;
  none?: InputMaybe<CoLearningMemberWhereInput>;
  some?: InputMaybe<CoLearningMemberWhereInput>;
};

export type CoLearningMemberMaxAggregate = {
  __typename?: 'CoLearningMemberMaxAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type CoLearningMemberMinAggregate = {
  __typename?: 'CoLearningMemberMinAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type CoLearningMemberOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CoLearningMemberOrderByWithRelationInput = {
  coLearningId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrder>;
  profile?: InputMaybe<UserProfileOrderByWithRelationInput>;
  status?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export enum CoLearningMemberScalarFieldEnum {
  CoLearningId = 'coLearningId',
  CreatedAt = 'createdAt',
  Id = 'id',
  Info = 'info',
  Status = 'status',
  UpdatedAt = 'updatedAt',
  UserId = 'userId'
}

export type CoLearningMemberScalarWhereInput = {
  AND?: InputMaybe<Array<CoLearningMemberScalarWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningMemberScalarWhereInput>>;
  OR?: InputMaybe<Array<CoLearningMemberScalarWhereInput>>;
  coLearningId?: InputMaybe<UuidFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<JsonFilter>;
  status?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type CoLearningMemberUpdateManyMutationInput = {
  coLearningId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CoLearningMemberUpdateManyWithWhereWithoutProfileInput = {
  data: CoLearningMemberUpdateManyMutationInput;
  where: CoLearningMemberScalarWhereInput;
};

export type CoLearningMemberUpdateManyWithoutProfileNestedInput = {
  connect?: InputMaybe<Array<CoLearningMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CoLearningMemberCreateOrConnectWithoutProfileInput>>;
  create?: InputMaybe<Array<CoLearningMemberCreateWithoutProfileInput>>;
  createMany?: InputMaybe<CoLearningMemberCreateManyProfileInputEnvelope>;
  delete?: InputMaybe<Array<CoLearningMemberWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CoLearningMemberScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CoLearningMemberWhereUniqueInput>>;
  set?: InputMaybe<Array<CoLearningMemberWhereUniqueInput>>;
  update?: InputMaybe<Array<CoLearningMemberUpdateWithWhereUniqueWithoutProfileInput>>;
  updateMany?: InputMaybe<Array<CoLearningMemberUpdateManyWithWhereWithoutProfileInput>>;
  upsert?: InputMaybe<Array<CoLearningMemberUpsertWithWhereUniqueWithoutProfileInput>>;
};

export type CoLearningMemberUpdateWithWhereUniqueWithoutProfileInput = {
  data: CoLearningMemberUpdateWithoutProfileInput;
  where: CoLearningMemberWhereUniqueInput;
};

export type CoLearningMemberUpdateWithoutProfileInput = {
  coLearningId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  status?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CoLearningMemberUpsertWithWhereUniqueWithoutProfileInput = {
  create: CoLearningMemberCreateWithoutProfileInput;
  update: CoLearningMemberUpdateWithoutProfileInput;
  where: CoLearningMemberWhereUniqueInput;
};

export type CoLearningMemberWhereInput = {
  AND?: InputMaybe<Array<CoLearningMemberWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningMemberWhereInput>>;
  OR?: InputMaybe<Array<CoLearningMemberWhereInput>>;
  coLearningId?: InputMaybe<UuidFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<JsonFilter>;
  profile?: InputMaybe<UserProfileNullableRelationFilter>;
  status?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type CoLearningMemberWhereUniqueInput = {
  AND?: InputMaybe<Array<CoLearningMemberWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningMemberWhereInput>>;
  OR?: InputMaybe<Array<CoLearningMemberWhereInput>>;
  coLearningId?: InputMaybe<UuidFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<JsonFilter>;
  profile?: InputMaybe<UserProfileNullableRelationFilter>;
  status?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type CoLearningMinAggregate = {
  __typename?: 'CoLearningMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  communityType?: Maybe<Scalars['String']['output']>;
  communityUrl?: Maybe<Scalars['String']['output']>;
  cover?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  latestDes?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  qrImage?: Maybe<Scalars['String']['output']>;
  reward?: Maybe<Scalars['Decimal']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CoLearningNullableRelationFilter = {
  is?: InputMaybe<CoLearningWhereInput>;
  isNot?: InputMaybe<CoLearningWhereInput>;
};

export type CoLearningOrderByWithRelationInput = {
  alias?: InputMaybe<SortOrderInput>;
  application?: InputMaybe<SortOrder>;
  communityType?: InputMaybe<SortOrderInput>;
  communityUrl?: InputMaybe<SortOrderInput>;
  cover?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrderInput>;
  ecosystem?: InputMaybe<SortOrder>;
  events?: InputMaybe<CoLearningEventOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  intro?: InputMaybe<SortOrderInput>;
  latestDes?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrderInput>;
  progress?: InputMaybe<SortOrder>;
  qrImage?: InputMaybe<SortOrderInput>;
  reward?: InputMaybe<SortOrderInput>;
  status?: InputMaybe<SortOrder>;
  timeline?: InputMaybe<CoLearningTimelineOrderByWithRelationInput>;
  todos?: InputMaybe<CoLearningTodoOrderByRelationAggregateInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum CoLearningScalarFieldEnum {
  Alias = 'alias',
  Application = 'application',
  CommunityType = 'communityType',
  CommunityUrl = 'communityUrl',
  Cover = 'cover',
  CreatedAt = 'createdAt',
  CreatorId = 'creatorId',
  Description = 'description',
  Ecosystem = 'ecosystem',
  Id = 'id',
  Intro = 'intro',
  LatestDes = 'latestDes',
  Name = 'name',
  Progress = 'progress',
  QrImage = 'qrImage',
  Reward = 'reward',
  Status = 'status',
  UpdatedAt = 'updatedAt'
}

/** colearning status */
export enum CoLearningStatus {
  Draft = 'DRAFT',
  OnGoing = 'ON_GOING',
  Past = 'PAST',
  Publish = 'PUBLISH',
  UpComing = 'UP_COMING'
}

export type CoLearningSumAggregate = {
  __typename?: 'CoLearningSumAggregate';
  reward?: Maybe<Scalars['Decimal']['output']>;
  status?: Maybe<Scalars['Int']['output']>;
};

export type CoLearningTimeline = {
  __typename?: 'CoLearningTimeline';
  coLearning?: Maybe<CoLearning>;
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  endTime?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['String']['output'];
  startTime?: Maybe<Scalars['DateTime']['output']>;
  timezone?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type CoLearningTimelineCountAggregate = {
  __typename?: 'CoLearningTimelineCountAggregate';
  _all: Scalars['Int']['output'];
  coLearningId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  endTime: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  startTime: Scalars['Int']['output'];
  timezone: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CoLearningTimelineCreateInput = {
  coLearning?: InputMaybe<CoLearningCreateNestedOneWithoutTimelineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  timezone?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningTimelineCreateNestedOneWithoutCoLearningInput = {
  connect?: InputMaybe<CoLearningTimelineWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CoLearningTimelineCreateOrConnectWithoutCoLearningInput>;
  create?: InputMaybe<CoLearningTimelineCreateWithoutCoLearningInput>;
};

export type CoLearningTimelineCreateOrConnectWithoutCoLearningInput = {
  create: CoLearningTimelineCreateWithoutCoLearningInput;
  where: CoLearningTimelineWhereUniqueInput;
};

export type CoLearningTimelineCreateWithoutCoLearningInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  timezone?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CoLearningTimelineMaxAggregate = {
  __typename?: 'CoLearningTimelineMaxAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  timezone?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CoLearningTimelineMinAggregate = {
  __typename?: 'CoLearningTimelineMinAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  timezone?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CoLearningTimelineNullableRelationFilter = {
  is?: InputMaybe<CoLearningTimelineWhereInput>;
  isNot?: InputMaybe<CoLearningTimelineWhereInput>;
};

export type CoLearningTimelineOrderByWithRelationInput = {
  coLearning?: InputMaybe<CoLearningOrderByWithRelationInput>;
  coLearningId?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  endTime?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrderInput>;
  timezone?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CoLearningTimelineUpdateInput = {
  coLearning?: InputMaybe<CoLearningUpdateOneWithoutTimelineNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  endTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  startTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  timezone?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CoLearningTimelineUpdateOneWithoutCoLearningNestedInput = {
  connect?: InputMaybe<CoLearningTimelineWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CoLearningTimelineCreateOrConnectWithoutCoLearningInput>;
  create?: InputMaybe<CoLearningTimelineCreateWithoutCoLearningInput>;
  delete?: InputMaybe<CoLearningTimelineWhereInput>;
  disconnect?: InputMaybe<CoLearningTimelineWhereInput>;
  update?: InputMaybe<CoLearningTimelineUpdateToOneWithWhereWithoutCoLearningInput>;
  upsert?: InputMaybe<CoLearningTimelineUpsertWithoutCoLearningInput>;
};

export type CoLearningTimelineUpdateToOneWithWhereWithoutCoLearningInput = {
  data: CoLearningTimelineUpdateWithoutCoLearningInput;
  where?: InputMaybe<CoLearningTimelineWhereInput>;
};

export type CoLearningTimelineUpdateWithoutCoLearningInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  endTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  startTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  timezone?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CoLearningTimelineUpsertWithoutCoLearningInput = {
  create: CoLearningTimelineCreateWithoutCoLearningInput;
  update: CoLearningTimelineUpdateWithoutCoLearningInput;
  where?: InputMaybe<CoLearningTimelineWhereInput>;
};

export type CoLearningTimelineWhereInput = {
  AND?: InputMaybe<Array<CoLearningTimelineWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningTimelineWhereInput>>;
  OR?: InputMaybe<Array<CoLearningTimelineWhereInput>>;
  coLearning?: InputMaybe<CoLearningNullableRelationFilter>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  startTime?: InputMaybe<DateTimeNullableFilter>;
  timezone?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CoLearningTimelineWhereUniqueInput = {
  AND?: InputMaybe<Array<CoLearningTimelineWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningTimelineWhereInput>>;
  OR?: InputMaybe<Array<CoLearningTimelineWhereInput>>;
  coLearning?: InputMaybe<CoLearningNullableRelationFilter>;
  coLearningId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<DateTimeFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  startTime?: InputMaybe<DateTimeNullableFilter>;
  timezone?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CoLearningTodo = {
  __typename?: 'CoLearningTodo';
  coLearning?: Maybe<CoLearning>;
  coLearningId?: Maybe<Scalars['String']['output']>;
  completed: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  metadata: Scalars['JSON']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
};

export type CoLearningTodoAvgAggregate = {
  __typename?: 'CoLearningTodoAvgAggregate';
  order?: Maybe<Scalars['Float']['output']>;
  type?: Maybe<Scalars['Float']['output']>;
};

export type CoLearningTodoCountAggregate = {
  __typename?: 'CoLearningTodoCountAggregate';
  _all: Scalars['Int']['output'];
  coLearningId: Scalars['Int']['output'];
  completed: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  metadata: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  url: Scalars['Int']['output'];
};

export type CoLearningTodoCreateInput = {
  coLearning?: InputMaybe<CoLearningCreateNestedOneWithoutTodosInput>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  type?: InputMaybe<CoLearningTodoType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type CoLearningTodoCreateManyCoLearningInput = {
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  type?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type CoLearningTodoCreateManyCoLearningInputEnvelope = {
  data: Array<CoLearningTodoCreateManyCoLearningInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CoLearningTodoCreateNestedManyWithoutCoLearningInput = {
  connect?: InputMaybe<Array<CoLearningTodoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CoLearningTodoCreateOrConnectWithoutCoLearningInput>>;
  create?: InputMaybe<Array<CoLearningTodoCreateWithoutCoLearningInput>>;
  createMany?: InputMaybe<CoLearningTodoCreateManyCoLearningInputEnvelope>;
};

export type CoLearningTodoCreateOrConnectWithoutCoLearningInput = {
  create: CoLearningTodoCreateWithoutCoLearningInput;
  where: CoLearningTodoWhereUniqueInput;
};

export type CoLearningTodoCreateWithoutCoLearningInput = {
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  type?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type CoLearningTodoListPaginated = {
  __typename?: 'CoLearningTodoListPaginated';
  data?: Maybe<Array<CoLearningTodo>>;
  total: Scalars['Int']['output'];
};

export type CoLearningTodoListRelationFilter = {
  every?: InputMaybe<CoLearningTodoWhereInput>;
  none?: InputMaybe<CoLearningTodoWhereInput>;
  some?: InputMaybe<CoLearningTodoWhereInput>;
};

export type CoLearningTodoMaxAggregate = {
  __typename?: 'CoLearningTodoMaxAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type CoLearningTodoMinAggregate = {
  __typename?: 'CoLearningTodoMinAggregate';
  coLearningId?: Maybe<Scalars['String']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type CoLearningTodoOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CoLearningTodoOrderByWithRelationInput = {
  coLearning?: InputMaybe<CoLearningOrderByWithRelationInput>;
  coLearningId?: InputMaybe<SortOrderInput>;
  completed?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  metadata?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrderInput>;
};

export enum CoLearningTodoScalarFieldEnum {
  CoLearningId = 'coLearningId',
  Completed = 'completed',
  CreatedAt = 'createdAt',
  Id = 'id',
  Metadata = 'metadata',
  Name = 'name',
  Order = 'order',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  Url = 'url'
}

export type CoLearningTodoScalarWhereInput = {
  AND?: InputMaybe<Array<CoLearningTodoScalarWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningTodoScalarWhereInput>>;
  OR?: InputMaybe<Array<CoLearningTodoScalarWhereInput>>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  metadata?: InputMaybe<JsonFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  type?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type CoLearningTodoSumAggregate = {
  __typename?: 'CoLearningTodoSumAggregate';
  order?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['Int']['output']>;
};

/** colearning todo type */
export enum CoLearningTodoType {
  CoLearning = 'CO_LEARNING',
  Custome = 'CUSTOME'
}

export type CoLearningTodoUpdateManyMutationInput = {
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CoLearningTodoUpdateManyWithWhereWithoutCoLearningInput = {
  data: CoLearningTodoUpdateManyMutationInput;
  where: CoLearningTodoScalarWhereInput;
};

export type CoLearningTodoUpdateManyWithoutCoLearningNestedInput = {
  connect?: InputMaybe<Array<CoLearningTodoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CoLearningTodoCreateOrConnectWithoutCoLearningInput>>;
  create?: InputMaybe<Array<CoLearningTodoCreateWithoutCoLearningInput>>;
  createMany?: InputMaybe<CoLearningTodoCreateManyCoLearningInputEnvelope>;
  delete?: InputMaybe<Array<CoLearningTodoWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CoLearningTodoScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CoLearningTodoWhereUniqueInput>>;
  set?: InputMaybe<Array<CoLearningTodoWhereUniqueInput>>;
  update?: InputMaybe<Array<CoLearningTodoUpdateWithWhereUniqueWithoutCoLearningInput>>;
  updateMany?: InputMaybe<Array<CoLearningTodoUpdateManyWithWhereWithoutCoLearningInput>>;
  upsert?: InputMaybe<Array<CoLearningTodoUpsertWithWhereUniqueWithoutCoLearningInput>>;
};

export type CoLearningTodoUpdateWithWhereUniqueWithoutCoLearningInput = {
  data: CoLearningTodoUpdateWithoutCoLearningInput;
  where: CoLearningTodoWhereUniqueInput;
};

export type CoLearningTodoUpdateWithoutCoLearningInput = {
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CoLearningTodoUpsertWithWhereUniqueWithoutCoLearningInput = {
  create: CoLearningTodoCreateWithoutCoLearningInput;
  update: CoLearningTodoUpdateWithoutCoLearningInput;
  where: CoLearningTodoWhereUniqueInput;
};

export type CoLearningTodoWhereInput = {
  AND?: InputMaybe<Array<CoLearningTodoWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningTodoWhereInput>>;
  OR?: InputMaybe<Array<CoLearningTodoWhereInput>>;
  coLearning?: InputMaybe<CoLearningNullableRelationFilter>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  metadata?: InputMaybe<JsonFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  type?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type CoLearningTodoWhereUniqueInput = {
  AND?: InputMaybe<Array<CoLearningTodoWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningTodoWhereInput>>;
  OR?: InputMaybe<Array<CoLearningTodoWhereInput>>;
  coLearning?: InputMaybe<CoLearningNullableRelationFilter>;
  coLearningId?: InputMaybe<UuidNullableFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<JsonFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  type?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type CoLearningUpdateCommunityInput = {
  set?: InputMaybe<ComunityType>;
};

export type CoLearningUpdateEcosystemInput = {
  push?: InputMaybe<Array<EcosystemValue>>;
  set?: InputMaybe<Array<EcosystemValue>>;
};

export type CoLearningUpdateInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  communityType?: InputMaybe<CoLearningUpdateCommunityInput>;
  communityUrl?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  cover?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  ecosystem?: InputMaybe<CoLearningUpdateEcosystemInput>;
  events?: InputMaybe<CoLearningEventUpdateManyWithoutCoLearningNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  latestDes?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<CoLearningUpdateprogressInput>;
  qrImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  reward?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<IntFieldUpdateOperationsInput>;
  timeline?: InputMaybe<CoLearningTimelineUpdateOneWithoutCoLearningNestedInput>;
  todos?: InputMaybe<CoLearningTodoUpdateManyWithoutCoLearningNestedInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CoLearningUpdateOneWithoutTimelineNestedInput = {
  connect?: InputMaybe<CoLearningWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CoLearningCreateOrConnectWithoutTimelineInput>;
  create?: InputMaybe<CoLearningCreateWithoutTimelineInput>;
  delete?: InputMaybe<CoLearningWhereInput>;
  disconnect?: InputMaybe<CoLearningWhereInput>;
  update?: InputMaybe<CoLearningUpdateToOneWithWhereWithoutTimelineInput>;
  upsert?: InputMaybe<CoLearningUpsertWithoutTimelineInput>;
};

export type CoLearningUpdateToOneWithWhereWithoutTimelineInput = {
  data: CoLearningUpdateWithoutTimelineInput;
  where?: InputMaybe<CoLearningWhereInput>;
};

export type CoLearningUpdateWithoutTimelineInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  communityType?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  communityUrl?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  cover?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  ecosystem?: InputMaybe<CoLearningUpdateecosystemInput>;
  events?: InputMaybe<CoLearningEventUpdateManyWithoutCoLearningNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  latestDes?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<CoLearningUpdateprogressInput>;
  qrImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  reward?: InputMaybe<NullableDecimalFieldUpdateOperationsInput>;
  status?: InputMaybe<IntFieldUpdateOperationsInput>;
  todos?: InputMaybe<CoLearningTodoUpdateManyWithoutCoLearningNestedInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CoLearningUpdateecosystemInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CoLearningUpdateprogressInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CoLearningUpsertWithoutTimelineInput = {
  create: CoLearningCreateWithoutTimelineInput;
  update: CoLearningUpdateWithoutTimelineInput;
  where?: InputMaybe<CoLearningWhereInput>;
};

export type CoLearningWhereInput = {
  AND?: InputMaybe<Array<CoLearningWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningWhereInput>>;
  OR?: InputMaybe<Array<CoLearningWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  application?: InputMaybe<JsonFilter>;
  communityType?: InputMaybe<StringNullableFilter>;
  communityUrl?: InputMaybe<StringNullableFilter>;
  cover?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringNullableFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  events?: InputMaybe<CoLearningEventListRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  latestDes?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<StringNullableListFilter>;
  qrImage?: InputMaybe<StringNullableFilter>;
  reward?: InputMaybe<DecimalNullableFilter>;
  status?: InputMaybe<IntFilter>;
  timeline?: InputMaybe<CoLearningTimelineNullableRelationFilter>;
  todos?: InputMaybe<CoLearningTodoListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CoLearningWhereUniqueInput = {
  AND?: InputMaybe<Array<CoLearningWhereInput>>;
  NOT?: InputMaybe<Array<CoLearningWhereInput>>;
  OR?: InputMaybe<Array<CoLearningWhereInput>>;
  alias?: InputMaybe<Scalars['String']['input']>;
  application?: InputMaybe<JsonFilter>;
  communityType?: InputMaybe<StringNullableFilter>;
  communityUrl?: InputMaybe<StringNullableFilter>;
  cover?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringNullableFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  events?: InputMaybe<CoLearningEventListRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<StringNullableFilter>;
  latestDes?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<StringNullableListFilter>;
  qrImage?: InputMaybe<StringNullableFilter>;
  reward?: InputMaybe<DecimalNullableFilter>;
  status?: InputMaybe<IntFilter>;
  timeline?: InputMaybe<CoLearningTimelineNullableRelationFilter>;
  todos?: InputMaybe<CoLearningTodoListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

/** Comunity type */
export enum ComunityType {
  Discord = 'DISCORD',
  Telegram = 'TELEGRAM',
  Wechat = 'WECHAT'
}

export type Course = {
  __typename?: 'Course';
  _count: CourseCount;
  alias?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration: Scalars['Int']['output'];
  ecosystem?: Maybe<Array<Scalars['String']['output']>>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intendedLearners?: Maybe<Scalars['JSON']['output']>;
  knowledgeGain?: Maybe<Scalars['JSON']['output']>;
  lang: Scalars['String']['output'];
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  optional: Scalars['JSON']['output'];
  pages?: Maybe<Array<Page>>;
  peopleJoined: Scalars['Int']['output'];
  status: Scalars['String']['output'];
  subTitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type: CourseType;
  units?: Maybe<Array<Unit>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type CourseAvgAggregate = {
  __typename?: 'CourseAvgAggregate';
  duration?: Maybe<Scalars['Float']['output']>;
  peopleJoined?: Maybe<Scalars['Float']['output']>;
};

export type CourseCount = {
  __typename?: 'CourseCount';
  pages: Scalars['Int']['output'];
  units: Scalars['Int']['output'];
};

export type CourseCountAggregate = {
  __typename?: 'CourseCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  documentationId: Scalars['Int']['output'];
  duration: Scalars['Int']['output'];
  ecosystem: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  intendedLearners: Scalars['Int']['output'];
  knowledgeGain: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  language: Scalars['Int']['output'];
  level: Scalars['Int']['output'];
  optional: Scalars['Int']['output'];
  peopleJoined: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  subTitle: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CourseEcosystem = {
  __typename?: 'CourseEcosystem';
  courseId: Scalars['String']['output'];
  ecosystemId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
};

export type CourseEcosystemAvgAggregate = {
  __typename?: 'CourseEcosystemAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type CourseEcosystemAvgAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseEcosystemAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CourseEcosystemCountAggregate = {
  __typename?: 'CourseEcosystemCountAggregate';
  _all: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
};

export type CourseEcosystemCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  courseId?: InputMaybe<Scalars['Boolean']['input']>;
  ecosystemId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseEcosystemCountOrderByAggregateInput = {
  courseId?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type CourseEcosystemCreateInput = {
  courseId: Scalars['String']['input'];
  ecosystemId: Scalars['String']['input'];
};

export type CourseEcosystemCreateManyInput = {
  courseId: Scalars['String']['input'];
  ecosystemId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type CourseEcosystemGroupBy = {
  __typename?: 'CourseEcosystemGroupBy';
  _avg?: Maybe<CourseEcosystemAvgAggregate>;
  _count?: Maybe<CourseEcosystemCountAggregate>;
  _max?: Maybe<CourseEcosystemMaxAggregate>;
  _min?: Maybe<CourseEcosystemMinAggregate>;
  _sum?: Maybe<CourseEcosystemSumAggregate>;
  courseId: Scalars['String']['output'];
  ecosystemId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
};

export type CourseEcosystemListPaginated = {
  __typename?: 'CourseEcosystemListPaginated';
  data?: Maybe<Array<CourseEcosystem>>;
  total: Scalars['Int']['output'];
};

export type CourseEcosystemMaxAggregate = {
  __typename?: 'CourseEcosystemMaxAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type CourseEcosystemMaxAggregateInput = {
  courseId?: InputMaybe<Scalars['Boolean']['input']>;
  ecosystemId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseEcosystemMaxOrderByAggregateInput = {
  courseId?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type CourseEcosystemMinAggregate = {
  __typename?: 'CourseEcosystemMinAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type CourseEcosystemMinAggregateInput = {
  courseId?: InputMaybe<Scalars['Boolean']['input']>;
  ecosystemId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseEcosystemMinOrderByAggregateInput = {
  courseId?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type CourseEcosystemOrderByWithAggregationInput = {
  _avg?: InputMaybe<CourseEcosystemAvgOrderByAggregateInput>;
  _count?: InputMaybe<CourseEcosystemCountOrderByAggregateInput>;
  _max?: InputMaybe<CourseEcosystemMaxOrderByAggregateInput>;
  _min?: InputMaybe<CourseEcosystemMinOrderByAggregateInput>;
  _sum?: InputMaybe<CourseEcosystemSumOrderByAggregateInput>;
  courseId?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type CourseEcosystemOrderByWithRelationInput = {
  courseId?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export enum CourseEcosystemScalarFieldEnum {
  CourseId = 'courseId',
  EcosystemId = 'ecosystemId',
  Id = 'id'
}

export type CourseEcosystemScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CourseEcosystemScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CourseEcosystemScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CourseEcosystemScalarWhereWithAggregatesInput>>;
  courseId?: InputMaybe<UuidWithAggregatesFilter>;
  ecosystemId?: InputMaybe<UuidWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
};

export type CourseEcosystemSumAggregate = {
  __typename?: 'CourseEcosystemSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type CourseEcosystemSumAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseEcosystemSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CourseEcosystemUpdateInput = {
  courseId?: InputMaybe<StringFieldUpdateOperationsInput>;
  ecosystemId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CourseEcosystemUpdateManyMutationInput = {
  courseId?: InputMaybe<StringFieldUpdateOperationsInput>;
  ecosystemId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CourseEcosystemWhereInput = {
  AND?: InputMaybe<Array<CourseEcosystemWhereInput>>;
  NOT?: InputMaybe<Array<CourseEcosystemWhereInput>>;
  OR?: InputMaybe<Array<CourseEcosystemWhereInput>>;
  courseId?: InputMaybe<UuidFilter>;
  ecosystemId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
};

export type CourseEcosystemWhereUniqueInput = {
  AND?: InputMaybe<Array<CourseEcosystemWhereInput>>;
  NOT?: InputMaybe<Array<CourseEcosystemWhereInput>>;
  OR?: InputMaybe<Array<CourseEcosystemWhereInput>>;
  courseId?: InputMaybe<UuidFilter>;
  ecosystemId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type CourseExtend = {
  __typename?: 'CourseExtend';
  _count: CourseV2Count;
  alias?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  /** 当前课程的阅读位置 */
  currentPageId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration: Scalars['Int']['output'];
  ecosystem?: Maybe<Array<Scalars['String']['output']>>;
  ecosystemInfoList?: Maybe<Array<EcosystemExtend>>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intendedLearners?: Maybe<Scalars['JSON']['output']>;
  knowledgeGain?: Maybe<Scalars['JSON']['output']>;
  lang: Scalars['String']['output'];
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  /** 下一页的id */
  nextPageId?: Maybe<Scalars['String']['output']>;
  optional: Scalars['JSON']['output'];
  peopleJoined: Scalars['Int']['output'];
  progress?: Maybe<Scalars['Float']['output']>;
  status: Scalars['String']['output'];
  subTitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type: CourseType;
  units?: Maybe<Array<UnitExtend>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type CourseLearningTrack = {
  __typename?: 'CourseLearningTrack';
  courseId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  learningTrackId: Scalars['String']['output'];
};

export type CourseLearningTrackAvgAggregate = {
  __typename?: 'CourseLearningTrackAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type CourseLearningTrackAvgAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseLearningTrackAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CourseLearningTrackCountAggregate = {
  __typename?: 'CourseLearningTrackCountAggregate';
  _all: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  learningTrackId: Scalars['Int']['output'];
};

export type CourseLearningTrackCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  courseId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  learningTrackId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseLearningTrackCountOrderByAggregateInput = {
  courseId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  learningTrackId?: InputMaybe<SortOrder>;
};

export type CourseLearningTrackCreateInput = {
  courseId: Scalars['String']['input'];
  learningTrackId: Scalars['String']['input'];
};

export type CourseLearningTrackCreateManyInput = {
  courseId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  learningTrackId: Scalars['String']['input'];
};

export type CourseLearningTrackGroupBy = {
  __typename?: 'CourseLearningTrackGroupBy';
  _avg?: Maybe<CourseLearningTrackAvgAggregate>;
  _count?: Maybe<CourseLearningTrackCountAggregate>;
  _max?: Maybe<CourseLearningTrackMaxAggregate>;
  _min?: Maybe<CourseLearningTrackMinAggregate>;
  _sum?: Maybe<CourseLearningTrackSumAggregate>;
  courseId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  learningTrackId: Scalars['String']['output'];
};

export type CourseLearningTrackListPaginated = {
  __typename?: 'CourseLearningTrackListPaginated';
  data?: Maybe<Array<CourseLearningTrack>>;
  total: Scalars['Int']['output'];
};

export type CourseLearningTrackMaxAggregate = {
  __typename?: 'CourseLearningTrackMaxAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  learningTrackId?: Maybe<Scalars['String']['output']>;
};

export type CourseLearningTrackMaxAggregateInput = {
  courseId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  learningTrackId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseLearningTrackMaxOrderByAggregateInput = {
  courseId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  learningTrackId?: InputMaybe<SortOrder>;
};

export type CourseLearningTrackMinAggregate = {
  __typename?: 'CourseLearningTrackMinAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  learningTrackId?: Maybe<Scalars['String']['output']>;
};

export type CourseLearningTrackMinAggregateInput = {
  courseId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  learningTrackId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseLearningTrackMinOrderByAggregateInput = {
  courseId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  learningTrackId?: InputMaybe<SortOrder>;
};

export type CourseLearningTrackOrderByWithAggregationInput = {
  _avg?: InputMaybe<CourseLearningTrackAvgOrderByAggregateInput>;
  _count?: InputMaybe<CourseLearningTrackCountOrderByAggregateInput>;
  _max?: InputMaybe<CourseLearningTrackMaxOrderByAggregateInput>;
  _min?: InputMaybe<CourseLearningTrackMinOrderByAggregateInput>;
  _sum?: InputMaybe<CourseLearningTrackSumOrderByAggregateInput>;
  courseId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  learningTrackId?: InputMaybe<SortOrder>;
};

export type CourseLearningTrackOrderByWithRelationInput = {
  courseId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  learningTrackId?: InputMaybe<SortOrder>;
};

export enum CourseLearningTrackScalarFieldEnum {
  CourseId = 'courseId',
  Id = 'id',
  LearningTrackId = 'learningTrackId'
}

export type CourseLearningTrackScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CourseLearningTrackScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CourseLearningTrackScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CourseLearningTrackScalarWhereWithAggregatesInput>>;
  courseId?: InputMaybe<UuidWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  learningTrackId?: InputMaybe<UuidWithAggregatesFilter>;
};

export type CourseLearningTrackSumAggregate = {
  __typename?: 'CourseLearningTrackSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type CourseLearningTrackSumAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseLearningTrackSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CourseLearningTrackUpdateInput = {
  courseId?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTrackId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CourseLearningTrackUpdateManyMutationInput = {
  courseId?: InputMaybe<StringFieldUpdateOperationsInput>;
  learningTrackId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CourseLearningTrackWhereInput = {
  AND?: InputMaybe<Array<CourseLearningTrackWhereInput>>;
  NOT?: InputMaybe<Array<CourseLearningTrackWhereInput>>;
  OR?: InputMaybe<Array<CourseLearningTrackWhereInput>>;
  courseId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  learningTrackId?: InputMaybe<UuidFilter>;
};

export type CourseLearningTrackWhereUniqueInput = {
  AND?: InputMaybe<Array<CourseLearningTrackWhereInput>>;
  NOT?: InputMaybe<Array<CourseLearningTrackWhereInput>>;
  OR?: InputMaybe<Array<CourseLearningTrackWhereInput>>;
  courseId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  learningTrackId?: InputMaybe<UuidFilter>;
};

export enum CourseLevel {
  Advanced = 'ADVANCED',
  Beginner = 'BEGINNER',
  Intermediate = 'INTERMEDIATE'
}

export type CourseListPaginated = {
  __typename?: 'CourseListPaginated';
  data?: Maybe<Array<CourseV2>>;
  total: Scalars['Int']['output'];
};

export type CourseMaxAggregate = {
  __typename?: 'CourseMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  peopleJoined?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  subTitle?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CourseType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CourseMinAggregate = {
  __typename?: 'CourseMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  peopleJoined?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  subTitle?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CourseType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CourseSumAggregate = {
  __typename?: 'CourseSumAggregate';
  duration?: Maybe<Scalars['Int']['output']>;
  peopleJoined?: Maybe<Scalars['Int']['output']>;
};

export enum CourseType {
  Concept = 'CONCEPT',
  GuidedProject = 'GUIDED_PROJECT',
  Mini = 'MINI',
  Syntax = 'SYNTAX',
  Ugc = 'UGC'
}

export type CourseUnit = {
  __typename?: 'CourseUnit';
  course: CourseV2;
  courseId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  unit: UnitV2;
  unitId: Scalars['String']['output'];
};

export type CourseUnitCountAggregate = {
  __typename?: 'CourseUnitCountAggregate';
  _all: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  unitId: Scalars['Int']['output'];
};

export type CourseUnitCourseIdUnitIdCompoundUniqueInput = {
  courseId: Scalars['String']['input'];
  unitId: Scalars['String']['input'];
};

export type CourseUnitCreateManyUnitInput = {
  courseId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
};

export type CourseUnitCreateManyUnitInputEnvelope = {
  data: Array<CourseUnitCreateManyUnitInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CourseUnitCreateNestedManyWithoutUnitInput = {
  connect?: InputMaybe<Array<CourseUnitWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CourseUnitCreateOrConnectWithoutUnitInput>>;
  create?: InputMaybe<Array<CourseUnitCreateWithoutUnitInput>>;
  createMany?: InputMaybe<CourseUnitCreateManyUnitInputEnvelope>;
};

export type CourseUnitCreateOrConnectWithoutUnitInput = {
  create: CourseUnitCreateWithoutUnitInput;
  where: CourseUnitWhereUniqueInput;
};

export type CourseUnitCreateWithoutUnitInput = {
  course: CourseV2CreateNestedOneWithoutCourseUnitsInput;
  id?: InputMaybe<Scalars['String']['input']>;
};

export type CourseUnitListRelationFilter = {
  every?: InputMaybe<CourseUnitWhereInput>;
  none?: InputMaybe<CourseUnitWhereInput>;
  some?: InputMaybe<CourseUnitWhereInput>;
};

export type CourseUnitMaxAggregate = {
  __typename?: 'CourseUnitMaxAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  unitId?: Maybe<Scalars['String']['output']>;
};

export type CourseUnitMinAggregate = {
  __typename?: 'CourseUnitMinAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  unitId?: Maybe<Scalars['String']['output']>;
};

export type CourseUnitOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CourseUnitScalarWhereInput = {
  AND?: InputMaybe<Array<CourseUnitScalarWhereInput>>;
  NOT?: InputMaybe<Array<CourseUnitScalarWhereInput>>;
  OR?: InputMaybe<Array<CourseUnitScalarWhereInput>>;
  courseId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<UuidFilter>;
  unitId?: InputMaybe<UuidFilter>;
};

export type CourseUnitUpdateManyMutationInput = {
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CourseUnitUpdateManyWithWhereWithoutUnitInput = {
  data: CourseUnitUpdateManyMutationInput;
  where: CourseUnitScalarWhereInput;
};

export type CourseUnitUpdateManyWithoutUnitNestedInput = {
  connect?: InputMaybe<Array<CourseUnitWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CourseUnitCreateOrConnectWithoutUnitInput>>;
  create?: InputMaybe<Array<CourseUnitCreateWithoutUnitInput>>;
  createMany?: InputMaybe<CourseUnitCreateManyUnitInputEnvelope>;
  delete?: InputMaybe<Array<CourseUnitWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CourseUnitScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CourseUnitWhereUniqueInput>>;
  set?: InputMaybe<Array<CourseUnitWhereUniqueInput>>;
  update?: InputMaybe<Array<CourseUnitUpdateWithWhereUniqueWithoutUnitInput>>;
  updateMany?: InputMaybe<Array<CourseUnitUpdateManyWithWhereWithoutUnitInput>>;
  upsert?: InputMaybe<Array<CourseUnitUpsertWithWhereUniqueWithoutUnitInput>>;
};

export type CourseUnitUpdateWithWhereUniqueWithoutUnitInput = {
  data: CourseUnitUpdateWithoutUnitInput;
  where: CourseUnitWhereUniqueInput;
};

export type CourseUnitUpdateWithoutUnitInput = {
  course?: InputMaybe<CourseV2UpdateOneRequiredWithoutCourseUnitsNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CourseUnitUpsertWithWhereUniqueWithoutUnitInput = {
  create: CourseUnitCreateWithoutUnitInput;
  update: CourseUnitUpdateWithoutUnitInput;
  where: CourseUnitWhereUniqueInput;
};

export type CourseUnitWhereInput = {
  AND?: InputMaybe<Array<CourseUnitWhereInput>>;
  NOT?: InputMaybe<Array<CourseUnitWhereInput>>;
  OR?: InputMaybe<Array<CourseUnitWhereInput>>;
  course?: InputMaybe<CourseV2RelationFilter>;
  courseId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<UuidFilter>;
  unit?: InputMaybe<UnitV2RelationFilter>;
  unitId?: InputMaybe<UuidFilter>;
};

export type CourseUnitWhereUniqueInput = {
  AND?: InputMaybe<Array<CourseUnitWhereInput>>;
  NOT?: InputMaybe<Array<CourseUnitWhereInput>>;
  OR?: InputMaybe<Array<CourseUnitWhereInput>>;
  course?: InputMaybe<CourseV2RelationFilter>;
  courseId?: InputMaybe<UuidFilter>;
  courseId_unitId?: InputMaybe<CourseUnitCourseIdUnitIdCompoundUniqueInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  unit?: InputMaybe<UnitV2RelationFilter>;
  unitId?: InputMaybe<UuidFilter>;
};

export type CourseV2 = {
  __typename?: 'CourseV2';
  _count: CourseV2Count;
  alias?: Maybe<Scalars['String']['output']>;
  courseUnits?: Maybe<Array<CourseUnit>>;
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration: Scalars['Int']['output'];
  ecosystem?: Maybe<Array<Scalars['String']['output']>>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intendedLearners?: Maybe<Scalars['JSON']['output']>;
  knowledgeGain?: Maybe<Scalars['JSON']['output']>;
  lang: Scalars['String']['output'];
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  optional: Scalars['JSON']['output'];
  peopleJoined: Scalars['Int']['output'];
  status: Scalars['String']['output'];
  subTitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type: CourseType;
  updatedAt: Scalars['DateTime']['output'];
};

export type CourseV2AvgAggregate = {
  __typename?: 'CourseV2AvgAggregate';
  duration?: Maybe<Scalars['Float']['output']>;
  peopleJoined?: Maybe<Scalars['Float']['output']>;
};

export type CourseV2Count = {
  __typename?: 'CourseV2Count';
  courseUnits: Scalars['Int']['output'];
};

export type CourseV2CountAggregate = {
  __typename?: 'CourseV2CountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  documentationId: Scalars['Int']['output'];
  duration: Scalars['Int']['output'];
  ecosystem: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  intendedLearners: Scalars['Int']['output'];
  knowledgeGain: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  language: Scalars['Int']['output'];
  level: Scalars['Int']['output'];
  optional: Scalars['Int']['output'];
  peopleJoined: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  subTitle: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CourseV2CreateNestedOneWithoutCourseUnitsInput = {
  connect?: InputMaybe<CourseV2WhereUniqueInput>;
  connectOrCreate?: InputMaybe<CourseV2CreateOrConnectWithoutCourseUnitsInput>;
  create?: InputMaybe<CourseV2CreateWithoutCourseUnitsInput>;
};

export type CourseV2CreateOrConnectWithoutCourseUnitsInput = {
  create: CourseV2CreateWithoutCourseUnitsInput;
  where: CourseV2WhereUniqueInput;
};

export type CourseV2CreateWithoutCourseUnitsInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  documentationId?: InputMaybe<Scalars['String']['input']>;
  duration: Scalars['Int']['input'];
  ecosystem?: InputMaybe<CourseV2CreateecosystemInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level?: InputMaybe<CourseLevel>;
  optional?: InputMaybe<Scalars['JSON']['input']>;
  peopleJoined?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  subTitle?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  type: CourseType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type CourseV2CreateecosystemInput = {
  set: Array<Scalars['String']['input']>;
};

export type CourseV2MaxAggregate = {
  __typename?: 'CourseV2MaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  peopleJoined?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  subTitle?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CourseType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CourseV2MinAggregate = {
  __typename?: 'CourseV2MinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  peopleJoined?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  subTitle?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CourseType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type CourseV2OrderByWithRelationInput = {
  alias?: InputMaybe<SortOrderInput>;
  courseUnits?: InputMaybe<CourseUnitOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrderInput>;
  documentationId?: InputMaybe<SortOrderInput>;
  duration?: InputMaybe<SortOrder>;
  ecosystem?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrderInput>;
  intendedLearners?: InputMaybe<SortOrderInput>;
  knowledgeGain?: InputMaybe<SortOrderInput>;
  lang?: InputMaybe<SortOrder>;
  language?: InputMaybe<SortOrderInput>;
  level?: InputMaybe<SortOrderInput>;
  optional?: InputMaybe<SortOrder>;
  peopleJoined?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  subTitle?: InputMaybe<SortOrderInput>;
  title?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrderInput>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CourseV2RelationFilter = {
  is?: InputMaybe<CourseV2WhereInput>;
  isNot?: InputMaybe<CourseV2WhereInput>;
};

export enum CourseV2ScalarFieldEnum {
  Alias = 'alias',
  CreatedAt = 'createdAt',
  CreatorId = 'creatorId',
  Description = 'description',
  DocumentationId = 'documentationId',
  Duration = 'duration',
  Ecosystem = 'ecosystem',
  Id = 'id',
  Image = 'image',
  IntendedLearners = 'intendedLearners',
  KnowledgeGain = 'knowledgeGain',
  Lang = 'lang',
  Language = 'language',
  Level = 'level',
  Optional = 'optional',
  PeopleJoined = 'peopleJoined',
  Status = 'status',
  SubTitle = 'subTitle',
  Title = 'title',
  Track = 'track',
  Type = 'type',
  UpdatedAt = 'updatedAt'
}

export type CourseV2SumAggregate = {
  __typename?: 'CourseV2SumAggregate';
  duration?: Maybe<Scalars['Int']['output']>;
  peopleJoined?: Maybe<Scalars['Int']['output']>;
};

export type CourseV2UpdateOneRequiredWithoutCourseUnitsNestedInput = {
  connect?: InputMaybe<CourseV2WhereUniqueInput>;
  connectOrCreate?: InputMaybe<CourseV2CreateOrConnectWithoutCourseUnitsInput>;
  create?: InputMaybe<CourseV2CreateWithoutCourseUnitsInput>;
  update?: InputMaybe<CourseV2UpdateToOneWithWhereWithoutCourseUnitsInput>;
  upsert?: InputMaybe<CourseV2UpsertWithoutCourseUnitsInput>;
};

export type CourseV2UpdateToOneWithWhereWithoutCourseUnitsInput = {
  data: CourseV2UpdateWithoutCourseUnitsInput;
  where?: InputMaybe<CourseV2WhereInput>;
};

export type CourseV2UpdateWithoutCourseUnitsInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  documentationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  duration?: InputMaybe<IntFieldUpdateOperationsInput>;
  ecosystem?: InputMaybe<CourseV2UpdateecosystemInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  language?: InputMaybe<NullableEnumLanguageFieldUpdateOperationsInput>;
  level?: InputMaybe<NullableEnumCourseLevelFieldUpdateOperationsInput>;
  optional?: InputMaybe<Scalars['JSON']['input']>;
  peopleJoined?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  subTitle?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  track?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumCourseTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CourseV2UpdateecosystemInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CourseV2UpsertWithoutCourseUnitsInput = {
  create: CourseV2CreateWithoutCourseUnitsInput;
  update: CourseV2UpdateWithoutCourseUnitsInput;
  where?: InputMaybe<CourseV2WhereInput>;
};

export type CourseV2WhereInput = {
  AND?: InputMaybe<Array<CourseV2WhereInput>>;
  NOT?: InputMaybe<Array<CourseV2WhereInput>>;
  OR?: InputMaybe<Array<CourseV2WhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  courseUnits?: InputMaybe<CourseUnitListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringNullableFilter>;
  documentationId?: InputMaybe<UuidNullableFilter>;
  duration?: InputMaybe<IntFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringNullableFilter>;
  intendedLearners?: InputMaybe<JsonNullableFilter>;
  knowledgeGain?: InputMaybe<JsonNullableFilter>;
  lang?: InputMaybe<StringFilter>;
  language?: InputMaybe<EnumLanguageNullableFilter>;
  level?: InputMaybe<EnumCourseLevelNullableFilter>;
  optional?: InputMaybe<JsonFilter>;
  peopleJoined?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  subTitle?: InputMaybe<StringNullableFilter>;
  title?: InputMaybe<StringFilter>;
  track?: InputMaybe<StringNullableFilter>;
  type?: InputMaybe<EnumCourseTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CourseV2WhereUniqueInput = {
  AND?: InputMaybe<Array<CourseV2WhereInput>>;
  NOT?: InputMaybe<Array<CourseV2WhereInput>>;
  OR?: InputMaybe<Array<CourseV2WhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  courseUnits?: InputMaybe<CourseUnitListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringNullableFilter>;
  documentationId?: InputMaybe<UuidNullableFilter>;
  duration?: InputMaybe<IntFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<StringNullableFilter>;
  intendedLearners?: InputMaybe<JsonNullableFilter>;
  knowledgeGain?: InputMaybe<JsonNullableFilter>;
  lang?: InputMaybe<StringFilter>;
  language?: InputMaybe<EnumLanguageNullableFilter>;
  level?: InputMaybe<EnumCourseLevelNullableFilter>;
  optional?: InputMaybe<JsonFilter>;
  peopleJoined?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  subTitle?: InputMaybe<StringNullableFilter>;
  title?: InputMaybe<StringFilter>;
  track?: InputMaybe<StringNullableFilter>;
  type?: InputMaybe<EnumCourseTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CurrentPhase = {
  __typename?: 'CurrentPhase';
  id: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export type CustomKeyword = {
  __typename?: 'CustomKeyword';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['Int']['output'];
  keyword: Scalars['String']['output'];
  status: Scalars['String']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type CustomKeywordAvgAggregate = {
  __typename?: 'CustomKeywordAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type CustomKeywordAvgAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomKeywordAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CustomKeywordCountAggregate = {
  __typename?: 'CustomKeywordCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  keyword: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type CustomKeywordCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomKeywordCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  keyword?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type CustomKeywordCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  keyword: Scalars['String']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type CustomKeywordCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  keyword: Scalars['String']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type CustomKeywordGroupBy = {
  __typename?: 'CustomKeywordGroupBy';
  _avg?: Maybe<CustomKeywordAvgAggregate>;
  _count?: Maybe<CustomKeywordCountAggregate>;
  _max?: Maybe<CustomKeywordMaxAggregate>;
  _min?: Maybe<CustomKeywordMinAggregate>;
  _sum?: Maybe<CustomKeywordSumAggregate>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['Int']['output'];
  keyword: Scalars['String']['output'];
  status: Scalars['String']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type CustomKeywordListPaginated = {
  __typename?: 'CustomKeywordListPaginated';
  data?: Maybe<Array<CustomKeyword>>;
  total: Scalars['Int']['output'];
};

export type CustomKeywordMaxAggregate = {
  __typename?: 'CustomKeywordMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  keyword?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type CustomKeywordMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomKeywordMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  keyword?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type CustomKeywordMinAggregate = {
  __typename?: 'CustomKeywordMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  keyword?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type CustomKeywordMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  keyword?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomKeywordMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  keyword?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type CustomKeywordOrderByWithAggregationInput = {
  _avg?: InputMaybe<CustomKeywordAvgOrderByAggregateInput>;
  _count?: InputMaybe<CustomKeywordCountOrderByAggregateInput>;
  _max?: InputMaybe<CustomKeywordMaxOrderByAggregateInput>;
  _min?: InputMaybe<CustomKeywordMinOrderByAggregateInput>;
  _sum?: InputMaybe<CustomKeywordSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  keyword?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type CustomKeywordOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  keyword?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export enum CustomKeywordScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Keyword = 'keyword',
  Status = 'status',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  UserId = 'userId'
}

export type CustomKeywordScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CustomKeywordScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CustomKeywordScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CustomKeywordScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  keyword?: InputMaybe<StringWithAggregatesFilter>;
  status?: InputMaybe<StringWithAggregatesFilter>;
  type?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
};

export type CustomKeywordSumAggregate = {
  __typename?: 'CustomKeywordSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type CustomKeywordSumAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomKeywordSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CustomKeywordUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  keyword?: InputMaybe<StringFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CustomKeywordUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  keyword?: InputMaybe<StringFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CustomKeywordWhereInput = {
  AND?: InputMaybe<Array<CustomKeywordWhereInput>>;
  NOT?: InputMaybe<Array<CustomKeywordWhereInput>>;
  OR?: InputMaybe<Array<CustomKeywordWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  keyword?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type CustomKeywordWhereUniqueInput = {
  AND?: InputMaybe<Array<CustomKeywordWhereInput>>;
  NOT?: InputMaybe<Array<CustomKeywordWhereInput>>;
  OR?: InputMaybe<Array<CustomKeywordWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  keyword?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type DailyChallenge = {
  __typename?: 'DailyChallenge';
  category?: Maybe<Scalars['String']['output']>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  lang?: Maybe<Scalars['String']['output']>;
  links: Scalars['JSON']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type DailyChallengeCountAggregate = {
  __typename?: 'DailyChallengeCountAggregate';
  _all: Scalars['Int']['output'];
  category: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  links: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type DailyChallengeCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  category?: InputMaybe<Scalars['Boolean']['input']>;
  content?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  lang?: InputMaybe<Scalars['Boolean']['input']>;
  links?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DailyChallengeCountOrderByAggregateInput = {
  category?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  links?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DailyChallengeCreateInput = {
  category?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  links: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DailyChallengeCreateManyInput = {
  category?: InputMaybe<Scalars['String']['input']>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  links: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DailyChallengeExtend = {
  __typename?: 'DailyChallengeExtend';
  category?: Maybe<Scalars['String']['output']>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  isCompleted?: Maybe<Scalars['Boolean']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  links: Scalars['JSON']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type DailyChallengeGroupBy = {
  __typename?: 'DailyChallengeGroupBy';
  _count?: Maybe<DailyChallengeCountAggregate>;
  _max?: Maybe<DailyChallengeMaxAggregate>;
  _min?: Maybe<DailyChallengeMinAggregate>;
  category?: Maybe<Scalars['String']['output']>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  lang?: Maybe<Scalars['String']['output']>;
  links: Scalars['JSON']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type DailyChallengeListPaginated = {
  __typename?: 'DailyChallengeListPaginated';
  data?: Maybe<Array<DailyChallenge>>;
  total: Scalars['Int']['output'];
};

export type DailyChallengeMaxAggregate = {
  __typename?: 'DailyChallengeMaxAggregate';
  category?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DailyChallengeMaxAggregateInput = {
  category?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  lang?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DailyChallengeMaxOrderByAggregateInput = {
  category?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DailyChallengeMinAggregate = {
  __typename?: 'DailyChallengeMinAggregate';
  category?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DailyChallengeMinAggregateInput = {
  category?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  lang?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DailyChallengeMinOrderByAggregateInput = {
  category?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DailyChallengeOrderByWithAggregationInput = {
  _count?: InputMaybe<DailyChallengeCountOrderByAggregateInput>;
  _max?: InputMaybe<DailyChallengeMaxOrderByAggregateInput>;
  _min?: InputMaybe<DailyChallengeMinOrderByAggregateInput>;
  category?: InputMaybe<SortOrderInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrderInput>;
  links?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrderInput>;
  type?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DailyChallengeOrderByWithRelationInput = {
  category?: InputMaybe<SortOrderInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrderInput>;
  links?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrderInput>;
  type?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum DailyChallengeScalarFieldEnum {
  Category = 'category',
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  Lang = 'lang',
  Links = 'links',
  Track = 'track',
  Type = 'type',
  UpdatedAt = 'updatedAt'
}

export type DailyChallengeScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<DailyChallengeScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<DailyChallengeScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<DailyChallengeScalarWhereWithAggregatesInput>>;
  category?: InputMaybe<StringNullableWithAggregatesFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  lang?: InputMaybe<StringNullableWithAggregatesFilter>;
  links?: InputMaybe<JsonWithAggregatesFilter>;
  track?: InputMaybe<StringNullableWithAggregatesFilter>;
  type?: InputMaybe<StringNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type DailyChallengeUpdateInput = {
  category?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  lang?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  links?: InputMaybe<Scalars['JSON']['input']>;
  track?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  type?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type DailyChallengeUpdateManyMutationInput = {
  category?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  lang?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  links?: InputMaybe<Scalars['JSON']['input']>;
  track?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  type?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type DailyChallengeWhereInput = {
  AND?: InputMaybe<Array<DailyChallengeWhereInput>>;
  NOT?: InputMaybe<Array<DailyChallengeWhereInput>>;
  OR?: InputMaybe<Array<DailyChallengeWhereInput>>;
  category?: InputMaybe<StringNullableFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  lang?: InputMaybe<StringNullableFilter>;
  links?: InputMaybe<JsonFilter>;
  track?: InputMaybe<StringNullableFilter>;
  type?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type DailyChallengeWhereUniqueInput = {
  AND?: InputMaybe<Array<DailyChallengeWhereInput>>;
  NOT?: InputMaybe<Array<DailyChallengeWhereInput>>;
  OR?: InputMaybe<Array<DailyChallengeWhereInput>>;
  category?: InputMaybe<StringNullableFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  lang?: InputMaybe<StringNullableFilter>;
  links?: InputMaybe<JsonFilter>;
  track?: InputMaybe<StringNullableFilter>;
  type?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type DateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type DateTimeNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedDateTimeNullableFilter>;
  _min?: InputMaybe<NestedDateTimeNullableFilter>;
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type DateTimeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedDateTimeFilter>;
  _min?: InputMaybe<NestedDateTimeFilter>;
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type DecimalFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Decimal']['input']>;
  divide?: InputMaybe<Scalars['Decimal']['input']>;
  increment?: InputMaybe<Scalars['Decimal']['input']>;
  multiply?: InputMaybe<Scalars['Decimal']['input']>;
  set?: InputMaybe<Scalars['Decimal']['input']>;
};

export type DecimalFilter = {
  equals?: InputMaybe<Scalars['Decimal']['input']>;
  gt?: InputMaybe<Scalars['Decimal']['input']>;
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  in?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  lt?: InputMaybe<Scalars['Decimal']['input']>;
  lte?: InputMaybe<Scalars['Decimal']['input']>;
  not?: InputMaybe<NestedDecimalFilter>;
  notIn?: InputMaybe<Array<Scalars['Decimal']['input']>>;
};

export type DecimalNullableFilter = {
  equals?: InputMaybe<Scalars['Decimal']['input']>;
  gt?: InputMaybe<Scalars['Decimal']['input']>;
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  in?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  lt?: InputMaybe<Scalars['Decimal']['input']>;
  lte?: InputMaybe<Scalars['Decimal']['input']>;
  not?: InputMaybe<NestedDecimalNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Decimal']['input']>>;
};

export type DecimalWithAggregatesFilter = {
  _avg?: InputMaybe<NestedDecimalFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedDecimalFilter>;
  _min?: InputMaybe<NestedDecimalFilter>;
  _sum?: InputMaybe<NestedDecimalFilter>;
  equals?: InputMaybe<Scalars['Decimal']['input']>;
  gt?: InputMaybe<Scalars['Decimal']['input']>;
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  in?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  lt?: InputMaybe<Scalars['Decimal']['input']>;
  lte?: InputMaybe<Scalars['Decimal']['input']>;
  not?: InputMaybe<NestedDecimalWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Decimal']['input']>>;
};

export type Docs = {
  __typename?: 'Docs';
  alias: Scalars['String']['output'];
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  parentId?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type DocsCountAggregate = {
  __typename?: 'DocsCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  parentId: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type DocsCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  content?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  parentId?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocsCountOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocsCreateInput = {
  alias: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  parentId?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocsCreateManyInput = {
  alias: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  parentId?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocsGroupBy = {
  __typename?: 'DocsGroupBy';
  _count?: Maybe<DocsCountAggregate>;
  _max?: Maybe<DocsMaxAggregate>;
  _min?: Maybe<DocsMinAggregate>;
  alias: Scalars['String']['output'];
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  parentId?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type DocsListPaginated = {
  __typename?: 'DocsListPaginated';
  data?: Maybe<Array<Docs>>;
  total: Scalars['Int']['output'];
};

export type DocsMaxAggregate = {
  __typename?: 'DocsMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  parentId?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DocsMaxAggregateInput = {
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  parentId?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocsMaxOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocsMinAggregate = {
  __typename?: 'DocsMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  parentId?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DocsMinAggregateInput = {
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  parentId?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocsMinOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocsOrderByWithAggregationInput = {
  _count?: InputMaybe<DocsCountOrderByAggregateInput>;
  _max?: InputMaybe<DocsMaxOrderByAggregateInput>;
  _min?: InputMaybe<DocsMinOrderByAggregateInput>;
  alias?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrderInput>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocsOrderByWithRelationInput = {
  alias?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrderInput>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum DocsScalarFieldEnum {
  Alias = 'alias',
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  ParentId = 'parentId',
  Title = 'title',
  UpdatedAt = 'updatedAt'
}

export type DocsScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<DocsScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<DocsScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<DocsScalarWhereWithAggregatesInput>>;
  alias?: InputMaybe<StringWithAggregatesFilter>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  parentId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type DocsUpdateInput = {
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  parentId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type DocsUpdateManyMutationInput = {
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  parentId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type DocsWhereInput = {
  AND?: InputMaybe<Array<DocsWhereInput>>;
  NOT?: InputMaybe<Array<DocsWhereInput>>;
  OR?: InputMaybe<Array<DocsWhereInput>>;
  alias?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  parentId?: InputMaybe<UuidNullableFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type DocsWhereUniqueInput = {
  AND?: InputMaybe<Array<DocsWhereInput>>;
  NOT?: InputMaybe<Array<DocsWhereInput>>;
  OR?: InputMaybe<Array<DocsWhereInput>>;
  alias?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  parentId?: InputMaybe<UuidNullableFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Documentation = {
  __typename?: 'Documentation';
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  parentId?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type DocumentationCountAggregate = {
  __typename?: 'DocumentationCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  parentId: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type DocumentationCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  content?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  parentId?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocumentationCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocumentationCreateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  parentId?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocumentationCreateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  parentId?: InputMaybe<Scalars['String']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type DocumentationGroupBy = {
  __typename?: 'DocumentationGroupBy';
  _count?: Maybe<DocumentationCountAggregate>;
  _max?: Maybe<DocumentationMaxAggregate>;
  _min?: Maybe<DocumentationMinAggregate>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  parentId?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type DocumentationListPaginated = {
  __typename?: 'DocumentationListPaginated';
  data?: Maybe<Array<Documentation>>;
  total: Scalars['Int']['output'];
};

export type DocumentationMaxAggregate = {
  __typename?: 'DocumentationMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  parentId?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DocumentationMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  parentId?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocumentationMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocumentationMinAggregate = {
  __typename?: 'DocumentationMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  parentId?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type DocumentationMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  parentId?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DocumentationMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocumentationOrderByWithAggregationInput = {
  _count?: InputMaybe<DocumentationCountOrderByAggregateInput>;
  _max?: InputMaybe<DocumentationMaxOrderByAggregateInput>;
  _min?: InputMaybe<DocumentationMinOrderByAggregateInput>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrderInput>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type DocumentationOrderByWithRelationInput = {
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  parentId?: InputMaybe<SortOrderInput>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum DocumentationScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  ParentId = 'parentId',
  Title = 'title',
  UpdatedAt = 'updatedAt'
}

export type DocumentationScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<DocumentationScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<DocumentationScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<DocumentationScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  parentId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type DocumentationUpdateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  parentId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type DocumentationUpdateManyMutationInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  parentId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type DocumentationWhereInput = {
  AND?: InputMaybe<Array<DocumentationWhereInput>>;
  NOT?: InputMaybe<Array<DocumentationWhereInput>>;
  OR?: InputMaybe<Array<DocumentationWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  parentId?: InputMaybe<UuidNullableFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type DocumentationWhereUniqueInput = {
  AND?: InputMaybe<Array<DocumentationWhereInput>>;
  NOT?: InputMaybe<Array<DocumentationWhereInput>>;
  OR?: InputMaybe<Array<DocumentationWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  parentId?: InputMaybe<UuidNullableFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Ecosystem = {
  __typename?: 'Ecosystem';
  _count: EcosystemCount;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  ideaBank?: Maybe<Array<IdeaBank>>;
  image: Scalars['String']['output'];
  info?: Maybe<Array<EcosystemInfo>>;
  language: Language;
  organization?: Maybe<Organization>;
  organizationId?: Maybe<Scalars['String']['output']>;
  pageView: Scalars['Int']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  track: Scalars['String']['output'];
  type?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type EcosystemAvgAggregate = {
  __typename?: 'EcosystemAvgAggregate';
  pageView?: Maybe<Scalars['Float']['output']>;
};

export type EcosystemCount = {
  __typename?: 'EcosystemCount';
  ideaBank: Scalars['Int']['output'];
  info: Scalars['Int']['output'];
};

export type EcosystemCountAggregate = {
  __typename?: 'EcosystemCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  language: Scalars['Int']['output'];
  organizationId: Scalars['Int']['output'];
  pageView: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type EcosystemCreateNestedOneWithoutIdeaBankInput = {
  connect?: InputMaybe<EcosystemWhereUniqueInput>;
  connectOrCreate?: InputMaybe<EcosystemCreateOrConnectWithoutIdeaBankInput>;
  create?: InputMaybe<EcosystemCreateWithoutIdeaBankInput>;
};

export type EcosystemCreateOrConnectWithoutIdeaBankInput = {
  create: EcosystemCreateWithoutIdeaBankInput;
  where: EcosystemWhereUniqueInput;
};

export type EcosystemCreateWithoutIdeaBankInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['String']['input'];
  info?: InputMaybe<EcosystemInfoCreateNestedManyWithoutBasicInput>;
  language: Language;
  organization?: InputMaybe<OrganizationCreateNestedOneWithoutEcosystemInput>;
  pageView?: InputMaybe<Scalars['Int']['input']>;
  tags?: InputMaybe<EcosystemCreatetagsInput>;
  track: Scalars['String']['input'];
  type?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EcosystemCreatetagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type EcosystemExtend = {
  __typename?: 'EcosystemExtend';
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  language: Language;
  type?: Maybe<Scalars['String']['output']>;
};

export type EcosystemInfo = {
  __typename?: 'EcosystemInfo';
  alias?: Maybe<Scalars['String']['output']>;
  basic: Ecosystem;
  certificateDesc: Scalars['String']['output'];
  description: Scalars['String']['output'];
  ecosystemId: Scalars['String']['output'];
  lang: Scalars['String']['output'];
  name: Scalars['String']['output'];
};

export type EcosystemInfoCountAggregate = {
  __typename?: 'EcosystemInfoCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  certificateDesc: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
};

export type EcosystemInfoCreateManyBasicInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  certificateDesc: Scalars['String']['input'];
  description: Scalars['String']['input'];
  lang: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type EcosystemInfoCreateManyBasicInputEnvelope = {
  data: Array<EcosystemInfoCreateManyBasicInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EcosystemInfoCreateNestedManyWithoutBasicInput = {
  connect?: InputMaybe<Array<EcosystemInfoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<EcosystemInfoCreateOrConnectWithoutBasicInput>>;
  create?: InputMaybe<Array<EcosystemInfoCreateWithoutBasicInput>>;
  createMany?: InputMaybe<EcosystemInfoCreateManyBasicInputEnvelope>;
};

export type EcosystemInfoCreateOrConnectWithoutBasicInput = {
  create: EcosystemInfoCreateWithoutBasicInput;
  where: EcosystemInfoWhereUniqueInput;
};

export type EcosystemInfoCreateWithoutBasicInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  certificateDesc: Scalars['String']['input'];
  description: Scalars['String']['input'];
  lang: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type EcosystemInfoEcosystemIdLangCompoundUniqueInput = {
  ecosystemId: Scalars['String']['input'];
  lang: Scalars['String']['input'];
};

export type EcosystemInfoExtend = {
  __typename?: 'EcosystemInfoExtend';
  alias?: Maybe<Scalars['String']['output']>;
  basic: Ecosystem;
  certificateDesc: Scalars['String']['output'];
  certifications?: Maybe<Array<CertificationExtend>>;
  currentPhase?: Maybe<CurrentPhase>;
  description: Scalars['String']['output'];
  ecosystemId: Scalars['String']['output'];
  lang: Scalars['String']['output'];
  name: Scalars['String']['output'];
  phases?: Maybe<Array<EcosystemPhaseExtend>>;
  progress?: Maybe<Scalars['Float']['output']>;
};

export type EcosystemInfoListPaginated = {
  __typename?: 'EcosystemInfoListPaginated';
  data?: Maybe<Array<EcosystemInfo>>;
  total: Scalars['Int']['output'];
};

export type EcosystemInfoListRelationFilter = {
  every?: InputMaybe<EcosystemInfoWhereInput>;
  none?: InputMaybe<EcosystemInfoWhereInput>;
  some?: InputMaybe<EcosystemInfoWhereInput>;
};

export type EcosystemInfoMaxAggregate = {
  __typename?: 'EcosystemInfoMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  certificateDesc?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type EcosystemInfoMinAggregate = {
  __typename?: 'EcosystemInfoMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  certificateDesc?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type EcosystemInfoOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type EcosystemInfoOrderByWithRelationInput = {
  alias?: InputMaybe<SortOrderInput>;
  basic?: InputMaybe<EcosystemOrderByWithRelationInput>;
  certificateDesc?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
};

export enum EcosystemInfoScalarFieldEnum {
  Alias = 'alias',
  CertificateDesc = 'certificateDesc',
  Description = 'description',
  EcosystemId = 'ecosystemId',
  Lang = 'lang',
  Name = 'name'
}

export type EcosystemInfoScalarWhereInput = {
  AND?: InputMaybe<Array<EcosystemInfoScalarWhereInput>>;
  NOT?: InputMaybe<Array<EcosystemInfoScalarWhereInput>>;
  OR?: InputMaybe<Array<EcosystemInfoScalarWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  certificateDesc?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ecosystemId?: InputMaybe<UuidFilter>;
  lang?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
};

export type EcosystemInfoUpdateManyMutationInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  certificateDesc?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type EcosystemInfoUpdateManyWithWhereWithoutBasicInput = {
  data: EcosystemInfoUpdateManyMutationInput;
  where: EcosystemInfoScalarWhereInput;
};

export type EcosystemInfoUpdateManyWithoutBasicNestedInput = {
  connect?: InputMaybe<Array<EcosystemInfoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<EcosystemInfoCreateOrConnectWithoutBasicInput>>;
  create?: InputMaybe<Array<EcosystemInfoCreateWithoutBasicInput>>;
  createMany?: InputMaybe<EcosystemInfoCreateManyBasicInputEnvelope>;
  delete?: InputMaybe<Array<EcosystemInfoWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<EcosystemInfoScalarWhereInput>>;
  disconnect?: InputMaybe<Array<EcosystemInfoWhereUniqueInput>>;
  set?: InputMaybe<Array<EcosystemInfoWhereUniqueInput>>;
  update?: InputMaybe<Array<EcosystemInfoUpdateWithWhereUniqueWithoutBasicInput>>;
  updateMany?: InputMaybe<Array<EcosystemInfoUpdateManyWithWhereWithoutBasicInput>>;
  upsert?: InputMaybe<Array<EcosystemInfoUpsertWithWhereUniqueWithoutBasicInput>>;
};

export type EcosystemInfoUpdateWithWhereUniqueWithoutBasicInput = {
  data: EcosystemInfoUpdateWithoutBasicInput;
  where: EcosystemInfoWhereUniqueInput;
};

export type EcosystemInfoUpdateWithoutBasicInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  certificateDesc?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type EcosystemInfoUpsertWithWhereUniqueWithoutBasicInput = {
  create: EcosystemInfoCreateWithoutBasicInput;
  update: EcosystemInfoUpdateWithoutBasicInput;
  where: EcosystemInfoWhereUniqueInput;
};

export type EcosystemInfoWhereInput = {
  AND?: InputMaybe<Array<EcosystemInfoWhereInput>>;
  NOT?: InputMaybe<Array<EcosystemInfoWhereInput>>;
  OR?: InputMaybe<Array<EcosystemInfoWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  basic?: InputMaybe<EcosystemRelationFilter>;
  certificateDesc?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ecosystemId?: InputMaybe<UuidFilter>;
  lang?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
};

export type EcosystemInfoWhereUniqueInput = {
  AND?: InputMaybe<Array<EcosystemInfoWhereInput>>;
  NOT?: InputMaybe<Array<EcosystemInfoWhereInput>>;
  OR?: InputMaybe<Array<EcosystemInfoWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  basic?: InputMaybe<EcosystemRelationFilter>;
  certificateDesc?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ecosystemId?: InputMaybe<UuidFilter>;
  ecosystemId_lang?: InputMaybe<EcosystemInfoEcosystemIdLangCompoundUniqueInput>;
  lang?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
};

export type EcosystemLevel = {
  __typename?: 'EcosystemLevel';
  _count: EcosystemLevelCount;
  certificationId: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  ecosystemId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  info?: Maybe<Array<UserEcosystemLevel>>;
  label: Scalars['JSON']['output'];
  level: Scalars['Int']['output'];
  maxExp: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type EcosystemLevelAvgAggregate = {
  __typename?: 'EcosystemLevelAvgAggregate';
  level?: Maybe<Scalars['Float']['output']>;
  maxExp?: Maybe<Scalars['Float']['output']>;
};

export type EcosystemLevelCount = {
  __typename?: 'EcosystemLevelCount';
  info: Scalars['Int']['output'];
};

export type EcosystemLevelCountAggregate = {
  __typename?: 'EcosystemLevelCountAggregate';
  _all: Scalars['Int']['output'];
  certificationId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  label: Scalars['Int']['output'];
  level: Scalars['Int']['output'];
  maxExp: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type EcosystemLevelMaxAggregate = {
  __typename?: 'EcosystemLevelMaxAggregate';
  certificationId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
  maxExp?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemLevelMinAggregate = {
  __typename?: 'EcosystemLevelMinAggregate';
  certificationId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
  maxExp?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemLevelSumAggregate = {
  __typename?: 'EcosystemLevelSumAggregate';
  level?: Maybe<Scalars['Int']['output']>;
  maxExp?: Maybe<Scalars['Int']['output']>;
};

export type EcosystemListPaginated = {
  __typename?: 'EcosystemListPaginated';
  data?: Maybe<Array<Ecosystem>>;
  total: Scalars['Int']['output'];
};

export type EcosystemMaxAggregate = {
  __typename?: 'EcosystemMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  organizationId?: Maybe<Scalars['String']['output']>;
  pageView?: Maybe<Scalars['Int']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemMinAggregate = {
  __typename?: 'EcosystemMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  organizationId?: Maybe<Scalars['String']['output']>;
  pageView?: Maybe<Scalars['Int']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemNullableRelationFilter = {
  is?: InputMaybe<EcosystemWhereInput>;
  isNot?: InputMaybe<EcosystemWhereInput>;
};

export type EcosystemOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  ideaBank?: InputMaybe<IdeaBankOrderByRelationAggregateInput>;
  image?: InputMaybe<SortOrder>;
  info?: InputMaybe<EcosystemInfoOrderByRelationAggregateInput>;
  language?: InputMaybe<SortOrder>;
  organization?: InputMaybe<OrganizationOrderByWithRelationInput>;
  organizationId?: InputMaybe<SortOrderInput>;
  pageView?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type EcosystemPhaseAvgAggregate = {
  __typename?: 'EcosystemPhaseAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

export type EcosystemPhaseCountAggregate = {
  __typename?: 'EcosystemPhaseCountAggregate';
  _all: Scalars['Int']['output'];
  certificateId: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  extra: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type EcosystemPhaseExtend = {
  __typename?: 'EcosystemPhaseExtend';
  certificate?: Maybe<CertificationExtend>;
  certificateId?: Maybe<Scalars['String']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  courses?: Maybe<Array<CourseExtend>>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  ecosystemId: Scalars['String']['output'];
  extra?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['String']['output'];
  lang: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  progress?: Maybe<Scalars['Float']['output']>;
  quizzes?: Maybe<Array<PhaseQuizExtend>>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type EcosystemPhaseMaxAggregate = {
  __typename?: 'EcosystemPhaseMaxAggregate';
  certificateId?: Maybe<Scalars['String']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemPhaseMinAggregate = {
  __typename?: 'EcosystemPhaseMinAggregate';
  certificateId?: Maybe<Scalars['String']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemPhaseSumAggregate = {
  __typename?: 'EcosystemPhaseSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};

export type EcosystemRelationFilter = {
  is?: InputMaybe<EcosystemWhereInput>;
  isNot?: InputMaybe<EcosystemWhereInput>;
};

export enum EcosystemScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Image = 'image',
  Language = 'language',
  OrganizationId = 'organizationId',
  PageView = 'pageView',
  Tags = 'tags',
  Track = 'track',
  Type = 'type',
  UpdatedAt = 'updatedAt'
}

export enum EcosystemStatus {
  Active = 'ACTIVE',
  Enroll = 'ENROLL'
}

export type EcosystemSumAggregate = {
  __typename?: 'EcosystemSumAggregate';
  pageView?: Maybe<Scalars['Int']['output']>;
};

export type EcosystemTask = {
  __typename?: 'EcosystemTask';
  _count: EcosystemTaskCount;
  createdAt: Scalars['DateTime']['output'];
  ecosystemId: Scalars['String']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['JSON']['output'];
  id: Scalars['String']['output'];
  index: Scalars['Int']['output'];
  info?: Maybe<Array<EcosystemTaskInfo>>;
  language?: Maybe<Language>;
  target: Scalars['Int']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type EcosystemTaskAvgAggregate = {
  __typename?: 'EcosystemTaskAvgAggregate';
  exp?: Maybe<Scalars['Float']['output']>;
  index?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type EcosystemTaskCount = {
  __typename?: 'EcosystemTaskCount';
  info: Scalars['Int']['output'];
};

export type EcosystemTaskCountAggregate = {
  __typename?: 'EcosystemTaskCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  index: Scalars['Int']['output'];
  language: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type EcosystemTaskInfo = {
  __typename?: 'EcosystemTaskInfo';
  basic: EcosystemTask;
  description?: Maybe<Scalars['String']['output']>;
  lang: Scalars['String']['output'];
  name: Scalars['String']['output'];
  subTitle?: Maybe<Scalars['String']['output']>;
  taskId: Scalars['String']['output'];
};

export type EcosystemTaskInfoCountAggregate = {
  __typename?: 'EcosystemTaskInfoCountAggregate';
  _all: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  subTitle: Scalars['Int']['output'];
  taskId: Scalars['Int']['output'];
};

export type EcosystemTaskInfoMaxAggregate = {
  __typename?: 'EcosystemTaskInfoMaxAggregate';
  description?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  subTitle?: Maybe<Scalars['String']['output']>;
  taskId?: Maybe<Scalars['String']['output']>;
};

export type EcosystemTaskInfoMinAggregate = {
  __typename?: 'EcosystemTaskInfoMinAggregate';
  description?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  subTitle?: Maybe<Scalars['String']['output']>;
  taskId?: Maybe<Scalars['String']['output']>;
};

export type EcosystemTaskMaxAggregate = {
  __typename?: 'EcosystemTaskMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  index?: Maybe<Scalars['Int']['output']>;
  language?: Maybe<Language>;
  target?: Maybe<Scalars['Int']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemTaskMinAggregate = {
  __typename?: 'EcosystemTaskMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  index?: Maybe<Scalars['Int']['output']>;
  language?: Maybe<Language>;
  target?: Maybe<Scalars['Int']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EcosystemTaskSumAggregate = {
  __typename?: 'EcosystemTaskSumAggregate';
  exp?: Maybe<Scalars['Int']['output']>;
  index?: Maybe<Scalars['Int']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
};

export type EcosystemUpdateOneWithoutIdeaBankNestedInput = {
  connect?: InputMaybe<EcosystemWhereUniqueInput>;
  connectOrCreate?: InputMaybe<EcosystemCreateOrConnectWithoutIdeaBankInput>;
  create?: InputMaybe<EcosystemCreateWithoutIdeaBankInput>;
  delete?: InputMaybe<EcosystemWhereInput>;
  disconnect?: InputMaybe<EcosystemWhereInput>;
  update?: InputMaybe<EcosystemUpdateToOneWithWhereWithoutIdeaBankInput>;
  upsert?: InputMaybe<EcosystemUpsertWithoutIdeaBankInput>;
};

export type EcosystemUpdateToOneWithWhereWithoutIdeaBankInput = {
  data: EcosystemUpdateWithoutIdeaBankInput;
  where?: InputMaybe<EcosystemWhereInput>;
};

export type EcosystemUpdateWithoutIdeaBankInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<EcosystemInfoUpdateManyWithoutBasicNestedInput>;
  language?: InputMaybe<EnumLanguageFieldUpdateOperationsInput>;
  organization?: InputMaybe<OrganizationUpdateOneWithoutEcosystemNestedInput>;
  pageView?: InputMaybe<IntFieldUpdateOperationsInput>;
  tags?: InputMaybe<EcosystemUpdatetagsInput>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  type?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type EcosystemUpdatetagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type EcosystemUpsertWithoutIdeaBankInput = {
  create: EcosystemCreateWithoutIdeaBankInput;
  update: EcosystemUpdateWithoutIdeaBankInput;
  where?: InputMaybe<EcosystemWhereInput>;
};

/** update ecosystem value */
export enum EcosystemValue {
  Arbitrum = 'ARBITRUM',
  Artela = 'ARTELA',
  Eclipse = 'ECLIPSE',
  Ethereum = 'ETHEREUM',
  Gaianet = 'GAIANET',
  Linea = 'LINEA',
  Mantle = 'MANTLE',
  Solana = 'SOLANA',
  Sui = 'SUI',
  Telos = 'TELOS',
  Vara = 'VARA',
  Xion = 'XION'
}

export type EcosystemWhereInput = {
  AND?: InputMaybe<Array<EcosystemWhereInput>>;
  NOT?: InputMaybe<Array<EcosystemWhereInput>>;
  OR?: InputMaybe<Array<EcosystemWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  ideaBank?: InputMaybe<IdeaBankListRelationFilter>;
  image?: InputMaybe<StringFilter>;
  info?: InputMaybe<EcosystemInfoListRelationFilter>;
  language?: InputMaybe<EnumLanguageFilter>;
  organization?: InputMaybe<OrganizationNullableRelationFilter>;
  organizationId?: InputMaybe<UuidNullableFilter>;
  pageView?: InputMaybe<IntFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  track?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type EcosystemWhereUniqueInput = {
  AND?: InputMaybe<Array<EcosystemWhereInput>>;
  NOT?: InputMaybe<Array<EcosystemWhereInput>>;
  OR?: InputMaybe<Array<EcosystemWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankListRelationFilter>;
  image?: InputMaybe<StringFilter>;
  info?: InputMaybe<EcosystemInfoListRelationFilter>;
  language?: InputMaybe<EnumLanguageFilter>;
  organization?: InputMaybe<OrganizationNullableRelationFilter>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  pageView?: InputMaybe<IntFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  track?: InputMaybe<StringFilter>;
  type?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type EnumBlockChainTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<BlockChainType>;
};

export type EnumBlockChainTypeFilter = {
  equals?: InputMaybe<BlockChainType>;
  in?: InputMaybe<Array<BlockChainType>>;
  not?: InputMaybe<NestedEnumBlockChainTypeFilter>;
  notIn?: InputMaybe<Array<BlockChainType>>;
};

export type EnumBlockChainTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumBlockChainTypeFilter>;
  _min?: InputMaybe<NestedEnumBlockChainTypeFilter>;
  equals?: InputMaybe<BlockChainType>;
  in?: InputMaybe<Array<BlockChainType>>;
  not?: InputMaybe<NestedEnumBlockChainTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<BlockChainType>>;
};

export type EnumCampaignTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<CampaignType>;
};

export type EnumCampaignTypeFilter = {
  equals?: InputMaybe<CampaignType>;
  in?: InputMaybe<Array<CampaignType>>;
  not?: InputMaybe<NestedEnumCampaignTypeFilter>;
  notIn?: InputMaybe<Array<CampaignType>>;
};

export type EnumCourseLevelFieldUpdateOperationsInput = {
  set?: InputMaybe<CourseLevel>;
};

export type EnumCourseLevelFilter = {
  equals?: InputMaybe<CourseLevel>;
  in?: InputMaybe<Array<CourseLevel>>;
  not?: InputMaybe<NestedEnumCourseLevelFilter>;
  notIn?: InputMaybe<Array<CourseLevel>>;
};

export type EnumCourseLevelNullableFilter = {
  equals?: InputMaybe<CourseLevel>;
  in?: InputMaybe<Array<CourseLevel>>;
  not?: InputMaybe<NestedEnumCourseLevelNullableFilter>;
  notIn?: InputMaybe<Array<CourseLevel>>;
};

export type EnumCourseLevelWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumCourseLevelFilter>;
  _min?: InputMaybe<NestedEnumCourseLevelFilter>;
  equals?: InputMaybe<CourseLevel>;
  in?: InputMaybe<Array<CourseLevel>>;
  not?: InputMaybe<NestedEnumCourseLevelWithAggregatesFilter>;
  notIn?: InputMaybe<Array<CourseLevel>>;
};

export type EnumCourseTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<CourseType>;
};

export type EnumCourseTypeFilter = {
  equals?: InputMaybe<CourseType>;
  in?: InputMaybe<Array<CourseType>>;
  not?: InputMaybe<NestedEnumCourseTypeFilter>;
  notIn?: InputMaybe<Array<CourseType>>;
};

export type EnumHackathonModeNullableFilter = {
  equals?: InputMaybe<HackathonMode>;
  in?: InputMaybe<Array<HackathonMode>>;
  not?: InputMaybe<NestedEnumHackathonModeNullableFilter>;
  notIn?: InputMaybe<Array<HackathonMode>>;
};

export type EnumLanguageFieldUpdateOperationsInput = {
  set?: InputMaybe<Language>;
};

export type EnumLanguageFilter = {
  equals?: InputMaybe<Language>;
  in?: InputMaybe<Array<Language>>;
  not?: InputMaybe<NestedEnumLanguageFilter>;
  notIn?: InputMaybe<Array<Language>>;
};

export type EnumLanguageNullableFilter = {
  equals?: InputMaybe<Language>;
  in?: InputMaybe<Array<Language>>;
  not?: InputMaybe<NestedEnumLanguageNullableFilter>;
  notIn?: InputMaybe<Array<Language>>;
};

export type EnumLanguageWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumLanguageFilter>;
  _min?: InputMaybe<NestedEnumLanguageFilter>;
  equals?: InputMaybe<Language>;
  in?: InputMaybe<Array<Language>>;
  not?: InputMaybe<NestedEnumLanguageWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Language>>;
};

export type EnumNotificationTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<NotificationType>;
};

export type EnumNotificationTypeFilter = {
  equals?: InputMaybe<NotificationType>;
  in?: InputMaybe<Array<NotificationType>>;
  not?: InputMaybe<NestedEnumNotificationTypeFilter>;
  notIn?: InputMaybe<Array<NotificationType>>;
};

export type EnumNotificationTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumNotificationTypeFilter>;
  _min?: InputMaybe<NestedEnumNotificationTypeFilter>;
  equals?: InputMaybe<NotificationType>;
  in?: InputMaybe<Array<NotificationType>>;
  not?: InputMaybe<NestedEnumNotificationTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<NotificationType>>;
};

export type EnumOrganizationRoleFieldUpdateOperationsInput = {
  set?: InputMaybe<OrganizationRole>;
};

export type EnumOrganizationRoleFilter = {
  equals?: InputMaybe<OrganizationRole>;
  in?: InputMaybe<Array<OrganizationRole>>;
  not?: InputMaybe<NestedEnumOrganizationRoleFilter>;
  notIn?: InputMaybe<Array<OrganizationRole>>;
};

export type EnumPageTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<PageType>;
};

export type EnumPageTypeFilter = {
  equals?: InputMaybe<PageType>;
  in?: InputMaybe<Array<PageType>>;
  not?: InputMaybe<NestedEnumPageTypeFilter>;
  notIn?: InputMaybe<Array<PageType>>;
};

export type EnumProgressStatusFieldUpdateOperationsInput = {
  set?: InputMaybe<ProgressStatus>;
};

export type EnumProgressStatusFilter = {
  equals?: InputMaybe<ProgressStatus>;
  in?: InputMaybe<Array<ProgressStatus>>;
  not?: InputMaybe<NestedEnumProgressStatusFilter>;
  notIn?: InputMaybe<Array<ProgressStatus>>;
};

export type EnumProgressStatusWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumProgressStatusFilter>;
  _min?: InputMaybe<NestedEnumProgressStatusFilter>;
  equals?: InputMaybe<ProgressStatus>;
  in?: InputMaybe<Array<ProgressStatus>>;
  not?: InputMaybe<NestedEnumProgressStatusWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ProgressStatus>>;
};

export type EnumProjectTypeNullableFilter = {
  equals?: InputMaybe<ProjectType>;
  in?: InputMaybe<Array<ProjectType>>;
  not?: InputMaybe<NestedEnumProjectTypeNullableFilter>;
  notIn?: InputMaybe<Array<ProjectType>>;
};

export type EnumRoleFieldUpdateOperationsInput = {
  set?: InputMaybe<Role>;
};

export type EnumRoleFilter = {
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumRoleFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type EnumRoleWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumRoleFilter>;
  _min?: InputMaybe<NestedEnumRoleFilter>;
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumRoleWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type EnumUserStatusFieldUpdateOperationsInput = {
  set?: InputMaybe<UserStatus>;
};

export type EnumUserStatusFilter = {
  equals?: InputMaybe<UserStatus>;
  in?: InputMaybe<Array<UserStatus>>;
  not?: InputMaybe<NestedEnumUserStatusFilter>;
  notIn?: InputMaybe<Array<UserStatus>>;
};

export type EnumUserStatusWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumUserStatusFilter>;
  _min?: InputMaybe<NestedEnumUserStatusFilter>;
  equals?: InputMaybe<UserStatus>;
  in?: InputMaybe<Array<UserStatus>>;
  not?: InputMaybe<NestedEnumUserStatusWithAggregatesFilter>;
  notIn?: InputMaybe<Array<UserStatus>>;
};

export type EnumVoteRoleFieldUpdateOperationsInput = {
  set?: InputMaybe<VoteRole>;
};

export type EnumVoteRoleFilter = {
  equals?: InputMaybe<VoteRole>;
  in?: InputMaybe<Array<VoteRole>>;
  not?: InputMaybe<NestedEnumVoteRoleFilter>;
  notIn?: InputMaybe<Array<VoteRole>>;
};

export type EnumVoteRoleWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumVoteRoleFilter>;
  _min?: InputMaybe<NestedEnumVoteRoleFilter>;
  equals?: InputMaybe<VoteRole>;
  in?: InputMaybe<Array<VoteRole>>;
  not?: InputMaybe<NestedEnumVoteRoleWithAggregatesFilter>;
  notIn?: InputMaybe<Array<VoteRole>>;
};

export type EnumWorkModeFieldUpdateOperationsInput = {
  set?: InputMaybe<WorkMode>;
};

export type EnumWorkModeFilter = {
  equals?: InputMaybe<WorkMode>;
  in?: InputMaybe<Array<WorkMode>>;
  not?: InputMaybe<NestedEnumWorkModeFilter>;
  notIn?: InputMaybe<Array<WorkMode>>;
};

export type EnumWorkModeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumWorkModeFilter>;
  _min?: InputMaybe<NestedEnumWorkModeFilter>;
  equals?: InputMaybe<WorkMode>;
  in?: InputMaybe<Array<WorkMode>>;
  not?: InputMaybe<NestedEnumWorkModeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<WorkMode>>;
};

export type EnumWorkTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<WorkType>;
};

export type EnumWorkTypeFilter = {
  equals?: InputMaybe<WorkType>;
  in?: InputMaybe<Array<WorkType>>;
  not?: InputMaybe<NestedEnumWorkTypeFilter>;
  notIn?: InputMaybe<Array<WorkType>>;
};

export type EnumWorkTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumWorkTypeFilter>;
  _min?: InputMaybe<NestedEnumWorkTypeFilter>;
  equals?: InputMaybe<WorkType>;
  in?: InputMaybe<Array<WorkType>>;
  not?: InputMaybe<NestedEnumWorkTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<WorkType>>;
};

export type Events = {
  __typename?: 'Events';
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  eventUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  medias?: Maybe<Array<Scalars['String']['output']>>;
  name: Scalars['String']['output'];
  prUrl?: Maybe<Scalars['String']['output']>;
  startTime: Scalars['DateTime']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type EventsCountAggregate = {
  __typename?: 'EventsCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  endTime: Scalars['Int']['output'];
  eventUrl: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  medias: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  prUrl: Scalars['Int']['output'];
  startTime: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type EventsCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  endTime?: InputMaybe<Scalars['Boolean']['input']>;
  eventUrl?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['Boolean']['input']>;
  medias?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  prUrl?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['Boolean']['input']>;
  tags?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EventsCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  endTime?: InputMaybe<SortOrder>;
  eventUrl?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  medias?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  prUrl?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type EventsCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  eventUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  medias?: InputMaybe<EventsCreatemediasInput>;
  name: Scalars['String']['input'];
  prUrl?: InputMaybe<Scalars['String']['input']>;
  startTime: Scalars['DateTime']['input'];
  tags?: InputMaybe<EventsCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EventsCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  endTime?: InputMaybe<Scalars['DateTime']['input']>;
  eventUrl?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  medias?: InputMaybe<EventsCreatemediasInput>;
  name: Scalars['String']['input'];
  prUrl?: InputMaybe<Scalars['String']['input']>;
  startTime: Scalars['DateTime']['input'];
  tags?: InputMaybe<EventsCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type EventsCreatemediasInput = {
  set: Array<Scalars['String']['input']>;
};

export type EventsCreatetagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type EventsGroupBy = {
  __typename?: 'EventsGroupBy';
  _count?: Maybe<EventsCountAggregate>;
  _max?: Maybe<EventsMaxAggregate>;
  _min?: Maybe<EventsMinAggregate>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  eventUrl?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  medias?: Maybe<Array<Scalars['String']['output']>>;
  name: Scalars['String']['output'];
  prUrl?: Maybe<Scalars['String']['output']>;
  startTime: Scalars['DateTime']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type EventsListPaginated = {
  __typename?: 'EventsListPaginated';
  data?: Maybe<Array<Events>>;
  total: Scalars['Int']['output'];
};

export type EventsMaxAggregate = {
  __typename?: 'EventsMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  eventUrl?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  prUrl?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EventsMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  endTime?: InputMaybe<Scalars['Boolean']['input']>;
  eventUrl?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  prUrl?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EventsMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  endTime?: InputMaybe<SortOrder>;
  eventUrl?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  prUrl?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type EventsMinAggregate = {
  __typename?: 'EventsMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  endTime?: Maybe<Scalars['DateTime']['output']>;
  eventUrl?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  prUrl?: Maybe<Scalars['String']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type EventsMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  endTime?: InputMaybe<Scalars['Boolean']['input']>;
  eventUrl?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  prUrl?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type EventsMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  endTime?: InputMaybe<SortOrder>;
  eventUrl?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  prUrl?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type EventsOrderByWithAggregationInput = {
  _count?: InputMaybe<EventsCountOrderByAggregateInput>;
  _max?: InputMaybe<EventsMaxOrderByAggregateInput>;
  _min?: InputMaybe<EventsMinOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  endTime?: InputMaybe<SortOrderInput>;
  eventUrl?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrderInput>;
  medias?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  prUrl?: InputMaybe<SortOrderInput>;
  startTime?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type EventsOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  endTime?: InputMaybe<SortOrderInput>;
  eventUrl?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrderInput>;
  medias?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  prUrl?: InputMaybe<SortOrderInput>;
  startTime?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum EventsScalarFieldEnum {
  CreatedAt = 'createdAt',
  Description = 'description',
  EndTime = 'endTime',
  EventUrl = 'eventUrl',
  Id = 'id',
  Location = 'location',
  Medias = 'medias',
  Name = 'name',
  PrUrl = 'prUrl',
  StartTime = 'startTime',
  Tags = 'tags',
  UpdatedAt = 'updatedAt'
}

export type EventsScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<EventsScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<EventsScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<EventsScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  description?: InputMaybe<StringNullableWithAggregatesFilter>;
  endTime?: InputMaybe<DateTimeNullableWithAggregatesFilter>;
  eventUrl?: InputMaybe<StringNullableWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  location?: InputMaybe<StringNullableWithAggregatesFilter>;
  medias?: InputMaybe<StringNullableListFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  prUrl?: InputMaybe<StringNullableWithAggregatesFilter>;
  startTime?: InputMaybe<DateTimeWithAggregatesFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type EventsUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  endTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  eventUrl?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  medias?: InputMaybe<EventsUpdatemediasInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  prUrl?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  tags?: InputMaybe<EventsUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type EventsUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  endTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  eventUrl?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  medias?: InputMaybe<EventsUpdatemediasInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  prUrl?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  tags?: InputMaybe<EventsUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type EventsUpdatemediasInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type EventsUpdatetagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type EventsWhereInput = {
  AND?: InputMaybe<Array<EventsWhereInput>>;
  NOT?: InputMaybe<Array<EventsWhereInput>>;
  OR?: InputMaybe<Array<EventsWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  eventUrl?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  location?: InputMaybe<StringNullableFilter>;
  medias?: InputMaybe<StringNullableListFilter>;
  name?: InputMaybe<StringFilter>;
  prUrl?: InputMaybe<StringNullableFilter>;
  startTime?: InputMaybe<DateTimeFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type EventsWhereUniqueInput = {
  AND?: InputMaybe<Array<EventsWhereInput>>;
  NOT?: InputMaybe<Array<EventsWhereInput>>;
  OR?: InputMaybe<Array<EventsWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  endTime?: InputMaybe<DateTimeNullableFilter>;
  eventUrl?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<StringNullableFilter>;
  medias?: InputMaybe<StringNullableListFilter>;
  name?: InputMaybe<StringFilter>;
  prUrl?: InputMaybe<StringNullableFilter>;
  startTime?: InputMaybe<DateTimeFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Faucet = {
  __typename?: 'Faucet';
  amount: Scalars['Decimal']['output'];
  balance: Scalars['Decimal']['output'];
  blockBrowserUrl: Scalars['String']['output'];
  chainId: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  intervalTime: Scalars['Decimal']['output'];
  name: Scalars['String']['output'];
  owner: Scalars['String']['output'];
  rpcUrl: Scalars['String']['output'];
  symbol: Scalars['String']['output'];
  thumbnail: Scalars['String']['output'];
  type: BlockChainType;
  updatedAt: Scalars['DateTime']['output'];
};

export type FaucetAvgAggregate = {
  __typename?: 'FaucetAvgAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
  balance?: Maybe<Scalars['Decimal']['output']>;
  chainId?: Maybe<Scalars['Float']['output']>;
  intervalTime?: Maybe<Scalars['Decimal']['output']>;
};

export type FaucetAvgAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  balance?: InputMaybe<Scalars['Boolean']['input']>;
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  intervalTime?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FaucetAvgOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
};

export type FaucetClaimResponse = {
  __typename?: 'FaucetClaimResponse';
  exportUrl: Scalars['String']['output'];
};

export type FaucetCountAggregate = {
  __typename?: 'FaucetCountAggregate';
  _all: Scalars['Int']['output'];
  amount: Scalars['Int']['output'];
  balance: Scalars['Int']['output'];
  blockBrowserUrl: Scalars['Int']['output'];
  chainId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  intervalTime: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  owner: Scalars['Int']['output'];
  rpcUrl: Scalars['Int']['output'];
  symbol: Scalars['Int']['output'];
  thumbnail: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type FaucetCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  balance?: InputMaybe<Scalars['Boolean']['input']>;
  blockBrowserUrl?: InputMaybe<Scalars['Boolean']['input']>;
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  intervalTime?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  owner?: InputMaybe<Scalars['Boolean']['input']>;
  rpcUrl?: InputMaybe<Scalars['Boolean']['input']>;
  symbol?: InputMaybe<Scalars['Boolean']['input']>;
  thumbnail?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FaucetCountOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  blockBrowserUrl?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  owner?: InputMaybe<SortOrder>;
  rpcUrl?: InputMaybe<SortOrder>;
  symbol?: InputMaybe<SortOrder>;
  thumbnail?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type FaucetCreateInput = {
  amount?: InputMaybe<Scalars['Decimal']['input']>;
  balance?: InputMaybe<Scalars['Decimal']['input']>;
  blockBrowserUrl: Scalars['String']['input'];
  chainId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  intervalTime?: InputMaybe<Scalars['Decimal']['input']>;
  name: Scalars['String']['input'];
  owner: Scalars['String']['input'];
  rpcUrl: Scalars['String']['input'];
  symbol: Scalars['String']['input'];
  thumbnail: Scalars['String']['input'];
  type?: InputMaybe<BlockChainType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FaucetCreateManyInput = {
  amount?: InputMaybe<Scalars['Decimal']['input']>;
  balance?: InputMaybe<Scalars['Decimal']['input']>;
  blockBrowserUrl: Scalars['String']['input'];
  chainId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  intervalTime?: InputMaybe<Scalars['Decimal']['input']>;
  name: Scalars['String']['input'];
  owner: Scalars['String']['input'];
  rpcUrl: Scalars['String']['input'];
  symbol: Scalars['String']['input'];
  thumbnail: Scalars['String']['input'];
  type?: InputMaybe<BlockChainType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type FaucetGroupBy = {
  __typename?: 'FaucetGroupBy';
  _avg?: Maybe<FaucetAvgAggregate>;
  _count?: Maybe<FaucetCountAggregate>;
  _max?: Maybe<FaucetMaxAggregate>;
  _min?: Maybe<FaucetMinAggregate>;
  _sum?: Maybe<FaucetSumAggregate>;
  amount: Scalars['Decimal']['output'];
  balance: Scalars['Decimal']['output'];
  blockBrowserUrl: Scalars['String']['output'];
  chainId: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  intervalTime: Scalars['Decimal']['output'];
  name: Scalars['String']['output'];
  owner: Scalars['String']['output'];
  rpcUrl: Scalars['String']['output'];
  symbol: Scalars['String']['output'];
  thumbnail: Scalars['String']['output'];
  type: BlockChainType;
  updatedAt: Scalars['DateTime']['output'];
};

export type FaucetListPaginated = {
  __typename?: 'FaucetListPaginated';
  data?: Maybe<Array<Faucet>>;
  total: Scalars['Int']['output'];
};

export type FaucetMaxAggregate = {
  __typename?: 'FaucetMaxAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
  balance?: Maybe<Scalars['Decimal']['output']>;
  blockBrowserUrl?: Maybe<Scalars['String']['output']>;
  chainId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intervalTime?: Maybe<Scalars['Decimal']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  owner?: Maybe<Scalars['String']['output']>;
  rpcUrl?: Maybe<Scalars['String']['output']>;
  symbol?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<Scalars['String']['output']>;
  type?: Maybe<BlockChainType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type FaucetMaxAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  balance?: InputMaybe<Scalars['Boolean']['input']>;
  blockBrowserUrl?: InputMaybe<Scalars['Boolean']['input']>;
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  intervalTime?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  owner?: InputMaybe<Scalars['Boolean']['input']>;
  rpcUrl?: InputMaybe<Scalars['Boolean']['input']>;
  symbol?: InputMaybe<Scalars['Boolean']['input']>;
  thumbnail?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FaucetMaxOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  blockBrowserUrl?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  owner?: InputMaybe<SortOrder>;
  rpcUrl?: InputMaybe<SortOrder>;
  symbol?: InputMaybe<SortOrder>;
  thumbnail?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type FaucetMinAggregate = {
  __typename?: 'FaucetMinAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
  balance?: Maybe<Scalars['Decimal']['output']>;
  blockBrowserUrl?: Maybe<Scalars['String']['output']>;
  chainId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intervalTime?: Maybe<Scalars['Decimal']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  owner?: Maybe<Scalars['String']['output']>;
  rpcUrl?: Maybe<Scalars['String']['output']>;
  symbol?: Maybe<Scalars['String']['output']>;
  thumbnail?: Maybe<Scalars['String']['output']>;
  type?: Maybe<BlockChainType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type FaucetMinAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  balance?: InputMaybe<Scalars['Boolean']['input']>;
  blockBrowserUrl?: InputMaybe<Scalars['Boolean']['input']>;
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  intervalTime?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  owner?: InputMaybe<Scalars['Boolean']['input']>;
  rpcUrl?: InputMaybe<Scalars['Boolean']['input']>;
  symbol?: InputMaybe<Scalars['Boolean']['input']>;
  thumbnail?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FaucetMinOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  blockBrowserUrl?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  owner?: InputMaybe<SortOrder>;
  rpcUrl?: InputMaybe<SortOrder>;
  symbol?: InputMaybe<SortOrder>;
  thumbnail?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type FaucetOrderByWithAggregationInput = {
  _avg?: InputMaybe<FaucetAvgOrderByAggregateInput>;
  _count?: InputMaybe<FaucetCountOrderByAggregateInput>;
  _max?: InputMaybe<FaucetMaxOrderByAggregateInput>;
  _min?: InputMaybe<FaucetMinOrderByAggregateInput>;
  _sum?: InputMaybe<FaucetSumOrderByAggregateInput>;
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  blockBrowserUrl?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  owner?: InputMaybe<SortOrder>;
  rpcUrl?: InputMaybe<SortOrder>;
  symbol?: InputMaybe<SortOrder>;
  thumbnail?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type FaucetOrderByWithRelationInput = {
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  blockBrowserUrl?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  owner?: InputMaybe<SortOrder>;
  rpcUrl?: InputMaybe<SortOrder>;
  symbol?: InputMaybe<SortOrder>;
  thumbnail?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum FaucetScalarFieldEnum {
  Amount = 'amount',
  Balance = 'balance',
  BlockBrowserUrl = 'blockBrowserUrl',
  ChainId = 'chainId',
  CreatedAt = 'createdAt',
  Id = 'id',
  IntervalTime = 'intervalTime',
  Name = 'name',
  Owner = 'owner',
  RpcUrl = 'rpcUrl',
  Symbol = 'symbol',
  Thumbnail = 'thumbnail',
  Type = 'type',
  UpdatedAt = 'updatedAt'
}

export type FaucetScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<FaucetScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<FaucetScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<FaucetScalarWhereWithAggregatesInput>>;
  amount?: InputMaybe<DecimalWithAggregatesFilter>;
  balance?: InputMaybe<DecimalWithAggregatesFilter>;
  blockBrowserUrl?: InputMaybe<StringWithAggregatesFilter>;
  chainId?: InputMaybe<IntWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  intervalTime?: InputMaybe<DecimalWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  owner?: InputMaybe<StringWithAggregatesFilter>;
  rpcUrl?: InputMaybe<StringWithAggregatesFilter>;
  symbol?: InputMaybe<StringWithAggregatesFilter>;
  thumbnail?: InputMaybe<StringWithAggregatesFilter>;
  type?: InputMaybe<EnumBlockChainTypeWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type FaucetSumAggregate = {
  __typename?: 'FaucetSumAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
  balance?: Maybe<Scalars['Decimal']['output']>;
  chainId?: Maybe<Scalars['Int']['output']>;
  intervalTime?: Maybe<Scalars['Decimal']['output']>;
};

export type FaucetSumAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  balance?: InputMaybe<Scalars['Boolean']['input']>;
  chainId?: InputMaybe<Scalars['Boolean']['input']>;
  intervalTime?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FaucetSumOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  balance?: InputMaybe<SortOrder>;
  chainId?: InputMaybe<SortOrder>;
  intervalTime?: InputMaybe<SortOrder>;
};

export type FaucetUpdateInput = {
  amount?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  balance?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  blockBrowserUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intervalTime?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  owner?: InputMaybe<StringFieldUpdateOperationsInput>;
  rpcUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  symbol?: InputMaybe<StringFieldUpdateOperationsInput>;
  thumbnail?: InputMaybe<StringFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumBlockChainTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type FaucetUpdateManyMutationInput = {
  amount?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  balance?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  blockBrowserUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  chainId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intervalTime?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  owner?: InputMaybe<StringFieldUpdateOperationsInput>;
  rpcUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  symbol?: InputMaybe<StringFieldUpdateOperationsInput>;
  thumbnail?: InputMaybe<StringFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumBlockChainTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type FaucetWhereInput = {
  AND?: InputMaybe<Array<FaucetWhereInput>>;
  NOT?: InputMaybe<Array<FaucetWhereInput>>;
  OR?: InputMaybe<Array<FaucetWhereInput>>;
  amount?: InputMaybe<DecimalFilter>;
  balance?: InputMaybe<DecimalFilter>;
  blockBrowserUrl?: InputMaybe<StringFilter>;
  chainId?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  intervalTime?: InputMaybe<DecimalFilter>;
  name?: InputMaybe<StringFilter>;
  owner?: InputMaybe<StringFilter>;
  rpcUrl?: InputMaybe<StringFilter>;
  symbol?: InputMaybe<StringFilter>;
  thumbnail?: InputMaybe<StringFilter>;
  type?: InputMaybe<EnumBlockChainTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type FaucetWhereUniqueInput = {
  AND?: InputMaybe<Array<FaucetWhereInput>>;
  NOT?: InputMaybe<Array<FaucetWhereInput>>;
  OR?: InputMaybe<Array<FaucetWhereInput>>;
  amount?: InputMaybe<DecimalFilter>;
  balance?: InputMaybe<DecimalFilter>;
  blockBrowserUrl?: InputMaybe<StringFilter>;
  chainId?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  intervalTime?: InputMaybe<DecimalFilter>;
  name?: InputMaybe<StringFilter>;
  owner?: InputMaybe<StringFilter>;
  rpcUrl?: InputMaybe<Scalars['String']['input']>;
  symbol?: InputMaybe<StringFilter>;
  thumbnail?: InputMaybe<StringFilter>;
  type?: InputMaybe<EnumBlockChainTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type FeedbackAvgAggregate = {
  __typename?: 'FeedbackAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type FeedbackCountAggregate = {
  __typename?: 'FeedbackCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  link: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type FeedbackMaxAggregate = {
  __typename?: 'FeedbackMaxAggregate';
  content?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type FeedbackMinAggregate = {
  __typename?: 'FeedbackMinAggregate';
  content?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type FeedbackSumAggregate = {
  __typename?: 'FeedbackSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type FindListTemplate = {
  __typename?: 'FindListTemplate';
  judging?: Maybe<Array<Template>>;
  registration?: Maybe<Array<Template>>;
  reward?: Maybe<Array<Template>>;
  submission?: Maybe<Array<Template>>;
  timeline?: Maybe<HackathonTimeline>;
};

export type FixOrScoreVote = FixedVote | ScoreVote;

export type FixedVote = {
  __typename?: 'FixedVote';
  /** 是否增长 */
  isIncrease?: Maybe<Scalars['Boolean']['output']>;
  /** judge投票数 */
  judgeVotes?: Maybe<Scalars['Int']['output']>;
  /** 排名 */
  rank?: Maybe<Scalars['Int']['output']>;
  /** 总投票数 */
  totalVotes?: Maybe<Scalars['Int']['output']>;
  /** 用户投票数 */
  userVotes?: Maybe<Scalars['Int']['output']>;
};

export type FloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type FloatNullableWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatNullableFilter>;
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedFloatNullableFilter>;
  _min?: InputMaybe<NestedFloatNullableFilter>;
  _sum?: InputMaybe<NestedFloatNullableFilter>;
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type GlobalSearchResponse = {
  __typename?: 'GlobalSearchResponse';
  blog?: Maybe<Array<Blog>>;
  coLearning?: Maybe<Array<CoLearning>>;
  course?: Maybe<Array<Course>>;
  ecosystem?: Maybe<Array<EcosystemInfo>>;
  event?: Maybe<Array<Events>>;
  glossary?: Maybe<Array<Glossary>>;
  hackathon?: Maybe<Array<HackathonExtend>>;
  job?: Maybe<Array<JobStation>>;
  learningTrack?: Maybe<Array<LearningTrack>>;
  project?: Maybe<Array<ProjectExtend>>;
};

export type Glossary = {
  __typename?: 'Glossary';
  alias?: Maybe<Scalars['String']['output']>;
  categories?: Maybe<Array<Scalars['String']['output']>>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorName: Scalars['String']['output'];
  description: Scalars['String']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  publishDate: Scalars['DateTime']['output'];
  title: Scalars['String']['output'];
  top: Scalars['Int']['output'];
  tracks?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type GlossaryAvgAggregate = {
  __typename?: 'GlossaryAvgAggregate';
  duration?: Maybe<Scalars['Float']['output']>;
  top?: Maybe<Scalars['Float']['output']>;
};

export type GlossaryAvgAggregateInput = {
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlossaryAvgOrderByAggregateInput = {
  duration?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
};

export type GlossaryCountAggregate = {
  __typename?: 'GlossaryCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  categories: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorName: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  publishDate: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  top: Scalars['Int']['output'];
  tracks: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type GlossaryCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  categories?: InputMaybe<Scalars['Boolean']['input']>;
  content?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  creatorName?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  publishDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
  tracks?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlossaryCountOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  categories?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  tracks?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type GlossaryCreateInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<GlossaryCreatecategoriesInput>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorName: Scalars['String']['input'];
  description: Scalars['String']['input'];
  duration: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['String']['input'];
  publishDate?: InputMaybe<Scalars['DateTime']['input']>;
  title: Scalars['String']['input'];
  top?: InputMaybe<Scalars['Int']['input']>;
  tracks?: InputMaybe<GlossaryCreatetracksInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type GlossaryCreateManyInput = {
  alias?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<GlossaryCreatecategoriesInput>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorName: Scalars['String']['input'];
  description: Scalars['String']['input'];
  duration: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  image: Scalars['String']['input'];
  publishDate?: InputMaybe<Scalars['DateTime']['input']>;
  title: Scalars['String']['input'];
  top?: InputMaybe<Scalars['Int']['input']>;
  tracks?: InputMaybe<GlossaryCreatetracksInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type GlossaryCreatecategoriesInput = {
  set: Array<Scalars['String']['input']>;
};

export type GlossaryCreatetracksInput = {
  set: Array<Scalars['String']['input']>;
};

export type GlossaryGroupBy = {
  __typename?: 'GlossaryGroupBy';
  _avg?: Maybe<GlossaryAvgAggregate>;
  _count?: Maybe<GlossaryCountAggregate>;
  _max?: Maybe<GlossaryMaxAggregate>;
  _min?: Maybe<GlossaryMinAggregate>;
  _sum?: Maybe<GlossarySumAggregate>;
  alias?: Maybe<Scalars['String']['output']>;
  categories?: Maybe<Array<Scalars['String']['output']>>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorName: Scalars['String']['output'];
  description: Scalars['String']['output'];
  duration: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  image: Scalars['String']['output'];
  publishDate: Scalars['DateTime']['output'];
  title: Scalars['String']['output'];
  top: Scalars['Int']['output'];
  tracks?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type GlossaryListPaginated = {
  __typename?: 'GlossaryListPaginated';
  data?: Maybe<Array<Glossary>>;
  total: Scalars['Int']['output'];
};

export type GlossaryMaxAggregate = {
  __typename?: 'GlossaryMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorName?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  publishDate?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  top?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type GlossaryMaxAggregateInput = {
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  creatorName?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  publishDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlossaryMaxOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type GlossaryMinAggregate = {
  __typename?: 'GlossaryMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorName?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  duration?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  publishDate?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  top?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type GlossaryMinAggregateInput = {
  alias?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  creatorName?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  publishDate?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlossaryMinOrderByAggregateInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type GlossaryOrderByWithAggregationInput = {
  _avg?: InputMaybe<GlossaryAvgOrderByAggregateInput>;
  _count?: InputMaybe<GlossaryCountOrderByAggregateInput>;
  _max?: InputMaybe<GlossaryMaxOrderByAggregateInput>;
  _min?: InputMaybe<GlossaryMinOrderByAggregateInput>;
  _sum?: InputMaybe<GlossarySumOrderByAggregateInput>;
  alias?: InputMaybe<SortOrderInput>;
  categories?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  tracks?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type GlossaryOrderByWithRelationInput = {
  alias?: InputMaybe<SortOrderInput>;
  categories?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorName?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  duration?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  publishDate?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
  tracks?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum GlossaryScalarFieldEnum {
  Alias = 'alias',
  Categories = 'categories',
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatorName = 'creatorName',
  Description = 'description',
  Duration = 'duration',
  Id = 'id',
  Image = 'image',
  PublishDate = 'publishDate',
  Title = 'title',
  Top = 'top',
  Tracks = 'tracks',
  UpdatedAt = 'updatedAt'
}

export type GlossaryScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<GlossaryScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<GlossaryScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<GlossaryScalarWhereWithAggregatesInput>>;
  alias?: InputMaybe<StringNullableWithAggregatesFilter>;
  categories?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  creatorName?: InputMaybe<StringWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  duration?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  image?: InputMaybe<StringWithAggregatesFilter>;
  publishDate?: InputMaybe<DateTimeWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  top?: InputMaybe<IntWithAggregatesFilter>;
  tracks?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type GlossarySumAggregate = {
  __typename?: 'GlossarySumAggregate';
  duration?: Maybe<Scalars['Int']['output']>;
  top?: Maybe<Scalars['Int']['output']>;
};

export type GlossarySumAggregateInput = {
  duration?: InputMaybe<Scalars['Boolean']['input']>;
  top?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GlossarySumOrderByAggregateInput = {
  duration?: InputMaybe<SortOrder>;
  top?: InputMaybe<SortOrder>;
};

export type GlossaryUpdateInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  categories?: InputMaybe<GlossaryUpdatecategoriesInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorName?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  duration?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  publishDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  top?: InputMaybe<IntFieldUpdateOperationsInput>;
  tracks?: InputMaybe<GlossaryUpdatetracksInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type GlossaryUpdateManyMutationInput = {
  alias?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  categories?: InputMaybe<GlossaryUpdatecategoriesInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorName?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  duration?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<StringFieldUpdateOperationsInput>;
  publishDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  top?: InputMaybe<IntFieldUpdateOperationsInput>;
  tracks?: InputMaybe<GlossaryUpdatetracksInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type GlossaryUpdatecategoriesInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type GlossaryUpdatetracksInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type GlossaryWhereInput = {
  AND?: InputMaybe<Array<GlossaryWhereInput>>;
  NOT?: InputMaybe<Array<GlossaryWhereInput>>;
  OR?: InputMaybe<Array<GlossaryWhereInput>>;
  alias?: InputMaybe<StringNullableFilter>;
  categories?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorName?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  duration?: InputMaybe<IntFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  top?: InputMaybe<IntFilter>;
  tracks?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type GlossaryWhereUniqueInput = {
  AND?: InputMaybe<Array<GlossaryWhereInput>>;
  NOT?: InputMaybe<Array<GlossaryWhereInput>>;
  OR?: InputMaybe<Array<GlossaryWhereInput>>;
  alias?: InputMaybe<Scalars['String']['input']>;
  categories?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorName?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  duration?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  top?: InputMaybe<IntFilter>;
  tracks?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

/** Disturbition Growth 过滤条件 */
export enum GrowthFilter {
  All = 'ALL',
  Month = 'MONTH',
  Week = 'WEEK'
}

/** Disturbition Growth 类型 */
export enum GrowthType {
  Distribution = 'DISTRIBUTION',
  PageView = 'PAGE_VIEW',
  Registration = 'REGISTRATION',
  Submiision = 'SUBMIISION',
  Winner = 'WINNER'
}

export type Hackathon = {
  __typename?: 'Hackathon';
  _count: HackathonCount;
  alias: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  enable: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  info?: Maybe<HackathonInfo>;
  judge?: Maybe<Array<HackathonJudge>>;
  language?: Maybe<Language>;
  links?: Maybe<HackathonLinks>;
  name: Scalars['String']['output'];
  pageView: Scalars['Int']['output'];
  participants: Scalars['Int']['output'];
  priority: Scalars['Int']['output'];
  progress?: Maybe<Array<Scalars['String']['output']>>;
  rewards?: Maybe<Array<HackathonRewards>>;
  sectionSequences?: Maybe<Array<Scalars['String']['output']>>;
  status: Scalars['String']['output'];
  timeline?: Maybe<HackathonTimeline>;
  todos?: Maybe<Array<HackathonTodo>>;
  totalRewards?: Maybe<Scalars['Decimal']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type HackathonAnnouncement = {
  __typename?: 'HackathonAnnouncement';
  actualTime?: Maybe<Scalars['DateTime']['output']>;
  createdAt: Scalars['DateTime']['output'];
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  message?: Maybe<Scalars['String']['output']>;
  plannedTime?: Maybe<Scalars['DateTime']['output']>;
  receivers?: Maybe<Scalars['String']['output']>;
  rightNow?: Maybe<Scalars['Boolean']['output']>;
  status: Scalars['String']['output'];
  timezone?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type HackathonAnnouncementAvgAggregate = {
  __typename?: 'HackathonAnnouncementAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type HackathonAnnouncementCountAggregate = {
  __typename?: 'HackathonAnnouncementCountAggregate';
  _all: Scalars['Int']['output'];
  actualTime: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  message: Scalars['Int']['output'];
  plannedTime: Scalars['Int']['output'];
  receivers: Scalars['Int']['output'];
  rightNow: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  timezone: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type HackathonAnnouncementInput = {
  action?: InputMaybe<Scalars['String']['input']>;
  hackathonId: Scalars['String']['input'];
  /** hackathonAnnouncement id */
  id?: InputMaybe<Scalars['Int']['input']>;
  message?: InputMaybe<Scalars['String']['input']>;
  plannedTime?: InputMaybe<Scalars['DateTime']['input']>;
  receivers?: InputMaybe<Array<Scalars['String']['input']>>;
  rightNow?: InputMaybe<Scalars['Boolean']['input']>;
  timezone?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonAnnouncementMaxAggregate = {
  __typename?: 'HackathonAnnouncementMaxAggregate';
  actualTime?: Maybe<Scalars['DateTime']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  plannedTime?: Maybe<Scalars['DateTime']['output']>;
  receivers?: Maybe<Scalars['String']['output']>;
  rightNow?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  timezone?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonAnnouncementMinAggregate = {
  __typename?: 'HackathonAnnouncementMinAggregate';
  actualTime?: Maybe<Scalars['DateTime']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  message?: Maybe<Scalars['String']['output']>;
  plannedTime?: Maybe<Scalars['DateTime']['output']>;
  receivers?: Maybe<Scalars['String']['output']>;
  rightNow?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  timezone?: Maybe<Scalars['String']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonAnnouncementSumAggregate = {
  __typename?: 'HackathonAnnouncementSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type HackathonAvgAggregate = {
  __typename?: 'HackathonAvgAggregate';
  pageView?: Maybe<Scalars['Float']['output']>;
  participants?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['Float']['output']>;
  totalRewards?: Maybe<Scalars['Decimal']['output']>;
};

export type HackathonCount = {
  __typename?: 'HackathonCount';
  judge: Scalars['Int']['output'];
  rewards: Scalars['Int']['output'];
  todos: Scalars['Int']['output'];
};

export type HackathonCountAggregate = {
  __typename?: 'HackathonCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  enable: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  language: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  pageView: Scalars['Int']['output'];
  participants: Scalars['Int']['output'];
  priority: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  sectionSequences: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  totalRewards: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type HackathonCreateNestedOneWithoutRewardsInput = {
  connect?: InputMaybe<HackathonWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonCreateOrConnectWithoutRewardsInput>;
  create?: InputMaybe<HackathonCreateWithoutRewardsInput>;
};

export type HackathonCreateOrConnectWithoutRewardsInput = {
  create: HackathonCreateWithoutRewardsInput;
  where: HackathonWhereUniqueInput;
};

export type HackathonCreateWithoutRewardsInput = {
  alias: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<HackathonInfoCreateNestedOneWithoutHackathonInput>;
  judge?: InputMaybe<HackathonJudgeCreateNestedManyWithoutHackathonInput>;
  language?: InputMaybe<Language>;
  links?: InputMaybe<HackathonLinksCreateNestedOneWithoutHackathonInput>;
  name: Scalars['String']['input'];
  pageView?: InputMaybe<Scalars['Int']['input']>;
  participants?: InputMaybe<Scalars['Int']['input']>;
  priority?: InputMaybe<Scalars['Int']['input']>;
  progress?: InputMaybe<HackathonCreateprogressInput>;
  sectionSequences?: InputMaybe<HackathonCreatesectionSequencesInput>;
  status?: InputMaybe<Scalars['String']['input']>;
  timeline?: InputMaybe<HackathonTimelineCreateNestedOneWithoutHackathonInput>;
  todos?: InputMaybe<HackathonTodoCreateNestedManyWithoutHackathonInput>;
  totalRewards?: InputMaybe<Scalars['Decimal']['input']>;
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HackathonCreateprogressInput = {
  set: Array<Scalars['String']['input']>;
};

export type HackathonCreatesectionSequencesInput = {
  set: Array<Scalars['String']['input']>;
};

export type HackathonExperience = {
  __typename?: 'HackathonExperience';
  createdAt: Scalars['DateTime']['output'];
  description: Scalars['String']['output'];
  endDate?: Maybe<Scalars['DateTime']['output']>;
  hackathonName: Scalars['String']['output'];
  id: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  projectTitle?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  userProfile: UserProfile;
  winner: Scalars['Boolean']['output'];
};

export type HackathonExperienceCountAggregate = {
  __typename?: 'HackathonExperienceCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  endDate: Scalars['Int']['output'];
  hackathonName: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  projectTitle: Scalars['Int']['output'];
  role: Scalars['Int']['output'];
  startDate: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  winner: Scalars['Int']['output'];
};

export type HackathonExperienceCreateManyUserProfileInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonName: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  projectTitle?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  winner?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonExperienceCreateManyUserProfileInputEnvelope = {
  data: Array<HackathonExperienceCreateManyUserProfileInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonExperienceCreateNestedManyWithoutUserProfileInput = {
  connect?: InputMaybe<Array<HackathonExperienceWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonExperienceCreateOrConnectWithoutUserProfileInput>>;
  create?: InputMaybe<Array<HackathonExperienceCreateWithoutUserProfileInput>>;
  createMany?: InputMaybe<HackathonExperienceCreateManyUserProfileInputEnvelope>;
};

export type HackathonExperienceCreateOrConnectWithoutUserProfileInput = {
  create: HackathonExperienceCreateWithoutUserProfileInput;
  where: HackathonExperienceWhereUniqueInput;
};

export type HackathonExperienceCreateWithoutUserProfileInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonName: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  projectTitle?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['DateTime']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  winner?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonExperienceListRelationFilter = {
  every?: InputMaybe<HackathonExperienceWhereInput>;
  none?: InputMaybe<HackathonExperienceWhereInput>;
  some?: InputMaybe<HackathonExperienceWhereInput>;
};

export type HackathonExperienceMaxAggregate = {
  __typename?: 'HackathonExperienceMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  projectTitle?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  winner?: Maybe<Scalars['Boolean']['output']>;
};

export type HackathonExperienceMinAggregate = {
  __typename?: 'HackathonExperienceMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  projectTitle?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  winner?: Maybe<Scalars['Boolean']['output']>;
};

export type HackathonExperienceOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonExperienceScalarWhereInput = {
  AND?: InputMaybe<Array<HackathonExperienceScalarWhereInput>>;
  NOT?: InputMaybe<Array<HackathonExperienceScalarWhereInput>>;
  OR?: InputMaybe<Array<HackathonExperienceScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  hackathonName?: InputMaybe<StringFilter>;
  id?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringNullableFilter>;
  projectTitle?: InputMaybe<StringNullableFilter>;
  role?: InputMaybe<StringNullableFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  winner?: InputMaybe<BoolFilter>;
};

export type HackathonExperienceUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  endDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  projectTitle?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  role?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  winner?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type HackathonExperienceUpdateManyWithWhereWithoutUserProfileInput = {
  data: HackathonExperienceUpdateManyMutationInput;
  where: HackathonExperienceScalarWhereInput;
};

export type HackathonExperienceUpdateManyWithoutUserProfileNestedInput = {
  connect?: InputMaybe<Array<HackathonExperienceWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonExperienceCreateOrConnectWithoutUserProfileInput>>;
  create?: InputMaybe<Array<HackathonExperienceCreateWithoutUserProfileInput>>;
  createMany?: InputMaybe<HackathonExperienceCreateManyUserProfileInputEnvelope>;
  delete?: InputMaybe<Array<HackathonExperienceWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonExperienceScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonExperienceWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonExperienceWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonExperienceUpdateWithWhereUniqueWithoutUserProfileInput>>;
  updateMany?: InputMaybe<Array<HackathonExperienceUpdateManyWithWhereWithoutUserProfileInput>>;
  upsert?: InputMaybe<Array<HackathonExperienceUpsertWithWhereUniqueWithoutUserProfileInput>>;
};

export type HackathonExperienceUpdateWithWhereUniqueWithoutUserProfileInput = {
  data: HackathonExperienceUpdateWithoutUserProfileInput;
  where: HackathonExperienceWhereUniqueInput;
};

export type HackathonExperienceUpdateWithoutUserProfileInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  endDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  projectTitle?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  role?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  winner?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type HackathonExperienceUpsertWithWhereUniqueWithoutUserProfileInput = {
  create: HackathonExperienceCreateWithoutUserProfileInput;
  update: HackathonExperienceUpdateWithoutUserProfileInput;
  where: HackathonExperienceWhereUniqueInput;
};

export type HackathonExperienceWhereInput = {
  AND?: InputMaybe<Array<HackathonExperienceWhereInput>>;
  NOT?: InputMaybe<Array<HackathonExperienceWhereInput>>;
  OR?: InputMaybe<Array<HackathonExperienceWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  hackathonName?: InputMaybe<StringFilter>;
  id?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringNullableFilter>;
  projectTitle?: InputMaybe<StringNullableFilter>;
  role?: InputMaybe<StringNullableFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  userProfile?: InputMaybe<UserProfileRelationFilter>;
  winner?: InputMaybe<BoolFilter>;
};

export type HackathonExperienceWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonExperienceWhereInput>>;
  NOT?: InputMaybe<Array<HackathonExperienceWhereInput>>;
  OR?: InputMaybe<Array<HackathonExperienceWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  hackathonName?: InputMaybe<StringFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<StringNullableFilter>;
  projectTitle?: InputMaybe<StringNullableFilter>;
  role?: InputMaybe<StringNullableFilter>;
  startDate?: InputMaybe<DateTimeNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  userProfile?: InputMaybe<UserProfileRelationFilter>;
  winner?: InputMaybe<BoolFilter>;
};

export type HackathonExtend = {
  __typename?: 'HackathonExtend';
  _count: HackathonCount;
  alias: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  currentStatus?: Maybe<Array<HackathonJoinState>>;
  ecosystem?: Maybe<Array<EcosystemExtend>>;
  enable: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  info?: Maybe<HackathonInfo>;
  judge?: Maybe<Array<HackathonJudgeUpdate>>;
  language?: Maybe<Language>;
  links?: Maybe<HackathonLinks>;
  members?: Maybe<Array<HackathonMemberExtend>>;
  name: Scalars['String']['output'];
  pageView: Scalars['Int']['output'];
  participants: Scalars['Int']['output'];
  priority: Scalars['Int']['output'];
  progress?: Maybe<Array<Scalars['String']['output']>>;
  projectCount?: Maybe<Scalars['Float']['output']>;
  rewards?: Maybe<Array<HackathonRewards>>;
  sectionSequences?: Maybe<Array<Scalars['String']['output']>>;
  status: Scalars['String']['output'];
  submitted?: Maybe<Array<Project>>;
  timeline?: Maybe<HackathonTimeline>;
  todos?: Maybe<Array<HackathonTodoExtend>>;
  totalRewards?: Maybe<Scalars['Decimal']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type HackathonInfo = {
  __typename?: 'HackathonInfo';
  address?: Maybe<Scalars['String']['output']>;
  allowSubmission: Scalars['Boolean']['output'];
  application: Scalars['JSON']['output'];
  conduct?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['JSON']['output']>;
  ecosystem?: Maybe<Array<Scalars['String']['output']>>;
  hackathon: Hackathon;
  host?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  levelTag?: Maybe<Scalars['String']['output']>;
  mode?: Maybe<HackathonMode>;
  sections: Scalars['JSON']['output'];
  submission: Scalars['JSON']['output'];
};

export type HackathonInfoCountAggregate = {
  __typename?: 'HackathonInfoCountAggregate';
  _all: Scalars['Int']['output'];
  address: Scalars['Int']['output'];
  allowSubmission: Scalars['Int']['output'];
  application: Scalars['Int']['output'];
  conduct: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  ecosystem: Scalars['Int']['output'];
  host: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  intro: Scalars['Int']['output'];
  levelTag: Scalars['Int']['output'];
  mode: Scalars['Int']['output'];
  sections: Scalars['Int']['output'];
  submission: Scalars['Int']['output'];
};

export type HackathonInfoCreateNestedOneWithoutHackathonInput = {
  connect?: InputMaybe<HackathonInfoWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonInfoCreateOrConnectWithoutHackathonInput>;
  create?: InputMaybe<HackathonInfoCreateWithoutHackathonInput>;
};

export type HackathonInfoCreateOrConnectWithoutHackathonInput = {
  create: HackathonInfoCreateWithoutHackathonInput;
  where: HackathonInfoWhereUniqueInput;
};

export type HackathonInfoCreateWithoutHackathonInput = {
  address?: InputMaybe<Scalars['String']['input']>;
  allowSubmission?: InputMaybe<Scalars['Boolean']['input']>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  conduct?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  ecosystem?: InputMaybe<HackathonInfoCreateecosystemInput>;
  host?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  levelTag?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<HackathonMode>;
  sections?: InputMaybe<Scalars['JSON']['input']>;
  submission?: InputMaybe<Scalars['JSON']['input']>;
};

export type HackathonInfoCreateecosystemInput = {
  set: Array<Scalars['String']['input']>;
};

export type HackathonInfoMaxAggregate = {
  __typename?: 'HackathonInfoMaxAggregate';
  address?: Maybe<Scalars['String']['output']>;
  allowSubmission?: Maybe<Scalars['Boolean']['output']>;
  conduct?: Maybe<Scalars['String']['output']>;
  host?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  levelTag?: Maybe<Scalars['String']['output']>;
  mode?: Maybe<HackathonMode>;
};

export type HackathonInfoMinAggregate = {
  __typename?: 'HackathonInfoMinAggregate';
  address?: Maybe<Scalars['String']['output']>;
  allowSubmission?: Maybe<Scalars['Boolean']['output']>;
  conduct?: Maybe<Scalars['String']['output']>;
  host?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  levelTag?: Maybe<Scalars['String']['output']>;
  mode?: Maybe<HackathonMode>;
};

export type HackathonInfoNullableRelationFilter = {
  is?: InputMaybe<HackathonInfoWhereInput>;
  isNot?: InputMaybe<HackathonInfoWhereInput>;
};

export type HackathonInfoOrderByWithRelationInput = {
  address?: InputMaybe<SortOrderInput>;
  allowSubmission?: InputMaybe<SortOrder>;
  application?: InputMaybe<SortOrder>;
  conduct?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrderInput>;
  ecosystem?: InputMaybe<SortOrder>;
  hackathon?: InputMaybe<HackathonOrderByWithRelationInput>;
  host?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrderInput>;
  intro?: InputMaybe<SortOrderInput>;
  levelTag?: InputMaybe<SortOrderInput>;
  mode?: InputMaybe<SortOrderInput>;
  sections?: InputMaybe<SortOrder>;
  submission?: InputMaybe<SortOrder>;
};

export type HackathonInfoUpdateOneWithoutHackathonNestedInput = {
  connect?: InputMaybe<HackathonInfoWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonInfoCreateOrConnectWithoutHackathonInput>;
  create?: InputMaybe<HackathonInfoCreateWithoutHackathonInput>;
  delete?: InputMaybe<HackathonInfoWhereInput>;
  disconnect?: InputMaybe<HackathonInfoWhereInput>;
  update?: InputMaybe<HackathonInfoUpdateToOneWithWhereWithoutHackathonInput>;
  upsert?: InputMaybe<HackathonInfoUpsertWithoutHackathonInput>;
};

export type HackathonInfoUpdateToOneWithWhereWithoutHackathonInput = {
  data: HackathonInfoUpdateWithoutHackathonInput;
  where?: InputMaybe<HackathonInfoWhereInput>;
};

export type HackathonInfoUpdateWithoutHackathonInput = {
  address?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  allowSubmission?: InputMaybe<BoolFieldUpdateOperationsInput>;
  application?: InputMaybe<Scalars['JSON']['input']>;
  conduct?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  ecosystem?: InputMaybe<HackathonInfoUpdateecosystemInput>;
  host?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  image?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelTag?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  mode?: InputMaybe<NullableEnumHackathonModeFieldUpdateOperationsInput>;
  sections?: InputMaybe<Scalars['JSON']['input']>;
  submission?: InputMaybe<Scalars['JSON']['input']>;
};

export type HackathonInfoUpdateecosystemInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type HackathonInfoUpsertWithoutHackathonInput = {
  create: HackathonInfoCreateWithoutHackathonInput;
  update: HackathonInfoUpdateWithoutHackathonInput;
  where?: InputMaybe<HackathonInfoWhereInput>;
};

export type HackathonInfoWhereInput = {
  AND?: InputMaybe<Array<HackathonInfoWhereInput>>;
  NOT?: InputMaybe<Array<HackathonInfoWhereInput>>;
  OR?: InputMaybe<Array<HackathonInfoWhereInput>>;
  address?: InputMaybe<StringNullableFilter>;
  allowSubmission?: InputMaybe<BoolFilter>;
  application?: InputMaybe<JsonFilter>;
  conduct?: InputMaybe<StringNullableFilter>;
  description?: InputMaybe<JsonNullableFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  host?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringNullableFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  levelTag?: InputMaybe<StringNullableFilter>;
  mode?: InputMaybe<EnumHackathonModeNullableFilter>;
  sections?: InputMaybe<JsonFilter>;
  submission?: InputMaybe<JsonFilter>;
};

export type HackathonInfoWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonInfoWhereInput>>;
  NOT?: InputMaybe<Array<HackathonInfoWhereInput>>;
  OR?: InputMaybe<Array<HackathonInfoWhereInput>>;
  address?: InputMaybe<StringNullableFilter>;
  allowSubmission?: InputMaybe<BoolFilter>;
  application?: InputMaybe<JsonFilter>;
  conduct?: InputMaybe<StringNullableFilter>;
  description?: InputMaybe<JsonNullableFilter>;
  ecosystem?: InputMaybe<StringNullableListFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  host?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<StringNullableFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  levelTag?: InputMaybe<StringNullableFilter>;
  mode?: InputMaybe<EnumHackathonModeNullableFilter>;
  sections?: InputMaybe<JsonFilter>;
  submission?: InputMaybe<JsonFilter>;
};

export enum HackathonJoinState {
  Register = 'REGISTER',
  RegisterClose = 'REGISTER_CLOSE',
  RegisterNotOpen = 'REGISTER_NOT_OPEN',
  Submit = 'SUBMIT',
  SubmitClose = 'SUBMIT_CLOSE',
  SubmitNotOpen = 'SUBMIT_NOT_OPEN',
  UserApprovalConfirm = 'USER_APPROVAL_CONFIRM',
  UserApprovalPass = 'USER_APPROVAL_PASS',
  UserContinueRegister = 'USER_CONTINUE_REGISTER',
  UserContinueSubmit = 'USER_CONTINUE_SUBMIT',
  UserNotRegister = 'USER_NOT_REGISTER',
  UserNotSubmit = 'USER_NOT_SUBMIT',
  UserPendingApproval = 'USER_PENDING_APPROVAL',
  UserRegistered = 'USER_REGISTERED',
  UserReject = 'USER_REJECT',
  UserSubmitted = 'USER_SUBMITTED',
  UserWaitlist = 'USER_WAITLIST',
  VoteNotOpen = 'VOTE_NOT_OPEN',
  Voting = 'VOTING',
  VotingClose = 'VOTING_CLOSE'
}

export type HackathonJudge = {
  __typename?: 'HackathonJudge';
  announce: Scalars['Boolean']['output'];
  criteria?: Maybe<Scalars['JSON']['output']>;
  disableJudge?: Maybe<Scalars['Boolean']['output']>;
  hackathon: Hackathon;
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  judgeAccounts?: Maybe<Array<Scalars['String']['output']>>;
  judgeMode?: Maybe<Scalars['String']['output']>;
  judgeProjectVote?: Maybe<Scalars['Int']['output']>;
  judgeTotalVote?: Maybe<Scalars['Int']['output']>;
  projectJudgeCount?: Maybe<Scalars['Int']['output']>;
  reward: HackathonRewards;
  rewardName: Scalars['String']['output'];
  setWinner: Scalars['Boolean']['output'];
  totalVote?: Maybe<Scalars['Int']['output']>;
  userTags?: Maybe<Array<Scalars['String']['output']>>;
  userTotalVotes: Scalars['Int']['output'];
  userUnitVotes: Scalars['Int']['output'];
  voteMode?: Maybe<Scalars['String']['output']>;
  votesProportion?: Maybe<Array<Scalars['Int']['output']>>;
};

export type HackathonJudgeAvgAggregate = {
  __typename?: 'HackathonJudgeAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  judgeProjectVote?: Maybe<Scalars['Float']['output']>;
  judgeTotalVote?: Maybe<Scalars['Float']['output']>;
  projectJudgeCount?: Maybe<Scalars['Float']['output']>;
  totalVote?: Maybe<Scalars['Float']['output']>;
  userTotalVotes?: Maybe<Scalars['Float']['output']>;
  userUnitVotes?: Maybe<Scalars['Float']['output']>;
  votesProportion?: Maybe<Scalars['Float']['output']>;
};

export type HackathonJudgeCountAggregate = {
  __typename?: 'HackathonJudgeCountAggregate';
  _all: Scalars['Int']['output'];
  announce: Scalars['Int']['output'];
  criteria: Scalars['Int']['output'];
  disableJudge: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  judgeAccounts: Scalars['Int']['output'];
  judgeMode: Scalars['Int']['output'];
  judgeProjectVote: Scalars['Int']['output'];
  judgeTotalVote: Scalars['Int']['output'];
  projectJudgeCount: Scalars['Int']['output'];
  rewardName: Scalars['Int']['output'];
  setWinner: Scalars['Int']['output'];
  totalVote: Scalars['Int']['output'];
  userTags: Scalars['Int']['output'];
  userTotalVotes: Scalars['Int']['output'];
  userUnitVotes: Scalars['Int']['output'];
  voteMode: Scalars['Int']['output'];
  votesProportion: Scalars['Int']['output'];
};

export type HackathonJudgeCreateManyHackathonInput = {
  announce?: InputMaybe<Scalars['Boolean']['input']>;
  criteria?: InputMaybe<Scalars['JSON']['input']>;
  disableJudge?: InputMaybe<Scalars['Boolean']['input']>;
  id: Scalars['Int']['input'];
  judgeAccounts?: InputMaybe<HackathonJudgeCreatejudgeAccountsInput>;
  judgeMode?: InputMaybe<Scalars['String']['input']>;
  judgeProjectVote?: InputMaybe<Scalars['Int']['input']>;
  judgeTotalVote?: InputMaybe<Scalars['Int']['input']>;
  projectJudgeCount?: InputMaybe<Scalars['Int']['input']>;
  rewardName: Scalars['String']['input'];
  setWinner?: InputMaybe<Scalars['Boolean']['input']>;
  totalVote?: InputMaybe<Scalars['Int']['input']>;
  userTags?: InputMaybe<HackathonJudgeCreateuserTagsInput>;
  userTotalVotes?: InputMaybe<Scalars['Int']['input']>;
  userUnitVotes?: InputMaybe<Scalars['Int']['input']>;
  voteMode?: InputMaybe<Scalars['String']['input']>;
  votesProportion?: InputMaybe<HackathonJudgeCreatevotesProportionInput>;
};

export type HackathonJudgeCreateManyHackathonInputEnvelope = {
  data: Array<HackathonJudgeCreateManyHackathonInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonJudgeCreateNestedManyWithoutHackathonInput = {
  connect?: InputMaybe<Array<HackathonJudgeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonJudgeCreateOrConnectWithoutHackathonInput>>;
  create?: InputMaybe<Array<HackathonJudgeCreateWithoutHackathonInput>>;
  createMany?: InputMaybe<HackathonJudgeCreateManyHackathonInputEnvelope>;
};

export type HackathonJudgeCreateOrConnectWithoutHackathonInput = {
  create: HackathonJudgeCreateWithoutHackathonInput;
  where: HackathonJudgeWhereUniqueInput;
};

export type HackathonJudgeCreateWithoutHackathonInput = {
  announce?: InputMaybe<Scalars['Boolean']['input']>;
  criteria?: InputMaybe<Scalars['JSON']['input']>;
  disableJudge?: InputMaybe<Scalars['Boolean']['input']>;
  judgeAccounts?: InputMaybe<HackathonJudgeCreatejudgeAccountsInput>;
  judgeMode?: InputMaybe<Scalars['String']['input']>;
  judgeProjectVote?: InputMaybe<Scalars['Int']['input']>;
  judgeTotalVote?: InputMaybe<Scalars['Int']['input']>;
  projectJudgeCount?: InputMaybe<Scalars['Int']['input']>;
  reward: HackathonRewardsCreateNestedOneWithoutJudgeInput;
  rewardName: Scalars['String']['input'];
  setWinner?: InputMaybe<Scalars['Boolean']['input']>;
  totalVote?: InputMaybe<Scalars['Int']['input']>;
  userTags?: InputMaybe<HackathonJudgeCreateuserTagsInput>;
  userTotalVotes?: InputMaybe<Scalars['Int']['input']>;
  userUnitVotes?: InputMaybe<Scalars['Int']['input']>;
  voteMode?: InputMaybe<Scalars['String']['input']>;
  votesProportion?: InputMaybe<HackathonJudgeCreatevotesProportionInput>;
};

export type HackathonJudgeCreatejudgeAccountsInput = {
  set: Array<Scalars['String']['input']>;
};

export type HackathonJudgeCreateuserTagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type HackathonJudgeCreatevotesProportionInput = {
  set: Array<Scalars['Int']['input']>;
};

export type HackathonJudgeExtend = {
  __typename?: 'HackathonJudgeExtend';
  announce: Scalars['Boolean']['output'];
  criteria?: Maybe<Scalars['JSON']['output']>;
  disableJudge?: Maybe<Scalars['Boolean']['output']>;
  hackathon: Hackathon;
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  /** 参加人员的信息 */
  judgeAccountInfo?: Maybe<Array<JudgeAccountInfo>>;
  judgeAccounts?: Maybe<Array<Scalars['String']['output']>>;
  judgeMode?: Maybe<Scalars['String']['output']>;
  judgeProjectVote?: Maybe<Scalars['Int']['output']>;
  judgeTotalVote?: Maybe<Scalars['Int']['output']>;
  /** 参加的项目数 */
  projectCount?: Maybe<Scalars['Int']['output']>;
  projectJudgeCount?: Maybe<Scalars['Int']['output']>;
  reward: HackathonRewards;
  rewardName: Scalars['String']['output'];
  setWinner: Scalars['Boolean']['output'];
  totalVote?: Maybe<Scalars['Int']['output']>;
  userTags?: Maybe<Array<Scalars['String']['output']>>;
  userTotalVotes: Scalars['Int']['output'];
  userUnitVotes: Scalars['Int']['output'];
  voteMode?: Maybe<Scalars['String']['output']>;
  votesProportion?: Maybe<Array<Scalars['Int']['output']>>;
};

export type HackathonJudgeListRelationFilter = {
  every?: InputMaybe<HackathonJudgeWhereInput>;
  none?: InputMaybe<HackathonJudgeWhereInput>;
  some?: InputMaybe<HackathonJudgeWhereInput>;
};

export type HackathonJudgeMaxAggregate = {
  __typename?: 'HackathonJudgeMaxAggregate';
  announce?: Maybe<Scalars['Boolean']['output']>;
  disableJudge?: Maybe<Scalars['Boolean']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  judgeMode?: Maybe<Scalars['String']['output']>;
  judgeProjectVote?: Maybe<Scalars['Int']['output']>;
  judgeTotalVote?: Maybe<Scalars['Int']['output']>;
  projectJudgeCount?: Maybe<Scalars['Int']['output']>;
  rewardName?: Maybe<Scalars['String']['output']>;
  setWinner?: Maybe<Scalars['Boolean']['output']>;
  totalVote?: Maybe<Scalars['Int']['output']>;
  userTotalVotes?: Maybe<Scalars['Int']['output']>;
  userUnitVotes?: Maybe<Scalars['Int']['output']>;
  voteMode?: Maybe<Scalars['String']['output']>;
};

export type HackathonJudgeMinAggregate = {
  __typename?: 'HackathonJudgeMinAggregate';
  announce?: Maybe<Scalars['Boolean']['output']>;
  disableJudge?: Maybe<Scalars['Boolean']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  judgeMode?: Maybe<Scalars['String']['output']>;
  judgeProjectVote?: Maybe<Scalars['Int']['output']>;
  judgeTotalVote?: Maybe<Scalars['Int']['output']>;
  projectJudgeCount?: Maybe<Scalars['Int']['output']>;
  rewardName?: Maybe<Scalars['String']['output']>;
  setWinner?: Maybe<Scalars['Boolean']['output']>;
  totalVote?: Maybe<Scalars['Int']['output']>;
  userTotalVotes?: Maybe<Scalars['Int']['output']>;
  userUnitVotes?: Maybe<Scalars['Int']['output']>;
  voteMode?: Maybe<Scalars['String']['output']>;
};

export type HackathonJudgeNullableRelationFilter = {
  is?: InputMaybe<HackathonJudgeWhereInput>;
  isNot?: InputMaybe<HackathonJudgeWhereInput>;
};

export type HackathonJudgeOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonJudgeOrderByWithRelationInput = {
  announce?: InputMaybe<SortOrder>;
  criteria?: InputMaybe<SortOrderInput>;
  disableJudge?: InputMaybe<SortOrderInput>;
  hackathon?: InputMaybe<HackathonOrderByWithRelationInput>;
  hackathonId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  judgeAccounts?: InputMaybe<SortOrder>;
  judgeMode?: InputMaybe<SortOrderInput>;
  judgeProjectVote?: InputMaybe<SortOrderInput>;
  judgeTotalVote?: InputMaybe<SortOrderInput>;
  projectJudgeCount?: InputMaybe<SortOrderInput>;
  reward?: InputMaybe<HackathonRewardsOrderByWithRelationInput>;
  rewardName?: InputMaybe<SortOrder>;
  setWinner?: InputMaybe<SortOrder>;
  totalVote?: InputMaybe<SortOrderInput>;
  userTags?: InputMaybe<SortOrder>;
  userTotalVotes?: InputMaybe<SortOrder>;
  userUnitVotes?: InputMaybe<SortOrder>;
  voteMode?: InputMaybe<SortOrderInput>;
  votesProportion?: InputMaybe<SortOrder>;
};

export enum HackathonJudgeScalarFieldEnum {
  Announce = 'announce',
  Criteria = 'criteria',
  DisableJudge = 'disableJudge',
  HackathonId = 'hackathonId',
  Id = 'id',
  JudgeAccounts = 'judgeAccounts',
  JudgeMode = 'judgeMode',
  JudgeProjectVote = 'judgeProjectVote',
  JudgeTotalVote = 'judgeTotalVote',
  ProjectJudgeCount = 'projectJudgeCount',
  RewardName = 'rewardName',
  SetWinner = 'setWinner',
  TotalVote = 'totalVote',
  UserTags = 'userTags',
  UserTotalVotes = 'userTotalVotes',
  UserUnitVotes = 'userUnitVotes',
  VoteMode = 'voteMode',
  VotesProportion = 'votesProportion'
}

export type HackathonJudgeScalarWhereInput = {
  AND?: InputMaybe<Array<HackathonJudgeScalarWhereInput>>;
  NOT?: InputMaybe<Array<HackathonJudgeScalarWhereInput>>;
  OR?: InputMaybe<Array<HackathonJudgeScalarWhereInput>>;
  announce?: InputMaybe<BoolFilter>;
  criteria?: InputMaybe<JsonNullableFilter>;
  disableJudge?: InputMaybe<BoolNullableFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  judgeAccounts?: InputMaybe<StringNullableListFilter>;
  judgeMode?: InputMaybe<StringNullableFilter>;
  judgeProjectVote?: InputMaybe<IntNullableFilter>;
  judgeTotalVote?: InputMaybe<IntNullableFilter>;
  projectJudgeCount?: InputMaybe<IntNullableFilter>;
  rewardName?: InputMaybe<StringFilter>;
  setWinner?: InputMaybe<BoolFilter>;
  totalVote?: InputMaybe<IntNullableFilter>;
  userTags?: InputMaybe<StringNullableListFilter>;
  userTotalVotes?: InputMaybe<IntFilter>;
  userUnitVotes?: InputMaybe<IntFilter>;
  voteMode?: InputMaybe<StringNullableFilter>;
  votesProportion?: InputMaybe<IntNullableListFilter>;
};

export type HackathonJudgeSumAggregate = {
  __typename?: 'HackathonJudgeSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  judgeProjectVote?: Maybe<Scalars['Int']['output']>;
  judgeTotalVote?: Maybe<Scalars['Int']['output']>;
  projectJudgeCount?: Maybe<Scalars['Int']['output']>;
  totalVote?: Maybe<Scalars['Int']['output']>;
  userTotalVotes?: Maybe<Scalars['Int']['output']>;
  userUnitVotes?: Maybe<Scalars['Int']['output']>;
  votesProportion?: Maybe<Array<Scalars['Int']['output']>>;
};

export type HackathonJudgeUpdate = {
  __typename?: 'HackathonJudgeUpdate';
  announce: Scalars['Boolean']['output'];
  criteria?: Maybe<Scalars['JSON']['output']>;
  disableJudge?: Maybe<Scalars['Boolean']['output']>;
  hackathon: Hackathon;
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  judgeAccounts?: Maybe<Array<JudgeAccount>>;
  judgeMode?: Maybe<Scalars['String']['output']>;
  judgeProjectVote?: Maybe<Scalars['Int']['output']>;
  judgeTotalVote?: Maybe<Scalars['Int']['output']>;
  projectJudgeCount?: Maybe<Scalars['Int']['output']>;
  reward: HackathonRewards;
  rewardName: Scalars['String']['output'];
  setWinner: Scalars['Boolean']['output'];
  totalVote?: Maybe<Scalars['Int']['output']>;
  userTags?: Maybe<Array<Scalars['String']['output']>>;
  userTotalVotes: Scalars['Int']['output'];
  userUnitVotes: Scalars['Int']['output'];
  voteMode?: Maybe<Scalars['String']['output']>;
  votesProportion?: Maybe<Array<Scalars['Int']['output']>>;
};

export type HackathonJudgeUpdateInputExtend = {
  announce?: InputMaybe<BoolFieldUpdateOperationsInput>;
  criteria?: InputMaybe<Scalars['JSON']['input']>;
  disableJudge?: InputMaybe<NullableBoolFieldUpdateOperationsInput>;
  judgeMode?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  judgeProjectVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  judgeTotalVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  projectJudgeCount?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  reward?: InputMaybe<HackathonRewardsUpdateOneRequiredWithoutJudgeNestedInput>;
  rewardName?: InputMaybe<StringFieldUpdateOperationsInput>;
  setWinner?: InputMaybe<BoolFieldUpdateOperationsInput>;
  totalVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  userTags?: InputMaybe<Array<UserJudgeType>>;
  userTotalVotes?: InputMaybe<IntFieldUpdateOperationsInput>;
  voteMode?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  votesProportion?: InputMaybe<HackathonJudgeUpdatevotesProportionInput>;
};

export type HackathonJudgeUpdateManyMutationInput = {
  announce?: InputMaybe<BoolFieldUpdateOperationsInput>;
  criteria?: InputMaybe<Scalars['JSON']['input']>;
  disableJudge?: InputMaybe<NullableBoolFieldUpdateOperationsInput>;
  judgeAccounts?: InputMaybe<HackathonJudgeUpdatejudgeAccountsInput>;
  judgeMode?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  judgeProjectVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  judgeTotalVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  projectJudgeCount?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  rewardName?: InputMaybe<StringFieldUpdateOperationsInput>;
  setWinner?: InputMaybe<BoolFieldUpdateOperationsInput>;
  totalVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  userTags?: InputMaybe<HackathonJudgeUpdateuserTagsInput>;
  userTotalVotes?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUnitVotes?: InputMaybe<IntFieldUpdateOperationsInput>;
  voteMode?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  votesProportion?: InputMaybe<HackathonJudgeUpdatevotesProportionInput>;
};

export type HackathonJudgeUpdateManyWithWhereWithoutHackathonInput = {
  data: HackathonJudgeUpdateManyMutationInput;
  where: HackathonJudgeScalarWhereInput;
};

export type HackathonJudgeUpdateManyWithoutHackathonNestedInput = {
  connect?: InputMaybe<Array<HackathonJudgeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonJudgeCreateOrConnectWithoutHackathonInput>>;
  create?: InputMaybe<Array<HackathonJudgeCreateWithoutHackathonInput>>;
  createMany?: InputMaybe<HackathonJudgeCreateManyHackathonInputEnvelope>;
  delete?: InputMaybe<Array<HackathonJudgeWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonJudgeScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonJudgeWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonJudgeWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonJudgeUpdateWithWhereUniqueWithoutHackathonInput>>;
  updateMany?: InputMaybe<Array<HackathonJudgeUpdateManyWithWhereWithoutHackathonInput>>;
  upsert?: InputMaybe<Array<HackathonJudgeUpsertWithWhereUniqueWithoutHackathonInput>>;
};

export type HackathonJudgeUpdateWithWhereUniqueWithoutHackathonInput = {
  data: HackathonJudgeUpdateWithoutHackathonInput;
  where: HackathonJudgeWhereUniqueInput;
};

export type HackathonJudgeUpdateWithoutHackathonInput = {
  announce?: InputMaybe<BoolFieldUpdateOperationsInput>;
  criteria?: InputMaybe<Scalars['JSON']['input']>;
  disableJudge?: InputMaybe<NullableBoolFieldUpdateOperationsInput>;
  judgeAccounts?: InputMaybe<HackathonJudgeUpdatejudgeAccountsInput>;
  judgeMode?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  judgeProjectVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  judgeTotalVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  projectJudgeCount?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  reward?: InputMaybe<HackathonRewardsUpdateOneRequiredWithoutJudgeNestedInput>;
  rewardName?: InputMaybe<StringFieldUpdateOperationsInput>;
  setWinner?: InputMaybe<BoolFieldUpdateOperationsInput>;
  totalVote?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  userTags?: InputMaybe<HackathonJudgeUpdateuserTagsInput>;
  userTotalVotes?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUnitVotes?: InputMaybe<IntFieldUpdateOperationsInput>;
  voteMode?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  votesProportion?: InputMaybe<HackathonJudgeUpdatevotesProportionInput>;
};

export type HackathonJudgeUpdatejudgeAccountsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type HackathonJudgeUpdateuserTagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type HackathonJudgeUpdatevotesProportionInput = {
  push?: InputMaybe<Array<Scalars['Int']['input']>>;
  set?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type HackathonJudgeUpsertWithWhereUniqueWithoutHackathonInput = {
  create: HackathonJudgeCreateWithoutHackathonInput;
  update: HackathonJudgeUpdateWithoutHackathonInput;
  where: HackathonJudgeWhereUniqueInput;
};

export type HackathonJudgeVote = {
  __typename?: 'HackathonJudgeVote';
  alias: Scalars['String']['output'];
  currentStatus?: Maybe<Array<HackathonJoinState>>;
  id: Scalars['String']['output'];
  info?: Maybe<HackathonInfo>;
  judge?: Maybe<HackathonJudgeUpdate>;
  language?: Maybe<Language>;
  links?: Maybe<HackathonLinks>;
  name: Scalars['String']['output'];
  participants: Scalars['Int']['output'];
  projects?: Maybe<Array<ProjectJudgeDetail>>;
  remainingVotes?: Maybe<UserRemainingVotes>;
  reward?: Maybe<HackathonRewardsExtend>;
  timeline?: Maybe<HackathonTimeline>;
  track?: Maybe<Scalars['String']['output']>;
};

export type HackathonJudgeWhereInput = {
  AND?: InputMaybe<Array<HackathonJudgeWhereInput>>;
  NOT?: InputMaybe<Array<HackathonJudgeWhereInput>>;
  OR?: InputMaybe<Array<HackathonJudgeWhereInput>>;
  announce?: InputMaybe<BoolFilter>;
  criteria?: InputMaybe<JsonNullableFilter>;
  disableJudge?: InputMaybe<BoolNullableFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  judgeAccounts?: InputMaybe<StringNullableListFilter>;
  judgeMode?: InputMaybe<StringNullableFilter>;
  judgeProjectVote?: InputMaybe<IntNullableFilter>;
  judgeTotalVote?: InputMaybe<IntNullableFilter>;
  projectJudgeCount?: InputMaybe<IntNullableFilter>;
  reward?: InputMaybe<HackathonRewardsRelationFilter>;
  rewardName?: InputMaybe<StringFilter>;
  setWinner?: InputMaybe<BoolFilter>;
  totalVote?: InputMaybe<IntNullableFilter>;
  userTags?: InputMaybe<StringNullableListFilter>;
  userTotalVotes?: InputMaybe<IntFilter>;
  userUnitVotes?: InputMaybe<IntFilter>;
  voteMode?: InputMaybe<StringNullableFilter>;
  votesProportion?: InputMaybe<IntNullableListFilter>;
};

export type HackathonJudgeWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonJudgeWhereInput>>;
  NOT?: InputMaybe<Array<HackathonJudgeWhereInput>>;
  OR?: InputMaybe<Array<HackathonJudgeWhereInput>>;
  announce?: InputMaybe<BoolFilter>;
  criteria?: InputMaybe<JsonNullableFilter>;
  disableJudge?: InputMaybe<BoolNullableFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  judgeAccounts?: InputMaybe<StringNullableListFilter>;
  judgeMode?: InputMaybe<StringNullableFilter>;
  judgeProjectVote?: InputMaybe<IntNullableFilter>;
  judgeTotalVote?: InputMaybe<IntNullableFilter>;
  projectJudgeCount?: InputMaybe<IntNullableFilter>;
  reward?: InputMaybe<HackathonRewardsRelationFilter>;
  rewardName?: InputMaybe<StringFilter>;
  setWinner?: InputMaybe<BoolFilter>;
  totalVote?: InputMaybe<IntNullableFilter>;
  userTags?: InputMaybe<StringNullableListFilter>;
  userTotalVotes?: InputMaybe<IntFilter>;
  userUnitVotes?: InputMaybe<IntFilter>;
  voteMode?: InputMaybe<StringNullableFilter>;
  votesProportion?: InputMaybe<IntNullableListFilter>;
};

export type HackathonLinks = {
  __typename?: 'HackathonLinks';
  email: Scalars['String']['output'];
  hackathon: Hackathon;
  id: Scalars['String']['output'];
  links: Scalars['JSON']['output'];
  website?: Maybe<Scalars['String']['output']>;
};

export type HackathonLinksCountAggregate = {
  __typename?: 'HackathonLinksCountAggregate';
  _all: Scalars['Int']['output'];
  email: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  links: Scalars['Int']['output'];
  website: Scalars['Int']['output'];
};

export type HackathonLinksCreateNestedOneWithoutHackathonInput = {
  connect?: InputMaybe<HackathonLinksWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonLinksCreateOrConnectWithoutHackathonInput>;
  create?: InputMaybe<HackathonLinksCreateWithoutHackathonInput>;
};

export type HackathonLinksCreateOrConnectWithoutHackathonInput = {
  create: HackathonLinksCreateWithoutHackathonInput;
  where: HackathonLinksWhereUniqueInput;
};

export type HackathonLinksCreateWithoutHackathonInput = {
  email: Scalars['String']['input'];
  links?: InputMaybe<Scalars['JSON']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonLinksMaxAggregate = {
  __typename?: 'HackathonLinksMaxAggregate';
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};

export type HackathonLinksMinAggregate = {
  __typename?: 'HackathonLinksMinAggregate';
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};

export type HackathonLinksNullableRelationFilter = {
  is?: InputMaybe<HackathonLinksWhereInput>;
  isNot?: InputMaybe<HackathonLinksWhereInput>;
};

export type HackathonLinksOrderByWithRelationInput = {
  email?: InputMaybe<SortOrder>;
  hackathon?: InputMaybe<HackathonOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  links?: InputMaybe<SortOrder>;
  website?: InputMaybe<SortOrderInput>;
};

export type HackathonLinksUpdateOneWithoutHackathonNestedInput = {
  connect?: InputMaybe<HackathonLinksWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonLinksCreateOrConnectWithoutHackathonInput>;
  create?: InputMaybe<HackathonLinksCreateWithoutHackathonInput>;
  delete?: InputMaybe<HackathonLinksWhereInput>;
  disconnect?: InputMaybe<HackathonLinksWhereInput>;
  update?: InputMaybe<HackathonLinksUpdateToOneWithWhereWithoutHackathonInput>;
  upsert?: InputMaybe<HackathonLinksUpsertWithoutHackathonInput>;
};

export type HackathonLinksUpdateToOneWithWhereWithoutHackathonInput = {
  data: HackathonLinksUpdateWithoutHackathonInput;
  where?: InputMaybe<HackathonLinksWhereInput>;
};

export type HackathonLinksUpdateWithoutHackathonInput = {
  email?: InputMaybe<StringFieldUpdateOperationsInput>;
  links?: InputMaybe<Scalars['JSON']['input']>;
  website?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type HackathonLinksUpsertWithoutHackathonInput = {
  create: HackathonLinksCreateWithoutHackathonInput;
  update: HackathonLinksUpdateWithoutHackathonInput;
  where?: InputMaybe<HackathonLinksWhereInput>;
};

export type HackathonLinksWhereInput = {
  AND?: InputMaybe<Array<HackathonLinksWhereInput>>;
  NOT?: InputMaybe<Array<HackathonLinksWhereInput>>;
  OR?: InputMaybe<Array<HackathonLinksWhereInput>>;
  email?: InputMaybe<StringFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  links?: InputMaybe<JsonFilter>;
  website?: InputMaybe<StringNullableFilter>;
};

export type HackathonLinksWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonLinksWhereInput>>;
  NOT?: InputMaybe<Array<HackathonLinksWhereInput>>;
  OR?: InputMaybe<Array<HackathonLinksWhereInput>>;
  email?: InputMaybe<StringFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  links?: InputMaybe<JsonFilter>;
  website?: InputMaybe<StringNullableFilter>;
};

export type HackathonListPaginated = {
  __typename?: 'HackathonListPaginated';
  data?: Maybe<Array<HackathonExtend>>;
  total: Scalars['Int']['output'];
};

export type HackathonMaxAggregate = {
  __typename?: 'HackathonMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  name?: Maybe<Scalars['String']['output']>;
  pageView?: Maybe<Scalars['Int']['output']>;
  participants?: Maybe<Scalars['Int']['output']>;
  priority?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  totalRewards?: Maybe<Scalars['Decimal']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonMember = {
  __typename?: 'HackathonMember';
  allowContract: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  hackathonId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  info: Scalars['JSON']['output'];
  isRegister: Scalars['Boolean']['output'];
  joinState: Scalars['String']['output'];
  profile?: Maybe<UserProfile>;
  projectId?: Maybe<Scalars['String']['output']>;
  registerConfirm: Scalars['Boolean']['output'];
  status: Scalars['String']['output'];
  team?: Maybe<HackathonTeam>;
  teamId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type HackathonMemberCountAggregate = {
  __typename?: 'HackathonMemberCountAggregate';
  _all: Scalars['Int']['output'];
  allowContract: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  info: Scalars['Int']['output'];
  isRegister: Scalars['Int']['output'];
  joinState: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  registerConfirm: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  teamId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  utmSource: Scalars['Int']['output'];
};

export type HackathonMemberCreateManyProfileInput = {
  allowContract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<Scalars['Boolean']['input']>;
  joinState?: InputMaybe<Scalars['String']['input']>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  registerConfirm?: InputMaybe<Scalars['Boolean']['input']>;
  status: Scalars['String']['input'];
  teamId?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonMemberCreateManyProfileInputEnvelope = {
  data: Array<HackathonMemberCreateManyProfileInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonMemberCreateManyTeamInput = {
  allowContract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<Scalars['Boolean']['input']>;
  joinState?: InputMaybe<Scalars['String']['input']>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  registerConfirm?: InputMaybe<Scalars['Boolean']['input']>;
  status: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonMemberCreateManyTeamInputEnvelope = {
  data: Array<HackathonMemberCreateManyTeamInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonMemberCreateNestedManyWithoutProfileInput = {
  connect?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonMemberCreateOrConnectWithoutProfileInput>>;
  create?: InputMaybe<Array<HackathonMemberCreateWithoutProfileInput>>;
  createMany?: InputMaybe<HackathonMemberCreateManyProfileInputEnvelope>;
};

export type HackathonMemberCreateNestedManyWithoutTeamInput = {
  connect?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonMemberCreateOrConnectWithoutTeamInput>>;
  create?: InputMaybe<Array<HackathonMemberCreateWithoutTeamInput>>;
  createMany?: InputMaybe<HackathonMemberCreateManyTeamInputEnvelope>;
};

export type HackathonMemberCreateOrConnectWithoutProfileInput = {
  create: HackathonMemberCreateWithoutProfileInput;
  where: HackathonMemberWhereUniqueInput;
};

export type HackathonMemberCreateOrConnectWithoutTeamInput = {
  create: HackathonMemberCreateWithoutTeamInput;
  where: HackathonMemberWhereUniqueInput;
};

export type HackathonMemberCreateWithoutProfileInput = {
  allowContract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<Scalars['Boolean']['input']>;
  joinState?: InputMaybe<Scalars['String']['input']>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  registerConfirm?: InputMaybe<Scalars['Boolean']['input']>;
  status: Scalars['String']['input'];
  team?: InputMaybe<HackathonTeamCreateNestedOneWithoutMembersInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonMemberCreateWithoutTeamInput = {
  allowContract?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<Scalars['Boolean']['input']>;
  joinState?: InputMaybe<Scalars['String']['input']>;
  profile?: InputMaybe<UserProfileCreateNestedOneWithoutHackathonMemberInput>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  registerConfirm?: InputMaybe<Scalars['Boolean']['input']>;
  status: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonMemberExtend = {
  __typename?: 'HackathonMemberExtend';
  allowContract: Scalars['Boolean']['output'];
  avatar?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  discord?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  github?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  info: Scalars['JSON']['output'];
  isRegister: Scalars['Boolean']['output'];
  isSubmitted?: Maybe<Scalars['Boolean']['output']>;
  joinState: Scalars['String']['output'];
  linkedIn?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  /** 在队伍中的成员类型: Leader Member */
  memberType?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  profile?: Maybe<UserProfile>;
  projectId?: Maybe<Scalars['String']['output']>;
  registerConfirm: Scalars['Boolean']['output'];
  skills?: Maybe<Array<Scalars['String']['output']>>;
  status: Scalars['String']['output'];
  team?: Maybe<HackathonTeam>;
  teamId?: Maybe<Scalars['String']['output']>;
  telegram?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  username?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
  weChat?: Maybe<Scalars['String']['output']>;
};

export type HackathonMemberExtendListPaginated = {
  __typename?: 'HackathonMemberExtendListPaginated';
  data?: Maybe<Array<HackathonMemberExtend>>;
  total: Scalars['Int']['output'];
};

/** JoinStatus of the hackathon member */
export enum HackathonMemberJoinStatus {
  Approved = 'APPROVED',
  Decline = 'DECLINE',
  Draft = 'DRAFT',
  Pending = 'PENDING',
  Waiting = 'WAITING'
}

export type HackathonMemberListRelationFilter = {
  every?: InputMaybe<HackathonMemberWhereInput>;
  none?: InputMaybe<HackathonMemberWhereInput>;
  some?: InputMaybe<HackathonMemberWhereInput>;
};

export type HackathonMemberMaxAggregate = {
  __typename?: 'HackathonMemberMaxAggregate';
  allowContract?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isRegister?: Maybe<Scalars['Boolean']['output']>;
  joinState?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  registerConfirm?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  teamId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type HackathonMemberMinAggregate = {
  __typename?: 'HackathonMemberMinAggregate';
  allowContract?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isRegister?: Maybe<Scalars['Boolean']['output']>;
  joinState?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  registerConfirm?: Maybe<Scalars['Boolean']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  teamId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type HackathonMemberOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonMemberOrderByWithRelationInput = {
  allowContract?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  hackathonId?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrder>;
  isRegister?: InputMaybe<SortOrder>;
  joinState?: InputMaybe<SortOrder>;
  profile?: InputMaybe<UserProfileOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrderInput>;
  registerConfirm?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  team?: InputMaybe<HackathonTeamOrderByWithRelationInput>;
  teamId?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  utmSource?: InputMaybe<SortOrderInput>;
};

export enum HackathonMemberScalarFieldEnum {
  AllowContract = 'allowContract',
  CreatedAt = 'createdAt',
  HackathonId = 'hackathonId',
  Id = 'id',
  Info = 'info',
  IsRegister = 'isRegister',
  JoinState = 'joinState',
  ProjectId = 'projectId',
  RegisterConfirm = 'registerConfirm',
  Status = 'status',
  TeamId = 'teamId',
  UpdatedAt = 'updatedAt',
  UserId = 'userId',
  UtmSource = 'utmSource'
}

export type HackathonMemberScalarWhereInput = {
  AND?: InputMaybe<Array<HackathonMemberScalarWhereInput>>;
  NOT?: InputMaybe<Array<HackathonMemberScalarWhereInput>>;
  OR?: InputMaybe<Array<HackathonMemberScalarWhereInput>>;
  allowContract?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<JsonFilter>;
  isRegister?: InputMaybe<BoolFilter>;
  joinState?: InputMaybe<StringFilter>;
  projectId?: InputMaybe<UuidNullableFilter>;
  registerConfirm?: InputMaybe<BoolFilter>;
  status?: InputMaybe<StringFilter>;
  teamId?: InputMaybe<UuidNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  utmSource?: InputMaybe<StringNullableFilter>;
};

export type HackathonMemberUpdateManyMutationInput = {
  allowContract?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<BoolFieldUpdateOperationsInput>;
  joinState?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  registerConfirm?: InputMaybe<BoolFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  utmSource?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type HackathonMemberUpdateManyWithWhereWithoutProfileInput = {
  data: HackathonMemberUpdateManyMutationInput;
  where: HackathonMemberScalarWhereInput;
};

export type HackathonMemberUpdateManyWithWhereWithoutTeamInput = {
  data: HackathonMemberUpdateManyMutationInput;
  where: HackathonMemberScalarWhereInput;
};

export type HackathonMemberUpdateManyWithoutProfileNestedInput = {
  connect?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonMemberCreateOrConnectWithoutProfileInput>>;
  create?: InputMaybe<Array<HackathonMemberCreateWithoutProfileInput>>;
  createMany?: InputMaybe<HackathonMemberCreateManyProfileInputEnvelope>;
  delete?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonMemberScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonMemberUpdateWithWhereUniqueWithoutProfileInput>>;
  updateMany?: InputMaybe<Array<HackathonMemberUpdateManyWithWhereWithoutProfileInput>>;
  upsert?: InputMaybe<Array<HackathonMemberUpsertWithWhereUniqueWithoutProfileInput>>;
};

export type HackathonMemberUpdateManyWithoutTeamNestedInput = {
  connect?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonMemberCreateOrConnectWithoutTeamInput>>;
  create?: InputMaybe<Array<HackathonMemberCreateWithoutTeamInput>>;
  createMany?: InputMaybe<HackathonMemberCreateManyTeamInputEnvelope>;
  delete?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonMemberScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonMemberWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonMemberUpdateWithWhereUniqueWithoutTeamInput>>;
  updateMany?: InputMaybe<Array<HackathonMemberUpdateManyWithWhereWithoutTeamInput>>;
  upsert?: InputMaybe<Array<HackathonMemberUpsertWithWhereUniqueWithoutTeamInput>>;
};

export type HackathonMemberUpdateWithWhereUniqueWithoutProfileInput = {
  data: HackathonMemberUpdateWithoutProfileInput;
  where: HackathonMemberWhereUniqueInput;
};

export type HackathonMemberUpdateWithWhereUniqueWithoutTeamInput = {
  data: HackathonMemberUpdateWithoutTeamInput;
  where: HackathonMemberWhereUniqueInput;
};

export type HackathonMemberUpdateWithoutProfileInput = {
  allowContract?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<BoolFieldUpdateOperationsInput>;
  joinState?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  registerConfirm?: InputMaybe<BoolFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  team?: InputMaybe<HackathonTeamUpdateOneWithoutMembersNestedInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  utmSource?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type HackathonMemberUpdateWithoutTeamInput = {
  allowContract?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<BoolFieldUpdateOperationsInput>;
  joinState?: InputMaybe<StringFieldUpdateOperationsInput>;
  profile?: InputMaybe<UserProfileUpdateOneWithoutHackathonMemberNestedInput>;
  projectId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  registerConfirm?: InputMaybe<BoolFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  utmSource?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type HackathonMemberUpsertWithWhereUniqueWithoutProfileInput = {
  create: HackathonMemberCreateWithoutProfileInput;
  update: HackathonMemberUpdateWithoutProfileInput;
  where: HackathonMemberWhereUniqueInput;
};

export type HackathonMemberUpsertWithWhereUniqueWithoutTeamInput = {
  create: HackathonMemberCreateWithoutTeamInput;
  update: HackathonMemberUpdateWithoutTeamInput;
  where: HackathonMemberWhereUniqueInput;
};

export type HackathonMemberWhereInput = {
  AND?: InputMaybe<Array<HackathonMemberWhereInput>>;
  NOT?: InputMaybe<Array<HackathonMemberWhereInput>>;
  OR?: InputMaybe<Array<HackathonMemberWhereInput>>;
  allowContract?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<JsonFilter>;
  isRegister?: InputMaybe<BoolFilter>;
  joinState?: InputMaybe<StringFilter>;
  profile?: InputMaybe<UserProfileNullableRelationFilter>;
  projectId?: InputMaybe<UuidNullableFilter>;
  registerConfirm?: InputMaybe<BoolFilter>;
  status?: InputMaybe<StringFilter>;
  team?: InputMaybe<HackathonTeamNullableRelationFilter>;
  teamId?: InputMaybe<UuidNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  utmSource?: InputMaybe<StringNullableFilter>;
};

export type HackathonMemberWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonMemberWhereInput>>;
  NOT?: InputMaybe<Array<HackathonMemberWhereInput>>;
  OR?: InputMaybe<Array<HackathonMemberWhereInput>>;
  allowContract?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<JsonFilter>;
  isRegister?: InputMaybe<BoolFilter>;
  joinState?: InputMaybe<StringFilter>;
  profile?: InputMaybe<UserProfileNullableRelationFilter>;
  projectId?: InputMaybe<UuidNullableFilter>;
  registerConfirm?: InputMaybe<BoolFilter>;
  status?: InputMaybe<StringFilter>;
  team?: InputMaybe<HackathonTeamNullableRelationFilter>;
  teamId?: InputMaybe<UuidNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  utmSource?: InputMaybe<StringNullableFilter>;
};

export type HackathonMinAggregate = {
  __typename?: 'HackathonMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  name?: Maybe<Scalars['String']['output']>;
  pageView?: Maybe<Scalars['Int']['output']>;
  participants?: Maybe<Scalars['Int']['output']>;
  priority?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  totalRewards?: Maybe<Scalars['Decimal']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export enum HackathonMode {
  Hybrid = 'HYBRID',
  Online = 'ONLINE'
}

export type HackathonNullableRelationFilter = {
  is?: InputMaybe<HackathonWhereInput>;
  isNot?: InputMaybe<HackathonWhereInput>;
};

export type HackathonOrderByWithRelationInput = {
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrderInput>;
  enable?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<HackathonInfoOrderByWithRelationInput>;
  judge?: InputMaybe<HackathonJudgeOrderByRelationAggregateInput>;
  language?: InputMaybe<SortOrderInput>;
  links?: InputMaybe<HackathonLinksOrderByWithRelationInput>;
  name?: InputMaybe<SortOrder>;
  pageView?: InputMaybe<SortOrder>;
  participants?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  rewards?: InputMaybe<HackathonRewardsOrderByRelationAggregateInput>;
  sectionSequences?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  timeline?: InputMaybe<HackathonTimelineOrderByWithRelationInput>;
  todos?: InputMaybe<HackathonTodoOrderByRelationAggregateInput>;
  totalRewards?: InputMaybe<SortOrderInput>;
  track?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type HackathonRelationFilter = {
  is?: InputMaybe<HackathonWhereInput>;
  isNot?: InputMaybe<HackathonWhereInput>;
};

export type HackathonRewardCreateInputExtend = {
  currency: Scalars['String']['input'];
  mode: Scalars['String']['input'];
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  rewards?: InputMaybe<Scalars['JSON']['input']>;
  rule?: InputMaybe<Scalars['JSON']['input']>;
  totalRewards?: InputMaybe<Scalars['Int']['input']>;
};

export type HackathonRewardUpdateInputExtend = {
  currency?: InputMaybe<StringFieldUpdateOperationsInput>;
  mode?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  rewards?: InputMaybe<Scalars['JSON']['input']>;
  rule?: InputMaybe<Scalars['JSON']['input']>;
  totalRewards?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
};

export type HackathonRewards = {
  __typename?: 'HackathonRewards';
  currency: Scalars['String']['output'];
  hackathon: Hackathon;
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  judge?: Maybe<HackathonJudge>;
  mode: Scalars['String']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  rewards?: Maybe<Scalars['JSON']['output']>;
  rule?: Maybe<Scalars['JSON']['output']>;
  totalRewards?: Maybe<Scalars['Int']['output']>;
};

export type HackathonRewardsAvgAggregate = {
  __typename?: 'HackathonRewardsAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
  totalRewards?: Maybe<Scalars['Float']['output']>;
};

export type HackathonRewardsCountAggregate = {
  __typename?: 'HackathonRewardsCountAggregate';
  _all: Scalars['Int']['output'];
  currency: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  mode: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  rewards: Scalars['Int']['output'];
  rule: Scalars['Int']['output'];
  totalRewards: Scalars['Int']['output'];
};

export type HackathonRewardsCreateNestedOneWithoutJudgeInput = {
  connect?: InputMaybe<HackathonRewardsWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonRewardsCreateOrConnectWithoutJudgeInput>;
  create?: InputMaybe<HackathonRewardsCreateWithoutJudgeInput>;
};

export type HackathonRewardsCreateOrConnectWithoutJudgeInput = {
  create: HackathonRewardsCreateWithoutJudgeInput;
  where: HackathonRewardsWhereUniqueInput;
};

export type HackathonRewardsCreateWithoutJudgeInput = {
  currency: Scalars['String']['input'];
  hackathon: HackathonCreateNestedOneWithoutRewardsInput;
  mode: Scalars['String']['input'];
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  rewards?: InputMaybe<Scalars['JSON']['input']>;
  rule?: InputMaybe<Scalars['JSON']['input']>;
  totalRewards?: InputMaybe<Scalars['Int']['input']>;
};

export type HackathonRewardsExtend = {
  __typename?: 'HackathonRewardsExtend';
  currency: Scalars['String']['output'];
  hackathon: Hackathon;
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  judge?: Maybe<Array<HackathonJudgeUpdate>>;
  mode: Scalars['String']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  projects?: Maybe<Array<ProjectExtend>>;
  rewards?: Maybe<Scalars['JSON']['output']>;
  rule?: Maybe<Scalars['JSON']['output']>;
  totalRewards?: Maybe<Scalars['Int']['output']>;
};

export type HackathonRewardsListRelationFilter = {
  every?: InputMaybe<HackathonRewardsWhereInput>;
  none?: InputMaybe<HackathonRewardsWhereInput>;
  some?: InputMaybe<HackathonRewardsWhereInput>;
};

export type HackathonRewardsMaxAggregate = {
  __typename?: 'HackathonRewardsMaxAggregate';
  currency?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  totalRewards?: Maybe<Scalars['Int']['output']>;
};

export type HackathonRewardsMinAggregate = {
  __typename?: 'HackathonRewardsMinAggregate';
  currency?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mode?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  totalRewards?: Maybe<Scalars['Int']['output']>;
};

export type HackathonRewardsOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonRewardsOrderByWithRelationInput = {
  currency?: InputMaybe<SortOrder>;
  hackathon?: InputMaybe<HackathonOrderByWithRelationInput>;
  hackathonId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  judge?: InputMaybe<HackathonJudgeOrderByWithRelationInput>;
  mode?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  rewards?: InputMaybe<SortOrderInput>;
  rule?: InputMaybe<SortOrderInput>;
  totalRewards?: InputMaybe<SortOrderInput>;
};

export type HackathonRewardsRelationFilter = {
  is?: InputMaybe<HackathonRewardsWhereInput>;
  isNot?: InputMaybe<HackathonRewardsWhereInput>;
};

export type HackathonRewardsSumAggregate = {
  __typename?: 'HackathonRewardsSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  totalRewards?: Maybe<Scalars['Int']['output']>;
};

export type HackathonRewardsUpdateOneRequiredWithoutJudgeNestedInput = {
  connect?: InputMaybe<HackathonRewardsWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonRewardsCreateOrConnectWithoutJudgeInput>;
  create?: InputMaybe<HackathonRewardsCreateWithoutJudgeInput>;
  update?: InputMaybe<HackathonRewardsUpdateToOneWithWhereWithoutJudgeInput>;
  upsert?: InputMaybe<HackathonRewardsUpsertWithoutJudgeInput>;
};

export type HackathonRewardsUpdateToOneWithWhereWithoutJudgeInput = {
  data: HackathonRewardsUpdateWithoutJudgeInput;
  where?: InputMaybe<HackathonRewardsWhereInput>;
};

export type HackathonRewardsUpdateWithoutJudgeInput = {
  currency?: InputMaybe<StringFieldUpdateOperationsInput>;
  hackathon?: InputMaybe<HackathonUpdateOneRequiredWithoutRewardsNestedInput>;
  mode?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  rewards?: InputMaybe<Scalars['JSON']['input']>;
  rule?: InputMaybe<Scalars['JSON']['input']>;
  totalRewards?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
};

export type HackathonRewardsUpsertWithoutJudgeInput = {
  create: HackathonRewardsCreateWithoutJudgeInput;
  update: HackathonRewardsUpdateWithoutJudgeInput;
  where?: InputMaybe<HackathonRewardsWhereInput>;
};

export type HackathonRewardsWhereInput = {
  AND?: InputMaybe<Array<HackathonRewardsWhereInput>>;
  NOT?: InputMaybe<Array<HackathonRewardsWhereInput>>;
  OR?: InputMaybe<Array<HackathonRewardsWhereInput>>;
  currency?: InputMaybe<StringFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  judge?: InputMaybe<HackathonJudgeNullableRelationFilter>;
  mode?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  rewards?: InputMaybe<JsonNullableFilter>;
  rule?: InputMaybe<JsonNullableFilter>;
  totalRewards?: InputMaybe<IntNullableFilter>;
};

export type HackathonRewardsWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonRewardsWhereInput>>;
  NOT?: InputMaybe<Array<HackathonRewardsWhereInput>>;
  OR?: InputMaybe<Array<HackathonRewardsWhereInput>>;
  currency?: InputMaybe<StringFilter>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  judge?: InputMaybe<HackathonJudgeNullableRelationFilter>;
  mode?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  rewards?: InputMaybe<JsonNullableFilter>;
  rule?: InputMaybe<JsonNullableFilter>;
  totalRewards?: InputMaybe<IntNullableFilter>;
};

export enum HackathonScalarFieldEnum {
  Alias = 'alias',
  CreatedAt = 'createdAt',
  CreatorId = 'creatorId',
  Enable = 'enable',
  Id = 'id',
  Language = 'language',
  Name = 'name',
  PageView = 'pageView',
  Participants = 'participants',
  Priority = 'priority',
  Progress = 'progress',
  SectionSequences = 'sectionSequences',
  Status = 'status',
  TotalRewards = 'totalRewards',
  Track = 'track',
  UpdatedAt = 'updatedAt'
}

export type HackathonSchedule = {
  __typename?: 'HackathonSchedule';
  HackathonTimeline?: Maybe<HackathonTimeline>;
  closeTime: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  eventName: Scalars['String']['output'];
  eventURL?: Maybe<Scalars['String']['output']>;
  hackathonTimelineId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  openTime: Scalars['DateTime']['output'];
  type: Scalars['String']['output'];
};

export type HackathonScheduleCountAggregate = {
  __typename?: 'HackathonScheduleCountAggregate';
  _all: Scalars['Int']['output'];
  closeTime: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  eventName: Scalars['Int']['output'];
  eventURL: Scalars['Int']['output'];
  hackathonTimelineId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  openTime: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
};

export type HackathonScheduleCreateInputExtend = {
  closeTime: Scalars['DateTime']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  eventName: Scalars['String']['input'];
  eventURL?: InputMaybe<Scalars['String']['input']>;
  openTime: Scalars['DateTime']['input'];
  type: HackathonScheduleType;
};

export type HackathonScheduleCreateManyHackathonTimelineInput = {
  closeTime: Scalars['DateTime']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  eventName: Scalars['String']['input'];
  eventURL?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  openTime: Scalars['DateTime']['input'];
  type: Scalars['String']['input'];
};

export type HackathonScheduleCreateManyHackathonTimelineInputEnvelope = {
  data: Array<HackathonScheduleCreateManyHackathonTimelineInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonScheduleCreateNestedManyWithoutHackathonTimelineInput = {
  connect?: InputMaybe<Array<HackathonScheduleWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonScheduleCreateOrConnectWithoutHackathonTimelineInput>>;
  create?: InputMaybe<Array<HackathonScheduleCreateWithoutHackathonTimelineInput>>;
  createMany?: InputMaybe<HackathonScheduleCreateManyHackathonTimelineInputEnvelope>;
};

export type HackathonScheduleCreateOrConnectWithoutHackathonTimelineInput = {
  create: HackathonScheduleCreateWithoutHackathonTimelineInput;
  where: HackathonScheduleWhereUniqueInput;
};

export type HackathonScheduleCreateWithoutHackathonTimelineInput = {
  closeTime: Scalars['DateTime']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  eventName: Scalars['String']['input'];
  eventURL?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  openTime: Scalars['DateTime']['input'];
  type: Scalars['String']['input'];
};

export type HackathonScheduleListRelationFilter = {
  every?: InputMaybe<HackathonScheduleWhereInput>;
  none?: InputMaybe<HackathonScheduleWhereInput>;
  some?: InputMaybe<HackathonScheduleWhereInput>;
};

export type HackathonScheduleMaxAggregate = {
  __typename?: 'HackathonScheduleMaxAggregate';
  closeTime?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  eventName?: Maybe<Scalars['String']['output']>;
  eventURL?: Maybe<Scalars['String']['output']>;
  hackathonTimelineId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  openTime?: Maybe<Scalars['DateTime']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type HackathonScheduleMinAggregate = {
  __typename?: 'HackathonScheduleMinAggregate';
  closeTime?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  eventName?: Maybe<Scalars['String']['output']>;
  eventURL?: Maybe<Scalars['String']['output']>;
  hackathonTimelineId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  openTime?: Maybe<Scalars['DateTime']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type HackathonScheduleOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonScheduleScalarWhereInput = {
  AND?: InputMaybe<Array<HackathonScheduleScalarWhereInput>>;
  NOT?: InputMaybe<Array<HackathonScheduleScalarWhereInput>>;
  OR?: InputMaybe<Array<HackathonScheduleScalarWhereInput>>;
  closeTime?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  eventName?: InputMaybe<StringFilter>;
  eventURL?: InputMaybe<StringNullableFilter>;
  hackathonTimelineId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  openTime?: InputMaybe<DateTimeFilter>;
  type?: InputMaybe<StringFilter>;
};

export enum HackathonScheduleType {
  Judging = 'JUDGING',
  RegisterOpen = 'REGISTER_OPEN',
  SubmissionClose = 'SUBMISSION_CLOSE'
}

export type HackathonScheduleUpdateInputExtend = {
  closeTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  eventName?: InputMaybe<StringFieldUpdateOperationsInput>;
  eventURL?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  openTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  type: HackathonScheduleType;
};

export type HackathonScheduleUpdateManyMutationInput = {
  closeTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  eventName?: InputMaybe<StringFieldUpdateOperationsInput>;
  eventURL?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  openTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type HackathonScheduleUpdateManyWithWhereWithoutHackathonTimelineInput = {
  data: HackathonScheduleUpdateManyMutationInput;
  where: HackathonScheduleScalarWhereInput;
};

export type HackathonScheduleUpdateManyWithoutHackathonTimelineNestedInput = {
  connect?: InputMaybe<Array<HackathonScheduleWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonScheduleCreateOrConnectWithoutHackathonTimelineInput>>;
  create?: InputMaybe<Array<HackathonScheduleCreateWithoutHackathonTimelineInput>>;
  createMany?: InputMaybe<HackathonScheduleCreateManyHackathonTimelineInputEnvelope>;
  delete?: InputMaybe<Array<HackathonScheduleWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonScheduleScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonScheduleWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonScheduleWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonScheduleUpdateWithWhereUniqueWithoutHackathonTimelineInput>>;
  updateMany?: InputMaybe<Array<HackathonScheduleUpdateManyWithWhereWithoutHackathonTimelineInput>>;
  upsert?: InputMaybe<Array<HackathonScheduleUpsertWithWhereUniqueWithoutHackathonTimelineInput>>;
};

export type HackathonScheduleUpdateWithWhereUniqueWithoutHackathonTimelineInput = {
  data: HackathonScheduleUpdateWithoutHackathonTimelineInput;
  where: HackathonScheduleWhereUniqueInput;
};

export type HackathonScheduleUpdateWithoutHackathonTimelineInput = {
  closeTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  eventName?: InputMaybe<StringFieldUpdateOperationsInput>;
  eventURL?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  openTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type HackathonScheduleUpsertWithWhereUniqueWithoutHackathonTimelineInput = {
  create: HackathonScheduleCreateWithoutHackathonTimelineInput;
  update: HackathonScheduleUpdateWithoutHackathonTimelineInput;
  where: HackathonScheduleWhereUniqueInput;
};

export type HackathonScheduleWhereInput = {
  AND?: InputMaybe<Array<HackathonScheduleWhereInput>>;
  HackathonTimeline?: InputMaybe<HackathonTimelineNullableRelationFilter>;
  NOT?: InputMaybe<Array<HackathonScheduleWhereInput>>;
  OR?: InputMaybe<Array<HackathonScheduleWhereInput>>;
  closeTime?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  eventName?: InputMaybe<StringFilter>;
  eventURL?: InputMaybe<StringNullableFilter>;
  hackathonTimelineId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  openTime?: InputMaybe<DateTimeFilter>;
  type?: InputMaybe<StringFilter>;
};

export type HackathonScheduleWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonScheduleWhereInput>>;
  HackathonTimeline?: InputMaybe<HackathonTimelineNullableRelationFilter>;
  NOT?: InputMaybe<Array<HackathonScheduleWhereInput>>;
  OR?: InputMaybe<Array<HackathonScheduleWhereInput>>;
  closeTime?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  eventName?: InputMaybe<StringFilter>;
  eventURL?: InputMaybe<StringNullableFilter>;
  hackathonTimelineId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  openTime?: InputMaybe<DateTimeFilter>;
  type?: InputMaybe<StringFilter>;
};

export enum HackathonStatus {
  Closed = 'CLOSED',
  Ongoing = 'ONGOING',
  Past = 'PAST',
  Register = 'REGISTER',
  Voting = 'VOTING'
}

export type HackathonSumAggregate = {
  __typename?: 'HackathonSumAggregate';
  pageView?: Maybe<Scalars['Int']['output']>;
  participants?: Maybe<Scalars['Int']['output']>;
  priority?: Maybe<Scalars['Int']['output']>;
  totalRewards?: Maybe<Scalars['Decimal']['output']>;
};

export type HackathonTeam = {
  __typename?: 'HackathonTeam';
  _count: HackathonTeamCount;
  code: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId: Scalars['String']['output'];
  hackathonId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  intro?: Maybe<Scalars['String']['output']>;
  lock: Scalars['Boolean']['output'];
  members?: Maybe<Array<HackathonMember>>;
  name: Scalars['String']['output'];
  project?: Maybe<Project>;
  projectId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type HackathonTeamCount = {
  __typename?: 'HackathonTeamCount';
  members: Scalars['Int']['output'];
};

export type HackathonTeamCountAggregate = {
  __typename?: 'HackathonTeamCountAggregate';
  _all: Scalars['Int']['output'];
  code: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  intro: Scalars['Int']['output'];
  lock: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type HackathonTeamCreateNestedOneWithoutMembersInput = {
  connect?: InputMaybe<HackathonTeamWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonTeamCreateOrConnectWithoutMembersInput>;
  create?: InputMaybe<HackathonTeamCreateWithoutMembersInput>;
};

export type HackathonTeamCreateNestedOneWithoutProjectInput = {
  connect?: InputMaybe<HackathonTeamWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonTeamCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<HackathonTeamCreateWithoutProjectInput>;
};

export type HackathonTeamCreateOrConnectWithoutMembersInput = {
  create: HackathonTeamCreateWithoutMembersInput;
  where: HackathonTeamWhereUniqueInput;
};

export type HackathonTeamCreateOrConnectWithoutProjectInput = {
  create: HackathonTeamCreateWithoutProjectInput;
  where: HackathonTeamWhereUniqueInput;
};

export type HackathonTeamCreateWithoutMembersInput = {
  code: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId: Scalars['String']['input'];
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  project?: InputMaybe<ProjectCreateNestedOneWithoutTeamInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HackathonTeamCreateWithoutProjectInput = {
  code: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId: Scalars['String']['input'];
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  members?: InputMaybe<HackathonMemberCreateNestedManyWithoutTeamInput>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HackathonTeamExtend = {
  __typename?: 'HackathonTeamExtend';
  _count: HackathonTeamCount;
  code: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId: Scalars['String']['output'];
  hackathonId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  intro?: Maybe<Scalars['String']['output']>;
  lock: Scalars['Boolean']['output'];
  members?: Maybe<Array<HackathonMemberExtend>>;
  name: Scalars['String']['output'];
  project?: Maybe<Project>;
  projectId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
};

export type HackathonTeamMaxAggregate = {
  __typename?: 'HackathonTeamMaxAggregate';
  code?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  lock?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonTeamMinAggregate = {
  __typename?: 'HackathonTeamMinAggregate';
  code?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  lock?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonTeamNullableRelationFilter = {
  is?: InputMaybe<HackathonTeamWhereInput>;
  isNot?: InputMaybe<HackathonTeamWhereInput>;
};

export type HackathonTeamOrderByWithRelationInput = {
  code?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrder>;
  hackathonId?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  intro?: InputMaybe<SortOrderInput>;
  lock?: InputMaybe<SortOrder>;
  members?: InputMaybe<HackathonMemberOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type HackathonTeamProjectIdHackathonIdCompoundUniqueInput = {
  hackathonId: Scalars['String']['input'];
  projectId: Scalars['String']['input'];
};

export type HackathonTeamUpdateOneWithoutMembersNestedInput = {
  connect?: InputMaybe<HackathonTeamWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonTeamCreateOrConnectWithoutMembersInput>;
  create?: InputMaybe<HackathonTeamCreateWithoutMembersInput>;
  delete?: InputMaybe<HackathonTeamWhereInput>;
  disconnect?: InputMaybe<HackathonTeamWhereInput>;
  update?: InputMaybe<HackathonTeamUpdateToOneWithWhereWithoutMembersInput>;
  upsert?: InputMaybe<HackathonTeamUpsertWithoutMembersInput>;
};

export type HackathonTeamUpdateOneWithoutProjectNestedInput = {
  connect?: InputMaybe<HackathonTeamWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonTeamCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<HackathonTeamCreateWithoutProjectInput>;
  delete?: InputMaybe<HackathonTeamWhereInput>;
  disconnect?: InputMaybe<HackathonTeamWhereInput>;
  update?: InputMaybe<HackathonTeamUpdateToOneWithWhereWithoutProjectInput>;
  upsert?: InputMaybe<HackathonTeamUpsertWithoutProjectInput>;
};

export type HackathonTeamUpdateToOneWithWhereWithoutMembersInput = {
  data: HackathonTeamUpdateWithoutMembersInput;
  where?: InputMaybe<HackathonTeamWhereInput>;
};

export type HackathonTeamUpdateToOneWithWhereWithoutProjectInput = {
  data: HackathonTeamUpdateWithoutProjectInput;
  where?: InputMaybe<HackathonTeamWhereInput>;
};

export type HackathonTeamUpdateWithoutMembersInput = {
  code?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<StringFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  project?: InputMaybe<ProjectUpdateOneWithoutTeamNestedInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HackathonTeamUpdateWithoutProjectInput = {
  code?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<StringFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  members?: InputMaybe<HackathonMemberUpdateManyWithoutTeamNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HackathonTeamUpsertWithoutMembersInput = {
  create: HackathonTeamCreateWithoutMembersInput;
  update: HackathonTeamUpdateWithoutMembersInput;
  where?: InputMaybe<HackathonTeamWhereInput>;
};

export type HackathonTeamUpsertWithoutProjectInput = {
  create: HackathonTeamCreateWithoutProjectInput;
  update: HackathonTeamUpdateWithoutProjectInput;
  where?: InputMaybe<HackathonTeamWhereInput>;
};

export type HackathonTeamWhereInput = {
  AND?: InputMaybe<Array<HackathonTeamWhereInput>>;
  NOT?: InputMaybe<Array<HackathonTeamWhereInput>>;
  OR?: InputMaybe<Array<HackathonTeamWhereInput>>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  lock?: InputMaybe<BoolFilter>;
  members?: InputMaybe<HackathonMemberListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<UuidNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type HackathonTeamWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonTeamWhereInput>>;
  NOT?: InputMaybe<Array<HackathonTeamWhereInput>>;
  OR?: InputMaybe<Array<HackathonTeamWhereInput>>;
  code?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<StringNullableFilter>;
  lock?: InputMaybe<BoolFilter>;
  members?: InputMaybe<HackathonMemberListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  projectId_hackathonId?: InputMaybe<HackathonTeamProjectIdHackathonIdCompoundUniqueInput>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type HackathonTimeline = {
  __typename?: 'HackathonTimeline';
  _count: HackathonTimelineCount;
  hackathon: Hackathon;
  id: Scalars['String']['output'];
  openReviewSame: Scalars['Boolean']['output'];
  registrationClose: Scalars['DateTime']['output'];
  registrationOpen: Scalars['DateTime']['output'];
  rewardTime: Scalars['DateTime']['output'];
  schedule?: Maybe<Array<HackathonSchedule>>;
  submissionClose: Scalars['DateTime']['output'];
  submissionOpen: Scalars['DateTime']['output'];
  timeZone: Scalars['String']['output'];
};

export type HackathonTimelineCount = {
  __typename?: 'HackathonTimelineCount';
  schedule: Scalars['Int']['output'];
};

export type HackathonTimelineCountAggregate = {
  __typename?: 'HackathonTimelineCountAggregate';
  _all: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  openReviewSame: Scalars['Int']['output'];
  registrationClose: Scalars['Int']['output'];
  registrationOpen: Scalars['Int']['output'];
  rewardTime: Scalars['Int']['output'];
  submissionClose: Scalars['Int']['output'];
  submissionOpen: Scalars['Int']['output'];
  timeZone: Scalars['Int']['output'];
};

export type HackathonTimelineCreateNestedOneWithoutHackathonInput = {
  connect?: InputMaybe<HackathonTimelineWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonTimelineCreateOrConnectWithoutHackathonInput>;
  create?: InputMaybe<HackathonTimelineCreateWithoutHackathonInput>;
};

export type HackathonTimelineCreateOrConnectWithoutHackathonInput = {
  create: HackathonTimelineCreateWithoutHackathonInput;
  where: HackathonTimelineWhereUniqueInput;
};

export type HackathonTimelineCreateWithoutHackathonInput = {
  openReviewSame: Scalars['Boolean']['input'];
  registrationClose: Scalars['DateTime']['input'];
  registrationOpen: Scalars['DateTime']['input'];
  rewardTime: Scalars['DateTime']['input'];
  schedule?: InputMaybe<HackathonScheduleCreateNestedManyWithoutHackathonTimelineInput>;
  submissionClose: Scalars['DateTime']['input'];
  submissionOpen: Scalars['DateTime']['input'];
  timeZone: Scalars['String']['input'];
};

export type HackathonTimelineMaxAggregate = {
  __typename?: 'HackathonTimelineMaxAggregate';
  id?: Maybe<Scalars['String']['output']>;
  openReviewSame?: Maybe<Scalars['Boolean']['output']>;
  registrationClose?: Maybe<Scalars['DateTime']['output']>;
  registrationOpen?: Maybe<Scalars['DateTime']['output']>;
  rewardTime?: Maybe<Scalars['DateTime']['output']>;
  submissionClose?: Maybe<Scalars['DateTime']['output']>;
  submissionOpen?: Maybe<Scalars['DateTime']['output']>;
  timeZone?: Maybe<Scalars['String']['output']>;
};

export type HackathonTimelineMinAggregate = {
  __typename?: 'HackathonTimelineMinAggregate';
  id?: Maybe<Scalars['String']['output']>;
  openReviewSame?: Maybe<Scalars['Boolean']['output']>;
  registrationClose?: Maybe<Scalars['DateTime']['output']>;
  registrationOpen?: Maybe<Scalars['DateTime']['output']>;
  rewardTime?: Maybe<Scalars['DateTime']['output']>;
  submissionClose?: Maybe<Scalars['DateTime']['output']>;
  submissionOpen?: Maybe<Scalars['DateTime']['output']>;
  timeZone?: Maybe<Scalars['String']['output']>;
};

export type HackathonTimelineNullableRelationFilter = {
  is?: InputMaybe<HackathonTimelineWhereInput>;
  isNot?: InputMaybe<HackathonTimelineWhereInput>;
};

export type HackathonTimelineOrderByWithRelationInput = {
  hackathon?: InputMaybe<HackathonOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  openReviewSame?: InputMaybe<SortOrder>;
  registrationClose?: InputMaybe<SortOrder>;
  registrationOpen?: InputMaybe<SortOrder>;
  rewardTime?: InputMaybe<SortOrder>;
  schedule?: InputMaybe<HackathonScheduleOrderByRelationAggregateInput>;
  submissionClose?: InputMaybe<SortOrder>;
  submissionOpen?: InputMaybe<SortOrder>;
  timeZone?: InputMaybe<SortOrder>;
};

export type HackathonTimelineUpdateOneWithoutHackathonNestedInput = {
  connect?: InputMaybe<HackathonTimelineWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonTimelineCreateOrConnectWithoutHackathonInput>;
  create?: InputMaybe<HackathonTimelineCreateWithoutHackathonInput>;
  delete?: InputMaybe<HackathonTimelineWhereInput>;
  disconnect?: InputMaybe<HackathonTimelineWhereInput>;
  update?: InputMaybe<HackathonTimelineUpdateToOneWithWhereWithoutHackathonInput>;
  upsert?: InputMaybe<HackathonTimelineUpsertWithoutHackathonInput>;
};

export type HackathonTimelineUpdateToOneWithWhereWithoutHackathonInput = {
  data: HackathonTimelineUpdateWithoutHackathonInput;
  where?: InputMaybe<HackathonTimelineWhereInput>;
};

export type HackathonTimelineUpdateWithoutHackathonInput = {
  openReviewSame?: InputMaybe<BoolFieldUpdateOperationsInput>;
  registrationClose?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  registrationOpen?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  rewardTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  schedule?: InputMaybe<HackathonScheduleUpdateManyWithoutHackathonTimelineNestedInput>;
  submissionClose?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  submissionOpen?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  timeZone?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type HackathonTimelineUpsertWithoutHackathonInput = {
  create: HackathonTimelineCreateWithoutHackathonInput;
  update: HackathonTimelineUpdateWithoutHackathonInput;
  where?: InputMaybe<HackathonTimelineWhereInput>;
};

export type HackathonTimelineWhereInput = {
  AND?: InputMaybe<Array<HackathonTimelineWhereInput>>;
  NOT?: InputMaybe<Array<HackathonTimelineWhereInput>>;
  OR?: InputMaybe<Array<HackathonTimelineWhereInput>>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  openReviewSame?: InputMaybe<BoolFilter>;
  registrationClose?: InputMaybe<DateTimeFilter>;
  registrationOpen?: InputMaybe<DateTimeFilter>;
  rewardTime?: InputMaybe<DateTimeFilter>;
  schedule?: InputMaybe<HackathonScheduleListRelationFilter>;
  submissionClose?: InputMaybe<DateTimeFilter>;
  submissionOpen?: InputMaybe<DateTimeFilter>;
  timeZone?: InputMaybe<StringFilter>;
};

export type HackathonTimelineWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonTimelineWhereInput>>;
  NOT?: InputMaybe<Array<HackathonTimelineWhereInput>>;
  OR?: InputMaybe<Array<HackathonTimelineWhereInput>>;
  hackathon?: InputMaybe<HackathonRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  openReviewSame?: InputMaybe<BoolFilter>;
  registrationClose?: InputMaybe<DateTimeFilter>;
  registrationOpen?: InputMaybe<DateTimeFilter>;
  rewardTime?: InputMaybe<DateTimeFilter>;
  schedule?: InputMaybe<HackathonScheduleListRelationFilter>;
  submissionClose?: InputMaybe<DateTimeFilter>;
  submissionOpen?: InputMaybe<DateTimeFilter>;
  timeZone?: InputMaybe<StringFilter>;
};

export type HackathonTodo = {
  __typename?: 'HackathonTodo';
  Hackathon?: Maybe<Hackathon>;
  _count: HackathonTodoCount;
  createdAt: Scalars['DateTime']['output'];
  hackathonId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  intro?: Maybe<Scalars['String']['output']>;
  metadata: Scalars['JSON']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  url?: Maybe<Scalars['String']['output']>;
  userHackathonTodos?: Maybe<Array<UserHackathonTodo>>;
};

export type HackathonTodoAvgAggregate = {
  __typename?: 'HackathonTodoAvgAggregate';
  order?: Maybe<Scalars['Float']['output']>;
};

export type HackathonTodoCount = {
  __typename?: 'HackathonTodoCount';
  userHackathonTodos: Scalars['Int']['output'];
};

export type HackathonTodoCountAggregate = {
  __typename?: 'HackathonTodoCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  intro: Scalars['Int']['output'];
  metadata: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  url: Scalars['Int']['output'];
};

export type HackathonTodoCreateInputExtend = {
  intro?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  type: Scalars['String']['input'];
  url?: InputMaybe<Scalars['String']['input']>;
  userHackathonTodos?: InputMaybe<UserHackathonTodoCreateNestedManyWithoutHackathonTodoInput>;
};

export type HackathonTodoCreateManyHackathonInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type HackathonTodoCreateManyHackathonInputEnvelope = {
  data: Array<HackathonTodoCreateManyHackathonInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonTodoCreateNestedManyWithoutHackathonInput = {
  connect?: InputMaybe<Array<HackathonTodoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonTodoCreateOrConnectWithoutHackathonInput>>;
  create?: InputMaybe<Array<HackathonTodoCreateWithoutHackathonInput>>;
  createMany?: InputMaybe<HackathonTodoCreateManyHackathonInputEnvelope>;
};

export type HackathonTodoCreateOrConnectWithoutHackathonInput = {
  create: HackathonTodoCreateWithoutHackathonInput;
  where: HackathonTodoWhereUniqueInput;
};

export type HackathonTodoCreateWithoutHackathonInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<Scalars['String']['input']>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  userHackathonTodos?: InputMaybe<UserHackathonTodoCreateNestedManyWithoutHackathonTodoInput>;
};

export type HackathonTodoExtend = {
  __typename?: 'HackathonTodoExtend';
  Hackathon?: Maybe<Hackathon>;
  _count: HackathonTodoCount;
  completed?: Maybe<Scalars['Boolean']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  intro?: Maybe<Scalars['String']['output']>;
  metadata: Scalars['JSON']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  type: Scalars['String']['output'];
  url?: Maybe<Scalars['String']['output']>;
  userHackathonTodos?: Maybe<Array<UserHackathonTodo>>;
};

export type HackathonTodoListRelationFilter = {
  every?: InputMaybe<HackathonTodoWhereInput>;
  none?: InputMaybe<HackathonTodoWhereInput>;
  some?: InputMaybe<HackathonTodoWhereInput>;
};

export type HackathonTodoMaxAggregate = {
  __typename?: 'HackathonTodoMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HackathonTodoMinAggregate = {
  __typename?: 'HackathonTodoMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  intro?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HackathonTodoOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonTodoRelationFilter = {
  is?: InputMaybe<HackathonTodoWhereInput>;
  isNot?: InputMaybe<HackathonTodoWhereInput>;
};

export type HackathonTodoScalarWhereInput = {
  AND?: InputMaybe<Array<HackathonTodoScalarWhereInput>>;
  NOT?: InputMaybe<Array<HackathonTodoScalarWhereInput>>;
  OR?: InputMaybe<Array<HackathonTodoScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  metadata?: InputMaybe<JsonFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type HackathonTodoSumAggregate = {
  __typename?: 'HackathonTodoSumAggregate';
  order?: Maybe<Scalars['Int']['output']>;
};

export type HackathonTodoUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type HackathonTodoUpdateManyWithWhereWithoutHackathonInput = {
  data: HackathonTodoUpdateManyMutationInput;
  where: HackathonTodoScalarWhereInput;
};

export type HackathonTodoUpdateManyWithoutHackathonNestedInput = {
  connect?: InputMaybe<Array<HackathonTodoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonTodoCreateOrConnectWithoutHackathonInput>>;
  create?: InputMaybe<Array<HackathonTodoCreateWithoutHackathonInput>>;
  createMany?: InputMaybe<HackathonTodoCreateManyHackathonInputEnvelope>;
  delete?: InputMaybe<Array<HackathonTodoWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonTodoScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonTodoWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonTodoWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonTodoUpdateWithWhereUniqueWithoutHackathonInput>>;
  updateMany?: InputMaybe<Array<HackathonTodoUpdateManyWithWhereWithoutHackathonInput>>;
  upsert?: InputMaybe<Array<HackathonTodoUpsertWithWhereUniqueWithoutHackathonInput>>;
};

export type HackathonTodoUpdateWithWhereUniqueWithoutHackathonInput = {
  data: HackathonTodoUpdateWithoutHackathonInput;
  where: HackathonTodoWhereUniqueInput;
};

export type HackathonTodoUpdateWithoutHackathonInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  intro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  metadata?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  userHackathonTodos?: InputMaybe<UserHackathonTodoUpdateManyWithoutHackathonTodoNestedInput>;
};

export type HackathonTodoUpsertWithWhereUniqueWithoutHackathonInput = {
  create: HackathonTodoCreateWithoutHackathonInput;
  update: HackathonTodoUpdateWithoutHackathonInput;
  where: HackathonTodoWhereUniqueInput;
};

export type HackathonTodoWhereInput = {
  AND?: InputMaybe<Array<HackathonTodoWhereInput>>;
  Hackathon?: InputMaybe<HackathonNullableRelationFilter>;
  NOT?: InputMaybe<Array<HackathonTodoWhereInput>>;
  OR?: InputMaybe<Array<HackathonTodoWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  intro?: InputMaybe<StringNullableFilter>;
  metadata?: InputMaybe<JsonFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
  userHackathonTodos?: InputMaybe<UserHackathonTodoListRelationFilter>;
};

export type HackathonTodoWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonTodoWhereInput>>;
  Hackathon?: InputMaybe<HackathonNullableRelationFilter>;
  NOT?: InputMaybe<Array<HackathonTodoWhereInput>>;
  OR?: InputMaybe<Array<HackathonTodoWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  intro?: InputMaybe<StringNullableFilter>;
  metadata?: InputMaybe<JsonFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringNullableFilter>;
  userHackathonTodos?: InputMaybe<UserHackathonTodoListRelationFilter>;
};

export type HackathonUtmAvgAggregate = {
  __typename?: 'HackathonUTMAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type HackathonUtmCountAggregate = {
  __typename?: 'HackathonUTMCountAggregate';
  _all: Scalars['Int']['output'];
  color: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  sourceName: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  url: Scalars['Int']['output'];
};

export type HackathonUtmCreateInput = {
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId: Scalars['String']['input'];
  sourceName: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  url: Scalars['String']['input'];
};

export type HackathonUtmExtend = {
  __typename?: 'HackathonUTMExtend';
  color?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  /** 统计数据 */
  data?: Maybe<Array<HackathonUtmStatisticsData>>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sourceName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HackathonUtmMaxAggregate = {
  __typename?: 'HackathonUTMMaxAggregate';
  color?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sourceName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HackathonUtmMinAggregate = {
  __typename?: 'HackathonUTMMinAggregate';
  color?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sourceName?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type HackathonUtmOrderByWithRelationInput = {
  color?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  hackathonId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sourceName?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrder>;
};

export enum HackathonUtmScalarFieldEnum {
  Color = 'color',
  CreatedAt = 'createdAt',
  HackathonId = 'hackathonId',
  Id = 'id',
  SourceName = 'sourceName',
  UpdatedAt = 'updatedAt',
  Url = 'url'
}

export type HackathonUtmStatisticsData = {
  __typename?: 'HackathonUTMStatisticsData';
  /** 数量 */
  count?: Maybe<Scalars['Int']['output']>;
  /** 统计的时间 */
  time?: Maybe<Scalars['String']['output']>;
};

export type HackathonUtmSumAggregate = {
  __typename?: 'HackathonUTMSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type HackathonUtmUpdateInput = {
  color?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<StringFieldUpdateOperationsInput>;
  sourceName?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  url?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type HackathonUtmWhereInput = {
  AND?: InputMaybe<Array<HackathonUtmWhereInput>>;
  NOT?: InputMaybe<Array<HackathonUtmWhereInput>>;
  OR?: InputMaybe<Array<HackathonUtmWhereInput>>;
  color?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  sourceName?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringFilter>;
};

export type HackathonUtmWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonUtmWhereInput>>;
  NOT?: InputMaybe<Array<HackathonUtmWhereInput>>;
  OR?: InputMaybe<Array<HackathonUtmWhereInput>>;
  color?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  sourceName?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  url?: InputMaybe<StringFilter>;
};

export type HackathonUpdateInputExtend = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  info?: InputMaybe<HackathonInfoUpdateOneWithoutHackathonNestedInput>;
  language?: InputMaybe<NullableEnumLanguageFieldUpdateOperationsInput>;
  links?: InputMaybe<HackathonLinksUpdateOneWithoutHackathonNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  participants?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<Scalars['String']['input']>;
  sectionSequences?: InputMaybe<HackathonUpdatesectionSequencesInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  timeline?: InputMaybe<HackathonTimelineUpdateOneWithoutHackathonNestedInput>;
  todos?: InputMaybe<HackathonTodoUpdateManyWithoutHackathonNestedInput>;
  totalRewards?: InputMaybe<NullableDecimalFieldUpdateOperationsInput>;
  track?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HackathonUpdateOneRequiredWithoutRewardsNestedInput = {
  connect?: InputMaybe<HackathonWhereUniqueInput>;
  connectOrCreate?: InputMaybe<HackathonCreateOrConnectWithoutRewardsInput>;
  create?: InputMaybe<HackathonCreateWithoutRewardsInput>;
  update?: InputMaybe<HackathonUpdateToOneWithWhereWithoutRewardsInput>;
  upsert?: InputMaybe<HackathonUpsertWithoutRewardsInput>;
};

export type HackathonUpdateToOneWithWhereWithoutRewardsInput = {
  data: HackathonUpdateWithoutRewardsInput;
  where?: InputMaybe<HackathonWhereInput>;
};

export type HackathonUpdateWithoutRewardsInput = {
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<HackathonInfoUpdateOneWithoutHackathonNestedInput>;
  judge?: InputMaybe<HackathonJudgeUpdateManyWithoutHackathonNestedInput>;
  language?: InputMaybe<NullableEnumLanguageFieldUpdateOperationsInput>;
  links?: InputMaybe<HackathonLinksUpdateOneWithoutHackathonNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pageView?: InputMaybe<IntFieldUpdateOperationsInput>;
  participants?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<HackathonUpdateprogressInput>;
  sectionSequences?: InputMaybe<HackathonUpdatesectionSequencesInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  timeline?: InputMaybe<HackathonTimelineUpdateOneWithoutHackathonNestedInput>;
  todos?: InputMaybe<HackathonTodoUpdateManyWithoutHackathonNestedInput>;
  totalRewards?: InputMaybe<NullableDecimalFieldUpdateOperationsInput>;
  track?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HackathonUpdateprogressInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type HackathonUpdatesectionSequencesInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type HackathonUpsertWithoutRewardsInput = {
  create: HackathonCreateWithoutRewardsInput;
  update: HackathonUpdateWithoutRewardsInput;
  where?: InputMaybe<HackathonWhereInput>;
};

export type HackathonVote = {
  __typename?: 'HackathonVote';
  createdAt: Scalars['DateTime']['output'];
  hackathonId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  projectId: Scalars['String']['output'];
  rewardId: Scalars['Int']['output'];
  userId: Scalars['String']['output'];
  userVoteRole: VoteRole;
  vote: Scalars['Int']['output'];
  voteMode?: Maybe<Scalars['String']['output']>;
};

export type HackathonVoteAvgAggregate = {
  __typename?: 'HackathonVoteAvgAggregate';
  rewardId?: Maybe<Scalars['Float']['output']>;
  vote?: Maybe<Scalars['Float']['output']>;
};

export type HackathonVoteCountAggregate = {
  __typename?: 'HackathonVoteCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  rewardId: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  userVoteRole: Scalars['Int']['output'];
  vote: Scalars['Int']['output'];
  voteMode: Scalars['Int']['output'];
};

export type HackathonVoteInput = {
  projectId: Scalars['String']['input'];
  vote: Scalars['Float']['input'];
};

export type HackathonVoteMaxAggregate = {
  __typename?: 'HackathonVoteMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  rewardId?: Maybe<Scalars['Int']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  userVoteRole?: Maybe<VoteRole>;
  vote?: Maybe<Scalars['Int']['output']>;
  voteMode?: Maybe<Scalars['String']['output']>;
};

export type HackathonVoteMinAggregate = {
  __typename?: 'HackathonVoteMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  rewardId?: Maybe<Scalars['Int']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  userVoteRole?: Maybe<VoteRole>;
  vote?: Maybe<Scalars['Int']['output']>;
  voteMode?: Maybe<Scalars['String']['output']>;
};

export type HackathonVoteSumAggregate = {
  __typename?: 'HackathonVoteSumAggregate';
  rewardId?: Maybe<Scalars['Int']['output']>;
  vote?: Maybe<Scalars['Int']['output']>;
};

export type HackathonWhereInput = {
  AND?: InputMaybe<Array<HackathonWhereInput>>;
  NOT?: InputMaybe<Array<HackathonWhereInput>>;
  OR?: InputMaybe<Array<HackathonWhereInput>>;
  alias?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  enable?: InputMaybe<BoolFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<HackathonInfoNullableRelationFilter>;
  judge?: InputMaybe<HackathonJudgeListRelationFilter>;
  language?: InputMaybe<EnumLanguageNullableFilter>;
  links?: InputMaybe<HackathonLinksNullableRelationFilter>;
  name?: InputMaybe<StringFilter>;
  pageView?: InputMaybe<IntFilter>;
  participants?: InputMaybe<IntFilter>;
  priority?: InputMaybe<IntFilter>;
  progress?: InputMaybe<StringNullableListFilter>;
  rewards?: InputMaybe<HackathonRewardsListRelationFilter>;
  sectionSequences?: InputMaybe<StringNullableListFilter>;
  status?: InputMaybe<StringFilter>;
  timeline?: InputMaybe<HackathonTimelineNullableRelationFilter>;
  todos?: InputMaybe<HackathonTodoListRelationFilter>;
  totalRewards?: InputMaybe<DecimalNullableFilter>;
  track?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type HackathonWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonWhereInput>>;
  NOT?: InputMaybe<Array<HackathonWhereInput>>;
  OR?: InputMaybe<Array<HackathonWhereInput>>;
  alias?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  enable?: InputMaybe<BoolFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<HackathonInfoNullableRelationFilter>;
  judge?: InputMaybe<HackathonJudgeListRelationFilter>;
  language?: InputMaybe<EnumLanguageNullableFilter>;
  links?: InputMaybe<HackathonLinksNullableRelationFilter>;
  name?: InputMaybe<Scalars['String']['input']>;
  pageView?: InputMaybe<IntFilter>;
  participants?: InputMaybe<IntFilter>;
  priority?: InputMaybe<IntFilter>;
  progress?: InputMaybe<StringNullableListFilter>;
  rewards?: InputMaybe<HackathonRewardsListRelationFilter>;
  sectionSequences?: InputMaybe<StringNullableListFilter>;
  status?: InputMaybe<StringFilter>;
  timeline?: InputMaybe<HackathonTimelineNullableRelationFilter>;
  todos?: InputMaybe<HackathonTodoListRelationFilter>;
  totalRewards?: InputMaybe<DecimalNullableFilter>;
  track?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type HackathonWinner = {
  __typename?: 'HackathonWinner';
  createdAt: Scalars['DateTime']['output'];
  hackathonId: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  place?: Maybe<Scalars['Int']['output']>;
  project: Project;
  projectId: Scalars['String']['output'];
  rewardId: Scalars['Int']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type HackathonWinnerAvgAggregate = {
  __typename?: 'HackathonWinnerAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  place?: Maybe<Scalars['Float']['output']>;
  rewardId?: Maybe<Scalars['Float']['output']>;
};

export type HackathonWinnerCountAggregate = {
  __typename?: 'HackathonWinnerCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  place: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  rewardId: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type HackathonWinnerCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  place?: InputMaybe<Scalars['Int']['input']>;
  rewardId: Scalars['Int']['input'];
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HackathonWinnerCreateManyProjectInputEnvelope = {
  data: Array<HackathonWinnerCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HackathonWinnerCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HackathonWinnerWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonWinnerCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HackathonWinnerCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HackathonWinnerCreateManyProjectInputEnvelope>;
};

export type HackathonWinnerCreateOrConnectWithoutProjectInput = {
  create: HackathonWinnerCreateWithoutProjectInput;
  where: HackathonWinnerWhereUniqueInput;
};

export type HackathonWinnerCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId: Scalars['String']['input'];
  name: Scalars['String']['input'];
  place?: InputMaybe<Scalars['Int']['input']>;
  rewardId: Scalars['Int']['input'];
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HackathonWinnerExtend = {
  __typename?: 'HackathonWinnerExtend';
  createdAt: Scalars['DateTime']['output'];
  hackathonId: Scalars['String']['output'];
  hackathonName?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  place?: Maybe<Scalars['Int']['output']>;
  project: Project;
  projectId: Scalars['String']['output'];
  rankAndVote?: Maybe<RankAndVote>;
  rewardId: Scalars['Int']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  /** winners信息 */
  winnersInfo?: Maybe<Array<HackathonMemberExtend>>;
};

export type HackathonWinnerInputExtend = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  hackathonId: Scalars['String']['input'];
  name: Scalars['String']['input'];
  place?: InputMaybe<Scalars['Int']['input']>;
  /** projectId id */
  projectId: Scalars['String']['input'];
  rewardId: Scalars['Int']['input'];
  type: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type HackathonWinnerListRelationFilter = {
  every?: InputMaybe<HackathonWinnerWhereInput>;
  none?: InputMaybe<HackathonWinnerWhereInput>;
  some?: InputMaybe<HackathonWinnerWhereInput>;
};

export type HackathonWinnerMaxAggregate = {
  __typename?: 'HackathonWinnerMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  place?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  rewardId?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonWinnerMinAggregate = {
  __typename?: 'HackathonWinnerMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  place?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['String']['output']>;
  rewardId?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type HackathonWinnerOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HackathonWinnerScalarWhereInput = {
  AND?: InputMaybe<Array<HackathonWinnerScalarWhereInput>>;
  NOT?: InputMaybe<Array<HackathonWinnerScalarWhereInput>>;
  OR?: InputMaybe<Array<HackathonWinnerScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  place?: InputMaybe<IntNullableFilter>;
  projectId?: InputMaybe<UuidFilter>;
  rewardId?: InputMaybe<IntFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type HackathonWinnerSumAggregate = {
  __typename?: 'HackathonWinnerSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  place?: Maybe<Scalars['Int']['output']>;
  rewardId?: Maybe<Scalars['Int']['output']>;
};

export type HackathonWinnerUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  place?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  rewardId?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HackathonWinnerUpdateManyWithWhereWithoutProjectInput = {
  data: HackathonWinnerUpdateManyMutationInput;
  where: HackathonWinnerScalarWhereInput;
};

export type HackathonWinnerUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<HackathonWinnerWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HackathonWinnerCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HackathonWinnerCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HackathonWinnerCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<HackathonWinnerWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HackathonWinnerScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HackathonWinnerWhereUniqueInput>>;
  set?: InputMaybe<Array<HackathonWinnerWhereUniqueInput>>;
  update?: InputMaybe<Array<HackathonWinnerUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<HackathonWinnerUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<HackathonWinnerUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type HackathonWinnerUpdateWithWhereUniqueWithoutProjectInput = {
  data: HackathonWinnerUpdateWithoutProjectInput;
  where: HackathonWinnerWhereUniqueInput;
};

export type HackathonWinnerUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  hackathonId?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  place?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  rewardId?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HackathonWinnerUpsertWithWhereUniqueWithoutProjectInput = {
  create: HackathonWinnerCreateWithoutProjectInput;
  update: HackathonWinnerUpdateWithoutProjectInput;
  where: HackathonWinnerWhereUniqueInput;
};

export type HackathonWinnerWhereInput = {
  AND?: InputMaybe<Array<HackathonWinnerWhereInput>>;
  NOT?: InputMaybe<Array<HackathonWinnerWhereInput>>;
  OR?: InputMaybe<Array<HackathonWinnerWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  place?: InputMaybe<IntNullableFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<UuidFilter>;
  rewardId?: InputMaybe<IntFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type HackathonWinnerWhereUniqueInput = {
  AND?: InputMaybe<Array<HackathonWinnerWhereInput>>;
  NOT?: InputMaybe<Array<HackathonWinnerWhereInput>>;
  OR?: InputMaybe<Array<HackathonWinnerWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<StringFilter>;
  place?: InputMaybe<IntNullableFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<UuidFilter>;
  rewardId?: InputMaybe<IntFilter>;
  type?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type IdeaBank = {
  __typename?: 'IdeaBank';
  _count: IdeaBankCount;
  contractKey: Scalars['String']['output'];
  contractValue: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  ecosystem?: Maybe<Ecosystem>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  inspiration: Scalars['String']['output'];
  name: Scalars['String']['output'];
  otherInfo?: Maybe<Scalars['String']['output']>;
  solution: Scalars['String']['output'];
  solve: Scalars['String']['output'];
  teamUp: Scalars['Boolean']['output'];
  track: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user: User;
  userId: Scalars['String']['output'];
  vote: Scalars['Int']['output'];
  votes?: Maybe<Array<IdeaBankVote>>;
};

export type IdeaBankAvgAggregate = {
  __typename?: 'IdeaBankAvgAggregate';
  vote?: Maybe<Scalars['Float']['output']>;
};

export type IdeaBankAvgAggregateInput = {
  vote?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankAvgOrderByAggregateInput = {
  vote?: InputMaybe<SortOrder>;
};

export type IdeaBankCount = {
  __typename?: 'IdeaBankCount';
  votes: Scalars['Int']['output'];
};

export type IdeaBankCountAggregate = {
  __typename?: 'IdeaBankCountAggregate';
  _all: Scalars['Int']['output'];
  contractKey: Scalars['Int']['output'];
  contractValue: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  inspiration: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  otherInfo: Scalars['Int']['output'];
  solution: Scalars['Int']['output'];
  solve: Scalars['Int']['output'];
  teamUp: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  vote: Scalars['Int']['output'];
};

export type IdeaBankCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  contractKey?: InputMaybe<Scalars['Boolean']['input']>;
  contractValue?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  ecosystemId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  inspiration?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  otherInfo?: InputMaybe<Scalars['Boolean']['input']>;
  solution?: InputMaybe<Scalars['Boolean']['input']>;
  solve?: InputMaybe<Scalars['Boolean']['input']>;
  teamUp?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  vote?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankCountOrderByAggregateInput = {
  contractKey?: InputMaybe<SortOrder>;
  contractValue?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  inspiration?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  otherInfo?: InputMaybe<SortOrder>;
  solution?: InputMaybe<SortOrder>;
  solve?: InputMaybe<SortOrder>;
  teamUp?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  vote?: InputMaybe<SortOrder>;
};

export type IdeaBankCreateInput = {
  contractKey: Scalars['String']['input'];
  contractValue: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ecosystem?: InputMaybe<EcosystemCreateNestedOneWithoutIdeaBankInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  inspiration: Scalars['String']['input'];
  name: Scalars['String']['input'];
  otherInfo?: InputMaybe<Scalars['String']['input']>;
  solution: Scalars['String']['input'];
  solve: Scalars['String']['input'];
  teamUp: Scalars['Boolean']['input'];
  track: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  user: UserCreateNestedOneWithoutIdeaBankInput;
  vote?: InputMaybe<Scalars['Int']['input']>;
  votes?: InputMaybe<IdeaBankVoteCreateNestedManyWithoutIdeaInput>;
};

export type IdeaBankCreateManyInput = {
  contractKey: Scalars['String']['input'];
  contractValue: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ecosystemId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  inspiration: Scalars['String']['input'];
  name: Scalars['String']['input'];
  otherInfo?: InputMaybe<Scalars['String']['input']>;
  solution: Scalars['String']['input'];
  solve: Scalars['String']['input'];
  teamUp: Scalars['Boolean']['input'];
  track: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
  vote?: InputMaybe<Scalars['Int']['input']>;
};

export type IdeaBankCreateManyUserInput = {
  contractKey: Scalars['String']['input'];
  contractValue: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ecosystemId?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  inspiration: Scalars['String']['input'];
  name: Scalars['String']['input'];
  otherInfo?: InputMaybe<Scalars['String']['input']>;
  solution: Scalars['String']['input'];
  solve: Scalars['String']['input'];
  teamUp: Scalars['Boolean']['input'];
  track: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  vote?: InputMaybe<Scalars['Int']['input']>;
};

export type IdeaBankCreateManyUserInputEnvelope = {
  data: Array<IdeaBankCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<IdeaBankWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<IdeaBankCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<IdeaBankCreateWithoutUserInput>>;
  createMany?: InputMaybe<IdeaBankCreateManyUserInputEnvelope>;
};

export type IdeaBankCreateOrConnectWithoutUserInput = {
  create: IdeaBankCreateWithoutUserInput;
  where: IdeaBankWhereUniqueInput;
};

export type IdeaBankCreateWithoutUserInput = {
  contractKey: Scalars['String']['input'];
  contractValue: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  ecosystem?: InputMaybe<EcosystemCreateNestedOneWithoutIdeaBankInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  inspiration: Scalars['String']['input'];
  name: Scalars['String']['input'];
  otherInfo?: InputMaybe<Scalars['String']['input']>;
  solution: Scalars['String']['input'];
  solve: Scalars['String']['input'];
  teamUp: Scalars['Boolean']['input'];
  track: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  votes?: InputMaybe<IdeaBankVoteCreateNestedManyWithoutIdeaInput>;
};

export type IdeaBankGroupBy = {
  __typename?: 'IdeaBankGroupBy';
  _avg?: Maybe<IdeaBankAvgAggregate>;
  _count?: Maybe<IdeaBankCountAggregate>;
  _max?: Maybe<IdeaBankMaxAggregate>;
  _min?: Maybe<IdeaBankMinAggregate>;
  _sum?: Maybe<IdeaBankSumAggregate>;
  contractKey: Scalars['String']['output'];
  contractValue: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  inspiration: Scalars['String']['output'];
  name: Scalars['String']['output'];
  otherInfo?: Maybe<Scalars['String']['output']>;
  solution: Scalars['String']['output'];
  solve: Scalars['String']['output'];
  teamUp: Scalars['Boolean']['output'];
  track: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  vote: Scalars['Int']['output'];
};

export type IdeaBankListPaginated = {
  __typename?: 'IdeaBankListPaginated';
  data?: Maybe<Array<IdeaBank>>;
  total: Scalars['Int']['output'];
};

export type IdeaBankListRelationFilter = {
  every?: InputMaybe<IdeaBankWhereInput>;
  none?: InputMaybe<IdeaBankWhereInput>;
  some?: InputMaybe<IdeaBankWhereInput>;
};

export type IdeaBankMaxAggregate = {
  __typename?: 'IdeaBankMaxAggregate';
  contractKey?: Maybe<Scalars['String']['output']>;
  contractValue?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  inspiration?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  otherInfo?: Maybe<Scalars['String']['output']>;
  solution?: Maybe<Scalars['String']['output']>;
  solve?: Maybe<Scalars['String']['output']>;
  teamUp?: Maybe<Scalars['Boolean']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  vote?: Maybe<Scalars['Int']['output']>;
};

export type IdeaBankMaxAggregateInput = {
  contractKey?: InputMaybe<Scalars['Boolean']['input']>;
  contractValue?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  ecosystemId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  inspiration?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  otherInfo?: InputMaybe<Scalars['Boolean']['input']>;
  solution?: InputMaybe<Scalars['Boolean']['input']>;
  solve?: InputMaybe<Scalars['Boolean']['input']>;
  teamUp?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  vote?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankMaxOrderByAggregateInput = {
  contractKey?: InputMaybe<SortOrder>;
  contractValue?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  inspiration?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  otherInfo?: InputMaybe<SortOrder>;
  solution?: InputMaybe<SortOrder>;
  solve?: InputMaybe<SortOrder>;
  teamUp?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  vote?: InputMaybe<SortOrder>;
};

export type IdeaBankMinAggregate = {
  __typename?: 'IdeaBankMinAggregate';
  contractKey?: Maybe<Scalars['String']['output']>;
  contractValue?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  inspiration?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  otherInfo?: Maybe<Scalars['String']['output']>;
  solution?: Maybe<Scalars['String']['output']>;
  solve?: Maybe<Scalars['String']['output']>;
  teamUp?: Maybe<Scalars['Boolean']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  vote?: Maybe<Scalars['Int']['output']>;
};

export type IdeaBankMinAggregateInput = {
  contractKey?: InputMaybe<Scalars['Boolean']['input']>;
  contractValue?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  ecosystemId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  inspiration?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  otherInfo?: InputMaybe<Scalars['Boolean']['input']>;
  solution?: InputMaybe<Scalars['Boolean']['input']>;
  solve?: InputMaybe<Scalars['Boolean']['input']>;
  teamUp?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  vote?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankMinOrderByAggregateInput = {
  contractKey?: InputMaybe<SortOrder>;
  contractValue?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  inspiration?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  otherInfo?: InputMaybe<SortOrder>;
  solution?: InputMaybe<SortOrder>;
  solve?: InputMaybe<SortOrder>;
  teamUp?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  vote?: InputMaybe<SortOrder>;
};

export type IdeaBankOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type IdeaBankOrderByWithAggregationInput = {
  _avg?: InputMaybe<IdeaBankAvgOrderByAggregateInput>;
  _count?: InputMaybe<IdeaBankCountOrderByAggregateInput>;
  _max?: InputMaybe<IdeaBankMaxOrderByAggregateInput>;
  _min?: InputMaybe<IdeaBankMinOrderByAggregateInput>;
  _sum?: InputMaybe<IdeaBankSumOrderByAggregateInput>;
  contractKey?: InputMaybe<SortOrder>;
  contractValue?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  ecosystemId?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  inspiration?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  otherInfo?: InputMaybe<SortOrderInput>;
  solution?: InputMaybe<SortOrder>;
  solve?: InputMaybe<SortOrder>;
  teamUp?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  vote?: InputMaybe<SortOrder>;
};

export type IdeaBankOrderByWithRelationInput = {
  contractKey?: InputMaybe<SortOrder>;
  contractValue?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  ecosystem?: InputMaybe<EcosystemOrderByWithRelationInput>;
  ecosystemId?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  inspiration?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  otherInfo?: InputMaybe<SortOrderInput>;
  solution?: InputMaybe<SortOrder>;
  solve?: InputMaybe<SortOrder>;
  teamUp?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userId?: InputMaybe<SortOrder>;
  vote?: InputMaybe<SortOrder>;
  votes?: InputMaybe<IdeaBankVoteOrderByRelationAggregateInput>;
};

export type IdeaBankRelationFilter = {
  is?: InputMaybe<IdeaBankWhereInput>;
  isNot?: InputMaybe<IdeaBankWhereInput>;
};

export enum IdeaBankScalarFieldEnum {
  ContractKey = 'contractKey',
  ContractValue = 'contractValue',
  CreatedAt = 'createdAt',
  EcosystemId = 'ecosystemId',
  Id = 'id',
  Inspiration = 'inspiration',
  Name = 'name',
  OtherInfo = 'otherInfo',
  Solution = 'solution',
  Solve = 'solve',
  TeamUp = 'teamUp',
  Track = 'track',
  UpdatedAt = 'updatedAt',
  UserId = 'userId',
  Vote = 'vote'
}

export type IdeaBankScalarWhereInput = {
  AND?: InputMaybe<Array<IdeaBankScalarWhereInput>>;
  NOT?: InputMaybe<Array<IdeaBankScalarWhereInput>>;
  OR?: InputMaybe<Array<IdeaBankScalarWhereInput>>;
  contractKey?: InputMaybe<StringFilter>;
  contractValue?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  ecosystemId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<StringFilter>;
  inspiration?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  otherInfo?: InputMaybe<StringNullableFilter>;
  solution?: InputMaybe<StringFilter>;
  solve?: InputMaybe<StringFilter>;
  teamUp?: InputMaybe<BoolFilter>;
  track?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  vote?: InputMaybe<IntFilter>;
};

export type IdeaBankScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<IdeaBankScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<IdeaBankScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<IdeaBankScalarWhereWithAggregatesInput>>;
  contractKey?: InputMaybe<StringWithAggregatesFilter>;
  contractValue?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  ecosystemId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<StringWithAggregatesFilter>;
  inspiration?: InputMaybe<StringWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  otherInfo?: InputMaybe<StringNullableWithAggregatesFilter>;
  solution?: InputMaybe<StringWithAggregatesFilter>;
  solve?: InputMaybe<StringWithAggregatesFilter>;
  teamUp?: InputMaybe<BoolWithAggregatesFilter>;
  track?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
  vote?: InputMaybe<IntWithAggregatesFilter>;
};

export type IdeaBankSumAggregate = {
  __typename?: 'IdeaBankSumAggregate';
  vote?: Maybe<Scalars['Int']['output']>;
};

export type IdeaBankSumAggregateInput = {
  vote?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankSumOrderByAggregateInput = {
  vote?: InputMaybe<SortOrder>;
};

export type IdeaBankUpdateInput = {
  contractKey?: InputMaybe<StringFieldUpdateOperationsInput>;
  contractValue?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  ecosystem?: InputMaybe<EcosystemUpdateOneWithoutIdeaBankNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  inspiration?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  otherInfo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  solution?: InputMaybe<StringFieldUpdateOperationsInput>;
  solve?: InputMaybe<StringFieldUpdateOperationsInput>;
  teamUp?: InputMaybe<BoolFieldUpdateOperationsInput>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutIdeaBankNestedInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  votes?: InputMaybe<IdeaBankVoteUpdateManyWithoutIdeaNestedInput>;
};

export type IdeaBankUpdateManyMutationInput = {
  contractKey?: InputMaybe<StringFieldUpdateOperationsInput>;
  contractValue?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  inspiration?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  otherInfo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  solution?: InputMaybe<StringFieldUpdateOperationsInput>;
  solve?: InputMaybe<StringFieldUpdateOperationsInput>;
  teamUp?: InputMaybe<BoolFieldUpdateOperationsInput>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type IdeaBankUpdateManyWithWhereWithoutUserInput = {
  data: IdeaBankUpdateManyMutationInput;
  where: IdeaBankScalarWhereInput;
};

export type IdeaBankUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<IdeaBankWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<IdeaBankCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<IdeaBankCreateWithoutUserInput>>;
  createMany?: InputMaybe<IdeaBankCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<IdeaBankWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<IdeaBankScalarWhereInput>>;
  disconnect?: InputMaybe<Array<IdeaBankWhereUniqueInput>>;
  set?: InputMaybe<Array<IdeaBankWhereUniqueInput>>;
  update?: InputMaybe<Array<IdeaBankUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<IdeaBankUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<IdeaBankUpsertWithWhereUniqueWithoutUserInput>>;
};

export type IdeaBankUpdateWithWhereUniqueWithoutUserInput = {
  data: IdeaBankUpdateWithoutUserInput;
  where: IdeaBankWhereUniqueInput;
};

export type IdeaBankUpdateWithoutUserInput = {
  contractKey?: InputMaybe<StringFieldUpdateOperationsInput>;
  contractValue?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  ecosystem?: InputMaybe<EcosystemUpdateOneWithoutIdeaBankNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  inspiration?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  otherInfo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  solution?: InputMaybe<StringFieldUpdateOperationsInput>;
  solve?: InputMaybe<StringFieldUpdateOperationsInput>;
  teamUp?: InputMaybe<BoolFieldUpdateOperationsInput>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  votes?: InputMaybe<IdeaBankVoteUpdateManyWithoutIdeaNestedInput>;
};

export type IdeaBankUpsertWithWhereUniqueWithoutUserInput = {
  create: IdeaBankCreateWithoutUserInput;
  update: IdeaBankUpdateWithoutUserInput;
  where: IdeaBankWhereUniqueInput;
};

export type IdeaBankVote = {
  __typename?: 'IdeaBankVote';
  createdAt: Scalars['DateTime']['output'];
  idea: IdeaBank;
  ideaBankId: Scalars['String']['output'];
  userId: Scalars['String']['output'];
};

export type IdeaBankVoteCountAggregate = {
  __typename?: 'IdeaBankVoteCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ideaBankId: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type IdeaBankVoteCreateManyIdeaInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type IdeaBankVoteCreateManyIdeaInputEnvelope = {
  data: Array<IdeaBankVoteCreateManyIdeaInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IdeaBankVoteCreateNestedManyWithoutIdeaInput = {
  connect?: InputMaybe<Array<IdeaBankVoteWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<IdeaBankVoteCreateOrConnectWithoutIdeaInput>>;
  create?: InputMaybe<Array<IdeaBankVoteCreateWithoutIdeaInput>>;
  createMany?: InputMaybe<IdeaBankVoteCreateManyIdeaInputEnvelope>;
};

export type IdeaBankVoteCreateOrConnectWithoutIdeaInput = {
  create: IdeaBankVoteCreateWithoutIdeaInput;
  where: IdeaBankVoteWhereUniqueInput;
};

export type IdeaBankVoteCreateWithoutIdeaInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type IdeaBankVoteIdeaBankIdUserIdCompoundUniqueInput = {
  ideaBankId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type IdeaBankVoteListRelationFilter = {
  every?: InputMaybe<IdeaBankVoteWhereInput>;
  none?: InputMaybe<IdeaBankVoteWhereInput>;
  some?: InputMaybe<IdeaBankVoteWhereInput>;
};

export type IdeaBankVoteMaxAggregate = {
  __typename?: 'IdeaBankVoteMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ideaBankId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type IdeaBankVoteMinAggregate = {
  __typename?: 'IdeaBankVoteMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ideaBankId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type IdeaBankVoteOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type IdeaBankVoteScalarWhereInput = {
  AND?: InputMaybe<Array<IdeaBankVoteScalarWhereInput>>;
  NOT?: InputMaybe<Array<IdeaBankVoteScalarWhereInput>>;
  OR?: InputMaybe<Array<IdeaBankVoteScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  ideaBankId?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type IdeaBankVoteUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type IdeaBankVoteUpdateManyWithWhereWithoutIdeaInput = {
  data: IdeaBankVoteUpdateManyMutationInput;
  where: IdeaBankVoteScalarWhereInput;
};

export type IdeaBankVoteUpdateManyWithoutIdeaNestedInput = {
  connect?: InputMaybe<Array<IdeaBankVoteWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<IdeaBankVoteCreateOrConnectWithoutIdeaInput>>;
  create?: InputMaybe<Array<IdeaBankVoteCreateWithoutIdeaInput>>;
  createMany?: InputMaybe<IdeaBankVoteCreateManyIdeaInputEnvelope>;
  delete?: InputMaybe<Array<IdeaBankVoteWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<IdeaBankVoteScalarWhereInput>>;
  disconnect?: InputMaybe<Array<IdeaBankVoteWhereUniqueInput>>;
  set?: InputMaybe<Array<IdeaBankVoteWhereUniqueInput>>;
  update?: InputMaybe<Array<IdeaBankVoteUpdateWithWhereUniqueWithoutIdeaInput>>;
  updateMany?: InputMaybe<Array<IdeaBankVoteUpdateManyWithWhereWithoutIdeaInput>>;
  upsert?: InputMaybe<Array<IdeaBankVoteUpsertWithWhereUniqueWithoutIdeaInput>>;
};

export type IdeaBankVoteUpdateWithWhereUniqueWithoutIdeaInput = {
  data: IdeaBankVoteUpdateWithoutIdeaInput;
  where: IdeaBankVoteWhereUniqueInput;
};

export type IdeaBankVoteUpdateWithoutIdeaInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type IdeaBankVoteUpsertWithWhereUniqueWithoutIdeaInput = {
  create: IdeaBankVoteCreateWithoutIdeaInput;
  update: IdeaBankVoteUpdateWithoutIdeaInput;
  where: IdeaBankVoteWhereUniqueInput;
};

export type IdeaBankVoteWhereInput = {
  AND?: InputMaybe<Array<IdeaBankVoteWhereInput>>;
  NOT?: InputMaybe<Array<IdeaBankVoteWhereInput>>;
  OR?: InputMaybe<Array<IdeaBankVoteWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  idea?: InputMaybe<IdeaBankRelationFilter>;
  ideaBankId?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type IdeaBankVoteWhereUniqueInput = {
  AND?: InputMaybe<Array<IdeaBankVoteWhereInput>>;
  NOT?: InputMaybe<Array<IdeaBankVoteWhereInput>>;
  OR?: InputMaybe<Array<IdeaBankVoteWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  idea?: InputMaybe<IdeaBankRelationFilter>;
  ideaBankId?: InputMaybe<StringFilter>;
  ideaBankId_userId?: InputMaybe<IdeaBankVoteIdeaBankIdUserIdCompoundUniqueInput>;
  userId?: InputMaybe<UuidFilter>;
};

export type IdeaBankWhereInput = {
  AND?: InputMaybe<Array<IdeaBankWhereInput>>;
  NOT?: InputMaybe<Array<IdeaBankWhereInput>>;
  OR?: InputMaybe<Array<IdeaBankWhereInput>>;
  contractKey?: InputMaybe<StringFilter>;
  contractValue?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  ecosystem?: InputMaybe<EcosystemNullableRelationFilter>;
  ecosystemId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<StringFilter>;
  inspiration?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  otherInfo?: InputMaybe<StringNullableFilter>;
  solution?: InputMaybe<StringFilter>;
  solve?: InputMaybe<StringFilter>;
  teamUp?: InputMaybe<BoolFilter>;
  track?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
  vote?: InputMaybe<IntFilter>;
  votes?: InputMaybe<IdeaBankVoteListRelationFilter>;
};

export type IdeaBankWhereUniqueInput = {
  AND?: InputMaybe<Array<IdeaBankWhereInput>>;
  NOT?: InputMaybe<Array<IdeaBankWhereInput>>;
  OR?: InputMaybe<Array<IdeaBankWhereInput>>;
  contractKey?: InputMaybe<StringFilter>;
  contractValue?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  ecosystem?: InputMaybe<EcosystemNullableRelationFilter>;
  ecosystemId?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  inspiration?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  otherInfo?: InputMaybe<StringNullableFilter>;
  solution?: InputMaybe<StringFilter>;
  solve?: InputMaybe<StringFilter>;
  teamUp?: InputMaybe<BoolFilter>;
  track?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
  vote?: InputMaybe<IntFilter>;
  votes?: InputMaybe<IdeaBankVoteListRelationFilter>;
};

export type IntFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Int']['input']>;
  divide?: InputMaybe<Scalars['Int']['input']>;
  increment?: InputMaybe<Scalars['Int']['input']>;
  multiply?: InputMaybe<Scalars['Int']['input']>;
  set?: InputMaybe<Scalars['Int']['input']>;
};

export type IntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntNullableListFilter = {
  equals?: InputMaybe<Array<Scalars['Int']['input']>>;
  has?: InputMaybe<Scalars['Int']['input']>;
  hasEvery?: InputMaybe<Array<Scalars['Int']['input']>>;
  hasSome?: InputMaybe<Array<Scalars['Int']['input']>>;
  isEmpty?: InputMaybe<Scalars['Boolean']['input']>;
};

export type IntWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedIntFilter>;
  _min?: InputMaybe<NestedIntFilter>;
  _sum?: InputMaybe<NestedIntFilter>;
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type JobFavorite = {
  __typename?: 'JobFavorite';
  createdAt: Scalars['DateTime']['output'];
  job: JobStation;
  jobId: Scalars['String']['output'];
  userId: Scalars['String']['output'];
};

export type JobFavoriteCountAggregate = {
  __typename?: 'JobFavoriteCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  jobId: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type JobFavoriteCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  job: JobStationCreateNestedOneWithoutFavoritesInput;
  userId: Scalars['String']['input'];
};

export type JobFavoriteCreateManyJobInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type JobFavoriteCreateManyJobInputEnvelope = {
  data: Array<JobFavoriteCreateManyJobInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobFavoriteCreateNestedManyWithoutJobInput = {
  connect?: InputMaybe<Array<JobFavoriteWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<JobFavoriteCreateOrConnectWithoutJobInput>>;
  create?: InputMaybe<Array<JobFavoriteCreateWithoutJobInput>>;
  createMany?: InputMaybe<JobFavoriteCreateManyJobInputEnvelope>;
};

export type JobFavoriteCreateOrConnectWithoutJobInput = {
  create: JobFavoriteCreateWithoutJobInput;
  where: JobFavoriteWhereUniqueInput;
};

export type JobFavoriteCreateWithoutJobInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type JobFavoriteJobIdUserIdCompoundUniqueInput = {
  jobId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type JobFavoriteListRelationFilter = {
  every?: InputMaybe<JobFavoriteWhereInput>;
  none?: InputMaybe<JobFavoriteWhereInput>;
  some?: InputMaybe<JobFavoriteWhereInput>;
};

export type JobFavoriteMaxAggregate = {
  __typename?: 'JobFavoriteMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  jobId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type JobFavoriteMinAggregate = {
  __typename?: 'JobFavoriteMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  jobId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type JobFavoriteOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type JobFavoriteScalarWhereInput = {
  AND?: InputMaybe<Array<JobFavoriteScalarWhereInput>>;
  NOT?: InputMaybe<Array<JobFavoriteScalarWhereInput>>;
  OR?: InputMaybe<Array<JobFavoriteScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  jobId?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type JobFavoriteUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type JobFavoriteUpdateManyWithWhereWithoutJobInput = {
  data: JobFavoriteUpdateManyMutationInput;
  where: JobFavoriteScalarWhereInput;
};

export type JobFavoriteUpdateManyWithoutJobNestedInput = {
  connect?: InputMaybe<Array<JobFavoriteWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<JobFavoriteCreateOrConnectWithoutJobInput>>;
  create?: InputMaybe<Array<JobFavoriteCreateWithoutJobInput>>;
  createMany?: InputMaybe<JobFavoriteCreateManyJobInputEnvelope>;
  delete?: InputMaybe<Array<JobFavoriteWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<JobFavoriteScalarWhereInput>>;
  disconnect?: InputMaybe<Array<JobFavoriteWhereUniqueInput>>;
  set?: InputMaybe<Array<JobFavoriteWhereUniqueInput>>;
  update?: InputMaybe<Array<JobFavoriteUpdateWithWhereUniqueWithoutJobInput>>;
  updateMany?: InputMaybe<Array<JobFavoriteUpdateManyWithWhereWithoutJobInput>>;
  upsert?: InputMaybe<Array<JobFavoriteUpsertWithWhereUniqueWithoutJobInput>>;
};

export type JobFavoriteUpdateWithWhereUniqueWithoutJobInput = {
  data: JobFavoriteUpdateWithoutJobInput;
  where: JobFavoriteWhereUniqueInput;
};

export type JobFavoriteUpdateWithoutJobInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type JobFavoriteUpsertWithWhereUniqueWithoutJobInput = {
  create: JobFavoriteCreateWithoutJobInput;
  update: JobFavoriteUpdateWithoutJobInput;
  where: JobFavoriteWhereUniqueInput;
};

export type JobFavoriteWhereInput = {
  AND?: InputMaybe<Array<JobFavoriteWhereInput>>;
  NOT?: InputMaybe<Array<JobFavoriteWhereInput>>;
  OR?: InputMaybe<Array<JobFavoriteWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  job?: InputMaybe<JobStationRelationFilter>;
  jobId?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type JobFavoriteWhereUniqueInput = {
  AND?: InputMaybe<Array<JobFavoriteWhereInput>>;
  NOT?: InputMaybe<Array<JobFavoriteWhereInput>>;
  OR?: InputMaybe<Array<JobFavoriteWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  job?: InputMaybe<JobStationRelationFilter>;
  jobId?: InputMaybe<StringFilter>;
  jobId_userId?: InputMaybe<JobFavoriteJobIdUserIdCompoundUniqueInput>;
  userId?: InputMaybe<UuidFilter>;
};

export type JobStation = {
  __typename?: 'JobStation';
  _count: JobStationCount;
  companyLogo: Scalars['String']['output'];
  companyName: Scalars['String']['output'];
  contact?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  dataSource: Scalars['String']['output'];
  description?: Maybe<Scalars['JSON']['output']>;
  favorites?: Maybe<Array<JobFavorite>>;
  id: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  maxSalary?: Maybe<Scalars['Float']['output']>;
  minSalary?: Maybe<Scalars['Float']['output']>;
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  status: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  website?: Maybe<Scalars['String']['output']>;
  workMode: WorkMode;
  workType: WorkType;
};

export type JobStationAvgAggregate = {
  __typename?: 'JobStationAvgAggregate';
  maxSalary?: Maybe<Scalars['Float']['output']>;
  minSalary?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

export type JobStationAvgAggregateInput = {
  maxSalary?: InputMaybe<Scalars['Boolean']['input']>;
  minSalary?: InputMaybe<Scalars['Boolean']['input']>;
  order?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobStationAvgOrderByAggregateInput = {
  maxSalary?: InputMaybe<SortOrder>;
  minSalary?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
};

export type JobStationCount = {
  __typename?: 'JobStationCount';
  favorites: Scalars['Int']['output'];
};

export type JobStationCountAggregate = {
  __typename?: 'JobStationCountAggregate';
  _all: Scalars['Int']['output'];
  companyLogo: Scalars['Int']['output'];
  companyName: Scalars['Int']['output'];
  contact: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  currency: Scalars['Int']['output'];
  dataSource: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  maxSalary: Scalars['Int']['output'];
  minSalary: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  website: Scalars['Int']['output'];
  workMode: Scalars['Int']['output'];
  workType: Scalars['Int']['output'];
};

export type JobStationCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  companyLogo?: InputMaybe<Scalars['Boolean']['input']>;
  companyName?: InputMaybe<Scalars['Boolean']['input']>;
  contact?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  currency?: InputMaybe<Scalars['Boolean']['input']>;
  dataSource?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['Boolean']['input']>;
  maxSalary?: InputMaybe<Scalars['Boolean']['input']>;
  minSalary?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  order?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  tags?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  website?: InputMaybe<Scalars['Boolean']['input']>;
  workMode?: InputMaybe<Scalars['Boolean']['input']>;
  workType?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobStationCountOrderByAggregateInput = {
  companyLogo?: InputMaybe<SortOrder>;
  companyName?: InputMaybe<SortOrder>;
  contact?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  currency?: InputMaybe<SortOrder>;
  dataSource?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  maxSalary?: InputMaybe<SortOrder>;
  minSalary?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  website?: InputMaybe<SortOrder>;
  workMode?: InputMaybe<SortOrder>;
  workType?: InputMaybe<SortOrder>;
};

export type JobStationCreateInput = {
  companyLogo: Scalars['String']['input'];
  companyName: Scalars['String']['input'];
  contact?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  dataSource?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  favorites?: InputMaybe<JobFavoriteCreateNestedManyWithoutJobInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  maxSalary?: InputMaybe<Scalars['Float']['input']>;
  minSalary?: InputMaybe<Scalars['Float']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<JobStationCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
  website?: InputMaybe<Scalars['String']['input']>;
  workMode?: InputMaybe<WorkMode>;
  workType?: InputMaybe<WorkType>;
};

export type JobStationCreateManyInput = {
  companyLogo: Scalars['String']['input'];
  companyName: Scalars['String']['input'];
  contact?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  dataSource?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  maxSalary?: InputMaybe<Scalars['Float']['input']>;
  minSalary?: InputMaybe<Scalars['Float']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<JobStationCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
  website?: InputMaybe<Scalars['String']['input']>;
  workMode?: InputMaybe<WorkMode>;
  workType?: InputMaybe<WorkType>;
};

export type JobStationCreateNestedOneWithoutFavoritesInput = {
  connect?: InputMaybe<JobStationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<JobStationCreateOrConnectWithoutFavoritesInput>;
  create?: InputMaybe<JobStationCreateWithoutFavoritesInput>;
};

export type JobStationCreateOrConnectWithoutFavoritesInput = {
  create: JobStationCreateWithoutFavoritesInput;
  where: JobStationWhereUniqueInput;
};

export type JobStationCreateWithoutFavoritesInput = {
  companyLogo: Scalars['String']['input'];
  companyName: Scalars['String']['input'];
  contact?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  currency?: InputMaybe<Scalars['String']['input']>;
  dataSource?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  maxSalary?: InputMaybe<Scalars['Float']['input']>;
  minSalary?: InputMaybe<Scalars['Float']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<JobStationCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
  website?: InputMaybe<Scalars['String']['input']>;
  workMode?: InputMaybe<WorkMode>;
  workType?: InputMaybe<WorkType>;
};

export type JobStationCreatetagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type JobStationGroupBy = {
  __typename?: 'JobStationGroupBy';
  _avg?: Maybe<JobStationAvgAggregate>;
  _count?: Maybe<JobStationCountAggregate>;
  _max?: Maybe<JobStationMaxAggregate>;
  _min?: Maybe<JobStationMinAggregate>;
  _sum?: Maybe<JobStationSumAggregate>;
  companyLogo: Scalars['String']['output'];
  companyName: Scalars['String']['output'];
  contact?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTime']['output'];
  currency?: Maybe<Scalars['String']['output']>;
  dataSource: Scalars['String']['output'];
  description?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['String']['output'];
  location?: Maybe<Scalars['String']['output']>;
  maxSalary?: Maybe<Scalars['Float']['output']>;
  minSalary?: Maybe<Scalars['Float']['output']>;
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  status: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  website?: Maybe<Scalars['String']['output']>;
  workMode: WorkMode;
  workType: WorkType;
};

export type JobStationListPaginated = {
  __typename?: 'JobStationListPaginated';
  data?: Maybe<Array<JobStation>>;
  total: Scalars['Int']['output'];
};

export type JobStationMaxAggregate = {
  __typename?: 'JobStationMaxAggregate';
  companyLogo?: Maybe<Scalars['String']['output']>;
  companyName?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  dataSource?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  maxSalary?: Maybe<Scalars['Float']['output']>;
  minSalary?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
  workMode?: Maybe<WorkMode>;
  workType?: Maybe<WorkType>;
};

export type JobStationMaxAggregateInput = {
  companyLogo?: InputMaybe<Scalars['Boolean']['input']>;
  companyName?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  currency?: InputMaybe<Scalars['Boolean']['input']>;
  dataSource?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['Boolean']['input']>;
  maxSalary?: InputMaybe<Scalars['Boolean']['input']>;
  minSalary?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  order?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  website?: InputMaybe<Scalars['Boolean']['input']>;
  workMode?: InputMaybe<Scalars['Boolean']['input']>;
  workType?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobStationMaxOrderByAggregateInput = {
  companyLogo?: InputMaybe<SortOrder>;
  companyName?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  currency?: InputMaybe<SortOrder>;
  dataSource?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  maxSalary?: InputMaybe<SortOrder>;
  minSalary?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  website?: InputMaybe<SortOrder>;
  workMode?: InputMaybe<SortOrder>;
  workType?: InputMaybe<SortOrder>;
};

export type JobStationMinAggregate = {
  __typename?: 'JobStationMinAggregate';
  companyLogo?: Maybe<Scalars['String']['output']>;
  companyName?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  currency?: Maybe<Scalars['String']['output']>;
  dataSource?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  maxSalary?: Maybe<Scalars['Float']['output']>;
  minSalary?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
  workMode?: Maybe<WorkMode>;
  workType?: Maybe<WorkType>;
};

export type JobStationMinAggregateInput = {
  companyLogo?: InputMaybe<Scalars['Boolean']['input']>;
  companyName?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  currency?: InputMaybe<Scalars['Boolean']['input']>;
  dataSource?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['Boolean']['input']>;
  maxSalary?: InputMaybe<Scalars['Boolean']['input']>;
  minSalary?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  order?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  website?: InputMaybe<Scalars['Boolean']['input']>;
  workMode?: InputMaybe<Scalars['Boolean']['input']>;
  workType?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobStationMinOrderByAggregateInput = {
  companyLogo?: InputMaybe<SortOrder>;
  companyName?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  currency?: InputMaybe<SortOrder>;
  dataSource?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  maxSalary?: InputMaybe<SortOrder>;
  minSalary?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  website?: InputMaybe<SortOrder>;
  workMode?: InputMaybe<SortOrder>;
  workType?: InputMaybe<SortOrder>;
};

export type JobStationOrderByWithAggregationInput = {
  _avg?: InputMaybe<JobStationAvgOrderByAggregateInput>;
  _count?: InputMaybe<JobStationCountOrderByAggregateInput>;
  _max?: InputMaybe<JobStationMaxOrderByAggregateInput>;
  _min?: InputMaybe<JobStationMinOrderByAggregateInput>;
  _sum?: InputMaybe<JobStationSumOrderByAggregateInput>;
  companyLogo?: InputMaybe<SortOrder>;
  companyName?: InputMaybe<SortOrder>;
  contact?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  currency?: InputMaybe<SortOrderInput>;
  dataSource?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrderInput>;
  maxSalary?: InputMaybe<SortOrderInput>;
  minSalary?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  website?: InputMaybe<SortOrderInput>;
  workMode?: InputMaybe<SortOrder>;
  workType?: InputMaybe<SortOrder>;
};

export type JobStationOrderByWithRelationInput = {
  companyLogo?: InputMaybe<SortOrder>;
  companyName?: InputMaybe<SortOrder>;
  contact?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  currency?: InputMaybe<SortOrderInput>;
  dataSource?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  favorites?: InputMaybe<JobFavoriteOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrderInput>;
  maxSalary?: InputMaybe<SortOrderInput>;
  minSalary?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  website?: InputMaybe<SortOrderInput>;
  workMode?: InputMaybe<SortOrder>;
  workType?: InputMaybe<SortOrder>;
};

export type JobStationRelationFilter = {
  is?: InputMaybe<JobStationWhereInput>;
  isNot?: InputMaybe<JobStationWhereInput>;
};

export enum JobStationScalarFieldEnum {
  CompanyLogo = 'companyLogo',
  CompanyName = 'companyName',
  Contact = 'contact',
  CreatedAt = 'createdAt',
  Currency = 'currency',
  DataSource = 'dataSource',
  Description = 'description',
  Id = 'id',
  Location = 'location',
  MaxSalary = 'maxSalary',
  MinSalary = 'minSalary',
  Name = 'name',
  Order = 'order',
  Status = 'status',
  Tags = 'tags',
  UpdatedAt = 'updatedAt',
  UserId = 'userId',
  Website = 'website',
  WorkMode = 'workMode',
  WorkType = 'workType'
}

export type JobStationScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<JobStationScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<JobStationScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<JobStationScalarWhereWithAggregatesInput>>;
  companyLogo?: InputMaybe<StringWithAggregatesFilter>;
  companyName?: InputMaybe<StringWithAggregatesFilter>;
  contact?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  currency?: InputMaybe<StringNullableWithAggregatesFilter>;
  dataSource?: InputMaybe<StringWithAggregatesFilter>;
  description?: InputMaybe<JsonNullableWithAggregatesFilter>;
  id?: InputMaybe<StringWithAggregatesFilter>;
  location?: InputMaybe<StringNullableWithAggregatesFilter>;
  maxSalary?: InputMaybe<FloatNullableWithAggregatesFilter>;
  minSalary?: InputMaybe<FloatNullableWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  order?: InputMaybe<IntWithAggregatesFilter>;
  status?: InputMaybe<StringWithAggregatesFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
  website?: InputMaybe<StringNullableWithAggregatesFilter>;
  workMode?: InputMaybe<EnumWorkModeWithAggregatesFilter>;
  workType?: InputMaybe<EnumWorkTypeWithAggregatesFilter>;
};

export type JobStationSumAggregate = {
  __typename?: 'JobStationSumAggregate';
  maxSalary?: Maybe<Scalars['Float']['output']>;
  minSalary?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};

export type JobStationSumAggregateInput = {
  maxSalary?: InputMaybe<Scalars['Boolean']['input']>;
  minSalary?: InputMaybe<Scalars['Boolean']['input']>;
  order?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobStationSumOrderByAggregateInput = {
  maxSalary?: InputMaybe<SortOrder>;
  minSalary?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
};

export type JobStationUpdateInput = {
  companyLogo?: InputMaybe<StringFieldUpdateOperationsInput>;
  companyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  contact?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  currency?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  dataSource?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  favorites?: InputMaybe<JobFavoriteUpdateManyWithoutJobNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  maxSalary?: InputMaybe<NullableFloatFieldUpdateOperationsInput>;
  minSalary?: InputMaybe<NullableFloatFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  tags?: InputMaybe<JobStationUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
  website?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  workMode?: InputMaybe<EnumWorkModeFieldUpdateOperationsInput>;
  workType?: InputMaybe<EnumWorkTypeFieldUpdateOperationsInput>;
};

export type JobStationUpdateManyMutationInput = {
  companyLogo?: InputMaybe<StringFieldUpdateOperationsInput>;
  companyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  contact?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  currency?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  dataSource?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  maxSalary?: InputMaybe<NullableFloatFieldUpdateOperationsInput>;
  minSalary?: InputMaybe<NullableFloatFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  tags?: InputMaybe<JobStationUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
  website?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  workMode?: InputMaybe<EnumWorkModeFieldUpdateOperationsInput>;
  workType?: InputMaybe<EnumWorkTypeFieldUpdateOperationsInput>;
};

export type JobStationUpdatetagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type JobStationWhereInput = {
  AND?: InputMaybe<Array<JobStationWhereInput>>;
  NOT?: InputMaybe<Array<JobStationWhereInput>>;
  OR?: InputMaybe<Array<JobStationWhereInput>>;
  companyLogo?: InputMaybe<StringFilter>;
  companyName?: InputMaybe<StringFilter>;
  contact?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  currency?: InputMaybe<StringNullableFilter>;
  dataSource?: InputMaybe<StringFilter>;
  description?: InputMaybe<JsonNullableFilter>;
  favorites?: InputMaybe<JobFavoriteListRelationFilter>;
  id?: InputMaybe<StringFilter>;
  location?: InputMaybe<StringNullableFilter>;
  maxSalary?: InputMaybe<FloatNullableFilter>;
  minSalary?: InputMaybe<FloatNullableFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  website?: InputMaybe<StringNullableFilter>;
  workMode?: InputMaybe<EnumWorkModeFilter>;
  workType?: InputMaybe<EnumWorkTypeFilter>;
};

export type JobStationWhereUniqueInput = {
  AND?: InputMaybe<Array<JobStationWhereInput>>;
  NOT?: InputMaybe<Array<JobStationWhereInput>>;
  OR?: InputMaybe<Array<JobStationWhereInput>>;
  companyLogo?: InputMaybe<StringFilter>;
  companyName?: InputMaybe<StringFilter>;
  contact?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  currency?: InputMaybe<StringNullableFilter>;
  dataSource?: InputMaybe<StringFilter>;
  description?: InputMaybe<JsonNullableFilter>;
  favorites?: InputMaybe<JobFavoriteListRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<StringNullableFilter>;
  maxSalary?: InputMaybe<FloatNullableFilter>;
  minSalary?: InputMaybe<FloatNullableFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  website?: InputMaybe<StringNullableFilter>;
  workMode?: InputMaybe<EnumWorkModeFilter>;
  workType?: InputMaybe<EnumWorkTypeFilter>;
};

export type JobTag = {
  __typename?: 'JobTag';
  count: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
};

export type JobTagAvgAggregate = {
  __typename?: 'JobTagAvgAggregate';
  count?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type JobTagAvgAggregateInput = {
  count?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobTagAvgOrderByAggregateInput = {
  count?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type JobTagCountAggregate = {
  __typename?: 'JobTagCountAggregate';
  _all: Scalars['Int']['output'];
  count: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
};

export type JobTagCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  count?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobTagCountOrderByAggregateInput = {
  count?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
};

export type JobTagCreateInput = {
  count?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  name: Scalars['String']['input'];
};

export type JobTagCreateManyInput = {
  count?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
};

export type JobTagGroupBy = {
  __typename?: 'JobTagGroupBy';
  _avg?: Maybe<JobTagAvgAggregate>;
  _count?: Maybe<JobTagCountAggregate>;
  _max?: Maybe<JobTagMaxAggregate>;
  _min?: Maybe<JobTagMinAggregate>;
  _sum?: Maybe<JobTagSumAggregate>;
  count: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
};

export type JobTagListPaginated = {
  __typename?: 'JobTagListPaginated';
  data?: Maybe<Array<JobTag>>;
  total: Scalars['Int']['output'];
};

export type JobTagMaxAggregate = {
  __typename?: 'JobTagMaxAggregate';
  count?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type JobTagMaxAggregateInput = {
  count?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobTagMaxOrderByAggregateInput = {
  count?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
};

export type JobTagMinAggregate = {
  __typename?: 'JobTagMinAggregate';
  count?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
};

export type JobTagMinAggregateInput = {
  count?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobTagMinOrderByAggregateInput = {
  count?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
};

export type JobTagOrderByWithAggregationInput = {
  _avg?: InputMaybe<JobTagAvgOrderByAggregateInput>;
  _count?: InputMaybe<JobTagCountOrderByAggregateInput>;
  _max?: InputMaybe<JobTagMaxOrderByAggregateInput>;
  _min?: InputMaybe<JobTagMinOrderByAggregateInput>;
  _sum?: InputMaybe<JobTagSumOrderByAggregateInput>;
  count?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
};

export type JobTagOrderByWithRelationInput = {
  count?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
};

export enum JobTagScalarFieldEnum {
  Count = 'count',
  CreatedAt = 'createdAt',
  Id = 'id',
  Name = 'name'
}

export type JobTagScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<JobTagScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<JobTagScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<JobTagScalarWhereWithAggregatesInput>>;
  count?: InputMaybe<IntWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
};

export type JobTagSumAggregate = {
  __typename?: 'JobTagSumAggregate';
  count?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type JobTagSumAggregateInput = {
  count?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type JobTagSumOrderByAggregateInput = {
  count?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type JobTagUpdateInput = {
  count?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type JobTagUpdateManyMutationInput = {
  count?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type JobTagWhereInput = {
  AND?: InputMaybe<Array<JobTagWhereInput>>;
  NOT?: InputMaybe<Array<JobTagWhereInput>>;
  OR?: InputMaybe<Array<JobTagWhereInput>>;
  count?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
};

export type JobTagWhereUniqueInput = {
  AND?: InputMaybe<Array<JobTagWhereInput>>;
  NOT?: InputMaybe<Array<JobTagWhereInput>>;
  OR?: InputMaybe<Array<JobTagWhereInput>>;
  count?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
};

export type JsonFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JsonNullableFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JsonNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedJsonNullableFilter>;
  _min?: InputMaybe<NestedJsonNullableFilter>;
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JsonWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedJsonFilter>;
  _min?: InputMaybe<NestedJsonFilter>;
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JudgeAccount = {
  __typename?: 'JudgeAccount';
  avatar?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  password?: Maybe<Scalars['String']['output']>;
};

export type JudgeAccountInfo = {
  __typename?: 'JudgeAccountInfo';
  avatar?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
};

export type JudgeProjectInfoList = {
  __typename?: 'JudgeProjectInfoList';
  /** project info */
  projects?: Maybe<Array<ProjectInfo>>;
  /** reward */
  reward?: Maybe<HackathonRewards>;
};

export enum Language {
  Javascript = 'JAVASCRIPT',
  Move = 'MOVE',
  Python = 'PYTHON',
  Rust = 'RUST',
  Solidity = 'SOLIDITY'
}

export type Langchain_Chat_HistoriesAvgAggregate = {
  __typename?: 'Langchain_chat_historiesAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type Langchain_Chat_HistoriesCountAggregate = {
  __typename?: 'Langchain_chat_historiesCountAggregate';
  _all: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  message: Scalars['Int']['output'];
  session_id: Scalars['Int']['output'];
};

export type Langchain_Chat_HistoriesMaxAggregate = {
  __typename?: 'Langchain_chat_historiesMaxAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  session_id?: Maybe<Scalars['String']['output']>;
};

export type Langchain_Chat_HistoriesMinAggregate = {
  __typename?: 'Langchain_chat_historiesMinAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  session_id?: Maybe<Scalars['String']['output']>;
};

export type Langchain_Chat_HistoriesSumAggregate = {
  __typename?: 'Langchain_chat_historiesSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type LearningTrack = {
  __typename?: 'LearningTrack';
  aboutDesc?: Maybe<Scalars['JSON']['output']>;
  campaign?: Maybe<Campaign>;
  campaignId?: Maybe<Scalars['String']['output']>;
  certification?: Maybe<Certification>;
  certificationId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intendedLearners?: Maybe<Scalars['JSON']['output']>;
  knowledgeGain?: Maybe<Scalars['JSON']['output']>;
  lang: Scalars['String']['output'];
  language: Language;
  level: CourseLevel;
  name: Scalars['String']['output'];
  sections: Scalars['JSON']['output'];
  track: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type LearningTrackCountAggregate = {
  __typename?: 'LearningTrackCountAggregate';
  _all: Scalars['Int']['output'];
  aboutDesc: Scalars['Int']['output'];
  campaignId: Scalars['Int']['output'];
  certificationId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  image: Scalars['Int']['output'];
  intendedLearners: Scalars['Int']['output'];
  knowledgeGain: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  language: Scalars['Int']['output'];
  level: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  sections: Scalars['Int']['output'];
  track: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type LearningTrackCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  aboutDesc?: InputMaybe<Scalars['Boolean']['input']>;
  campaignId?: InputMaybe<Scalars['Boolean']['input']>;
  certificationId?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  intendedLearners?: InputMaybe<Scalars['Boolean']['input']>;
  knowledgeGain?: InputMaybe<Scalars['Boolean']['input']>;
  lang?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['Boolean']['input']>;
  level?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  sections?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LearningTrackCountOrderByAggregateInput = {
  aboutDesc?: InputMaybe<SortOrder>;
  campaignId?: InputMaybe<SortOrder>;
  certificationId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  intendedLearners?: InputMaybe<SortOrder>;
  knowledgeGain?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  language?: InputMaybe<SortOrder>;
  level?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  sections?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type LearningTrackCreateInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  campaign?: InputMaybe<CampaignCreateNestedOneWithoutLearningTracksInput>;
  certification?: InputMaybe<CertificationCreateNestedOneWithoutLearningTrackInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level: CourseLevel;
  name: Scalars['String']['input'];
  sections: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LearningTrackCreateManyCampaignInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level: CourseLevel;
  name: Scalars['String']['input'];
  sections: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LearningTrackCreateManyCampaignInputEnvelope = {
  data: Array<LearningTrackCreateManyCampaignInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LearningTrackCreateManyCertificationInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  campaignId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level: CourseLevel;
  name: Scalars['String']['input'];
  sections: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LearningTrackCreateManyCertificationInputEnvelope = {
  data: Array<LearningTrackCreateManyCertificationInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LearningTrackCreateManyInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  campaignId?: InputMaybe<Scalars['String']['input']>;
  certificationId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level: CourseLevel;
  name: Scalars['String']['input'];
  sections: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LearningTrackCreateNestedManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<LearningTrackCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<LearningTrackCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<LearningTrackCreateManyCampaignInputEnvelope>;
};

export type LearningTrackCreateNestedManyWithoutCertificationInput = {
  connect?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<LearningTrackCreateOrConnectWithoutCertificationInput>>;
  create?: InputMaybe<Array<LearningTrackCreateWithoutCertificationInput>>;
  createMany?: InputMaybe<LearningTrackCreateManyCertificationInputEnvelope>;
};

export type LearningTrackCreateOrConnectWithoutCampaignInput = {
  create: LearningTrackCreateWithoutCampaignInput;
  where: LearningTrackWhereUniqueInput;
};

export type LearningTrackCreateOrConnectWithoutCertificationInput = {
  create: LearningTrackCreateWithoutCertificationInput;
  where: LearningTrackWhereUniqueInput;
};

export type LearningTrackCreateWithoutCampaignInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  certification?: InputMaybe<CertificationCreateNestedOneWithoutLearningTrackInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level: CourseLevel;
  name: Scalars['String']['input'];
  sections: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LearningTrackCreateWithoutCertificationInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  campaign?: InputMaybe<CampaignCreateNestedOneWithoutLearningTracksInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Language>;
  level: CourseLevel;
  name: Scalars['String']['input'];
  sections: Scalars['JSON']['input'];
  track?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type LearningTrackGroupBy = {
  __typename?: 'LearningTrackGroupBy';
  _count?: Maybe<LearningTrackCountAggregate>;
  _max?: Maybe<LearningTrackMaxAggregate>;
  _min?: Maybe<LearningTrackMinAggregate>;
  aboutDesc?: Maybe<Scalars['JSON']['output']>;
  campaignId?: Maybe<Scalars['String']['output']>;
  certificationId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intendedLearners?: Maybe<Scalars['JSON']['output']>;
  knowledgeGain?: Maybe<Scalars['JSON']['output']>;
  lang: Scalars['String']['output'];
  language: Language;
  level: CourseLevel;
  name: Scalars['String']['output'];
  sections: Scalars['JSON']['output'];
  track: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type LearningTrackListPaginated = {
  __typename?: 'LearningTrackListPaginated';
  data?: Maybe<Array<LearningTrack>>;
  total: Scalars['Int']['output'];
};

export type LearningTrackListRelationFilter = {
  every?: InputMaybe<LearningTrackWhereInput>;
  none?: InputMaybe<LearningTrackWhereInput>;
  some?: InputMaybe<LearningTrackWhereInput>;
};

export type LearningTrackMaxAggregate = {
  __typename?: 'LearningTrackMaxAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  certificationId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  name?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type LearningTrackMaxAggregateInput = {
  campaignId?: InputMaybe<Scalars['Boolean']['input']>;
  certificationId?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  lang?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['Boolean']['input']>;
  level?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LearningTrackMaxOrderByAggregateInput = {
  campaignId?: InputMaybe<SortOrder>;
  certificationId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  language?: InputMaybe<SortOrder>;
  level?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type LearningTrackMinAggregate = {
  __typename?: 'LearningTrackMinAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  certificationId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  name?: Maybe<Scalars['String']['output']>;
  track?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type LearningTrackMinAggregateInput = {
  campaignId?: InputMaybe<Scalars['Boolean']['input']>;
  certificationId?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['Boolean']['input']>;
  lang?: InputMaybe<Scalars['Boolean']['input']>;
  language?: InputMaybe<Scalars['Boolean']['input']>;
  level?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  track?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LearningTrackMinOrderByAggregateInput = {
  campaignId?: InputMaybe<SortOrder>;
  certificationId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrder>;
  lang?: InputMaybe<SortOrder>;
  language?: InputMaybe<SortOrder>;
  level?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type LearningTrackOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type LearningTrackOrderByWithAggregationInput = {
  _count?: InputMaybe<LearningTrackCountOrderByAggregateInput>;
  _max?: InputMaybe<LearningTrackMaxOrderByAggregateInput>;
  _min?: InputMaybe<LearningTrackMinOrderByAggregateInput>;
  aboutDesc?: InputMaybe<SortOrderInput>;
  campaignId?: InputMaybe<SortOrderInput>;
  certificationId?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrderInput>;
  intendedLearners?: InputMaybe<SortOrderInput>;
  knowledgeGain?: InputMaybe<SortOrderInput>;
  lang?: InputMaybe<SortOrder>;
  language?: InputMaybe<SortOrder>;
  level?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  sections?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type LearningTrackOrderByWithRelationInput = {
  aboutDesc?: InputMaybe<SortOrderInput>;
  campaign?: InputMaybe<CampaignOrderByWithRelationInput>;
  campaignId?: InputMaybe<SortOrderInput>;
  certification?: InputMaybe<CertificationOrderByWithRelationInput>;
  certificationId?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  image?: InputMaybe<SortOrderInput>;
  intendedLearners?: InputMaybe<SortOrderInput>;
  knowledgeGain?: InputMaybe<SortOrderInput>;
  lang?: InputMaybe<SortOrder>;
  language?: InputMaybe<SortOrder>;
  level?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  sections?: InputMaybe<SortOrder>;
  track?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum LearningTrackScalarFieldEnum {
  AboutDesc = 'aboutDesc',
  CampaignId = 'campaignId',
  CertificationId = 'certificationId',
  CreatedAt = 'createdAt',
  Description = 'description',
  Id = 'id',
  Image = 'image',
  IntendedLearners = 'intendedLearners',
  KnowledgeGain = 'knowledgeGain',
  Lang = 'lang',
  Language = 'language',
  Level = 'level',
  Name = 'name',
  Sections = 'sections',
  Track = 'track',
  UpdatedAt = 'updatedAt'
}

export type LearningTrackScalarWhereInput = {
  AND?: InputMaybe<Array<LearningTrackScalarWhereInput>>;
  NOT?: InputMaybe<Array<LearningTrackScalarWhereInput>>;
  OR?: InputMaybe<Array<LearningTrackScalarWhereInput>>;
  aboutDesc?: InputMaybe<JsonNullableFilter>;
  campaignId?: InputMaybe<UuidNullableFilter>;
  certificationId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringNullableFilter>;
  intendedLearners?: InputMaybe<JsonNullableFilter>;
  knowledgeGain?: InputMaybe<JsonNullableFilter>;
  lang?: InputMaybe<StringFilter>;
  language?: InputMaybe<EnumLanguageFilter>;
  level?: InputMaybe<EnumCourseLevelFilter>;
  name?: InputMaybe<StringFilter>;
  sections?: InputMaybe<JsonFilter>;
  track?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type LearningTrackScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<LearningTrackScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<LearningTrackScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<LearningTrackScalarWhereWithAggregatesInput>>;
  aboutDesc?: InputMaybe<JsonNullableWithAggregatesFilter>;
  campaignId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  certificationId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  description?: InputMaybe<StringNullableWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  image?: InputMaybe<StringNullableWithAggregatesFilter>;
  intendedLearners?: InputMaybe<JsonNullableWithAggregatesFilter>;
  knowledgeGain?: InputMaybe<JsonNullableWithAggregatesFilter>;
  lang?: InputMaybe<StringWithAggregatesFilter>;
  language?: InputMaybe<EnumLanguageWithAggregatesFilter>;
  level?: InputMaybe<EnumCourseLevelWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  sections?: InputMaybe<JsonWithAggregatesFilter>;
  track?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export enum LearningTrackStatus {
  Completed = 'COMPLETED',
  Started = 'STARTED',
  Unenroll = 'UNENROLL'
}

export type LearningTrackUpdateInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutLearningTracksNestedInput>;
  certification?: InputMaybe<CertificationUpdateOneWithoutLearningTrackNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  language?: InputMaybe<EnumLanguageFieldUpdateOperationsInput>;
  level?: InputMaybe<EnumCourseLevelFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sections?: InputMaybe<Scalars['JSON']['input']>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type LearningTrackUpdateManyMutationInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  language?: InputMaybe<EnumLanguageFieldUpdateOperationsInput>;
  level?: InputMaybe<EnumCourseLevelFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sections?: InputMaybe<Scalars['JSON']['input']>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type LearningTrackUpdateManyWithWhereWithoutCampaignInput = {
  data: LearningTrackUpdateManyMutationInput;
  where: LearningTrackScalarWhereInput;
};

export type LearningTrackUpdateManyWithWhereWithoutCertificationInput = {
  data: LearningTrackUpdateManyMutationInput;
  where: LearningTrackScalarWhereInput;
};

export type LearningTrackUpdateManyWithoutCampaignNestedInput = {
  connect?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<LearningTrackCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<LearningTrackCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<LearningTrackCreateManyCampaignInputEnvelope>;
  delete?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<LearningTrackScalarWhereInput>>;
  disconnect?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  set?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  update?: InputMaybe<Array<LearningTrackUpdateWithWhereUniqueWithoutCampaignInput>>;
  updateMany?: InputMaybe<Array<LearningTrackUpdateManyWithWhereWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<LearningTrackUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type LearningTrackUpdateManyWithoutCertificationNestedInput = {
  connect?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<LearningTrackCreateOrConnectWithoutCertificationInput>>;
  create?: InputMaybe<Array<LearningTrackCreateWithoutCertificationInput>>;
  createMany?: InputMaybe<LearningTrackCreateManyCertificationInputEnvelope>;
  delete?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<LearningTrackScalarWhereInput>>;
  disconnect?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  set?: InputMaybe<Array<LearningTrackWhereUniqueInput>>;
  update?: InputMaybe<Array<LearningTrackUpdateWithWhereUniqueWithoutCertificationInput>>;
  updateMany?: InputMaybe<Array<LearningTrackUpdateManyWithWhereWithoutCertificationInput>>;
  upsert?: InputMaybe<Array<LearningTrackUpsertWithWhereUniqueWithoutCertificationInput>>;
};

export type LearningTrackUpdateWithWhereUniqueWithoutCampaignInput = {
  data: LearningTrackUpdateWithoutCampaignInput;
  where: LearningTrackWhereUniqueInput;
};

export type LearningTrackUpdateWithWhereUniqueWithoutCertificationInput = {
  data: LearningTrackUpdateWithoutCertificationInput;
  where: LearningTrackWhereUniqueInput;
};

export type LearningTrackUpdateWithoutCampaignInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  certification?: InputMaybe<CertificationUpdateOneWithoutLearningTrackNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  language?: InputMaybe<EnumLanguageFieldUpdateOperationsInput>;
  level?: InputMaybe<EnumCourseLevelFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sections?: InputMaybe<Scalars['JSON']['input']>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type LearningTrackUpdateWithoutCertificationInput = {
  aboutDesc?: InputMaybe<Scalars['JSON']['input']>;
  campaign?: InputMaybe<CampaignUpdateOneWithoutLearningTracksNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  image?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  intendedLearners?: InputMaybe<Scalars['JSON']['input']>;
  knowledgeGain?: InputMaybe<Scalars['JSON']['input']>;
  lang?: InputMaybe<StringFieldUpdateOperationsInput>;
  language?: InputMaybe<EnumLanguageFieldUpdateOperationsInput>;
  level?: InputMaybe<EnumCourseLevelFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  sections?: InputMaybe<Scalars['JSON']['input']>;
  track?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type LearningTrackUpsertWithWhereUniqueWithoutCampaignInput = {
  create: LearningTrackCreateWithoutCampaignInput;
  update: LearningTrackUpdateWithoutCampaignInput;
  where: LearningTrackWhereUniqueInput;
};

export type LearningTrackUpsertWithWhereUniqueWithoutCertificationInput = {
  create: LearningTrackCreateWithoutCertificationInput;
  update: LearningTrackUpdateWithoutCertificationInput;
  where: LearningTrackWhereUniqueInput;
};

export type LearningTrackWhereInput = {
  AND?: InputMaybe<Array<LearningTrackWhereInput>>;
  NOT?: InputMaybe<Array<LearningTrackWhereInput>>;
  OR?: InputMaybe<Array<LearningTrackWhereInput>>;
  aboutDesc?: InputMaybe<JsonNullableFilter>;
  campaign?: InputMaybe<CampaignNullableRelationFilter>;
  campaignId?: InputMaybe<UuidNullableFilter>;
  certification?: InputMaybe<CertificationNullableRelationFilter>;
  certificationId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  image?: InputMaybe<StringNullableFilter>;
  intendedLearners?: InputMaybe<JsonNullableFilter>;
  knowledgeGain?: InputMaybe<JsonNullableFilter>;
  lang?: InputMaybe<StringFilter>;
  language?: InputMaybe<EnumLanguageFilter>;
  level?: InputMaybe<EnumCourseLevelFilter>;
  name?: InputMaybe<StringFilter>;
  sections?: InputMaybe<JsonFilter>;
  track?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type LearningTrackWhereUniqueInput = {
  AND?: InputMaybe<Array<LearningTrackWhereInput>>;
  NOT?: InputMaybe<Array<LearningTrackWhereInput>>;
  OR?: InputMaybe<Array<LearningTrackWhereInput>>;
  aboutDesc?: InputMaybe<JsonNullableFilter>;
  campaign?: InputMaybe<CampaignNullableRelationFilter>;
  campaignId?: InputMaybe<UuidNullableFilter>;
  certification?: InputMaybe<CertificationNullableRelationFilter>;
  certificationId?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<StringNullableFilter>;
  intendedLearners?: InputMaybe<JsonNullableFilter>;
  knowledgeGain?: InputMaybe<JsonNullableFilter>;
  lang?: InputMaybe<StringFilter>;
  language?: InputMaybe<EnumLanguageFilter>;
  level?: InputMaybe<EnumCourseLevelFilter>;
  name?: InputMaybe<StringFilter>;
  sections?: InputMaybe<JsonFilter>;
  track?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type LoginData = {
  __typename?: 'LoginData';
  access_token?: Maybe<Scalars['String']['output']>;
  error?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['Boolean']['output']>;
  user?: Maybe<User>;
};

export type MemberCreateInput = {
  allowContract?: InputMaybe<Scalars['Boolean']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  isRegister?: InputMaybe<Scalars['Boolean']['input']>;
  joinState?: InputMaybe<Scalars['String']['input']>;
  registerConfirm?: InputMaybe<Scalars['Boolean']['input']>;
  status: Scalars['String']['input'];
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

/** message type enum */
export enum MessageType {
  Chat = 'CHAT',
  ExpandContent = 'EXPAND_CONTENT',
  ExplainExamplae = 'EXPLAIN_EXAMPLAE',
  ExplainQuiz = 'EXPLAIN_QUIZ',
  RelatedContent = 'RELATED_CONTENT',
  SummarizeContetn = 'SUMMARIZE_CONTETN'
}

export type Mission = {
  __typename?: 'Mission';
  coin: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  description: Scalars['String']['output'];
  enabled: Scalars['Boolean']['output'];
  exp: Scalars['Int']['output'];
  extra?: Maybe<Scalars['JSON']['output']>;
  icon: Scalars['String']['output'];
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
  subType?: Maybe<MissionSubType>;
  type: MissionType;
};

export type MissionAvgAggregate = {
  __typename?: 'MissionAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
  exp?: Maybe<Scalars['Float']['output']>;
};

export type MissionCountAggregate = {
  __typename?: 'MissionCountAggregate';
  _all: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  enabled: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  extra: Scalars['Int']['output'];
  icon: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  subType: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
};

export type MissionCreateInput = {
  coin?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description: Scalars['String']['input'];
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Int']['input']>;
  extra?: InputMaybe<Scalars['JSON']['input']>;
  icon: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  subType?: InputMaybe<MissionSubType>;
  type: MissionType;
};

export type MissionMaxAggregate = {
  __typename?: 'MissionMaxAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  enabled?: Maybe<Scalars['Boolean']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  subType?: Maybe<MissionSubType>;
  type?: Maybe<MissionType>;
};

export type MissionMinAggregate = {
  __typename?: 'MissionMinAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  enabled?: Maybe<Scalars['Boolean']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  subType?: Maybe<MissionSubType>;
  type?: Maybe<MissionType>;
};

export type MissionProgressAvgAggregate = {
  __typename?: 'MissionProgressAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
  exp?: Maybe<Scalars['Float']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
};

export type MissionProgressCountAggregate = {
  __typename?: 'MissionProgressCountAggregate';
  _all: Scalars['Int']['output'];
  claimed: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  completeTime: Scalars['Int']['output'];
  completed: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  missionId: Scalars['Int']['output'];
  missionSubType: Scalars['Int']['output'];
  missionType: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  startTime: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type MissionProgressMaxAggregate = {
  __typename?: 'MissionProgressMaxAggregate';
  claimed?: Maybe<Scalars['Boolean']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  missionId?: Maybe<Scalars['String']['output']>;
  missionSubType?: Maybe<MissionSubType>;
  missionType?: Maybe<MissionType>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type MissionProgressMinAggregate = {
  __typename?: 'MissionProgressMinAggregate';
  claimed?: Maybe<Scalars['Boolean']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  missionId?: Maybe<Scalars['String']['output']>;
  missionSubType?: Maybe<MissionSubType>;
  missionType?: Maybe<MissionType>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type MissionProgressSumAggregate = {
  __typename?: 'MissionProgressSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Array<Scalars['Int']['output']>>;
};

export enum MissionSubType {
  CompleteCourse = 'COMPLETE_COURSE',
  CompleteCourseInOneDay = 'COMPLETE_COURSE_IN_ONE_DAY',
  CompleteLearningTrack = 'COMPLETE_LEARNING_TRACK',
  EnrollLearningTrack = 'ENROLL_LEARNING_TRACK',
  InviteUser = 'INVITE_USER',
  JoinDiscord = 'JOIN_DISCORD',
  LinkMetamask = 'LINK_METAMASK',
  QuestWinStreak = 'QUEST_WIN_STREAK',
  RegisterAccount = 'REGISTER_ACCOUNT'
}

export type MissionSumAggregate = {
  __typename?: 'MissionSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
};

export enum MissionType {
  BeginnerRewards = 'BEGINNER_REWARDS',
  DailyBonus = 'DAILY_BONUS',
  DailyQuest = 'DAILY_QUEST',
  Milestones = 'MILESTONES'
}

export enum ModeEnum {
  Hybrid = 'HYBRID',
  Online = 'ONLINE'
}

export type Mutation = {
  __typename?: 'Mutation';
  activateUser: LoginData;
  /** announce judge */
  announceJudge?: Maybe<Array<HackathonWinnerExtend>>;
  claimCertification: Scalars['Boolean']['output'];
  claimPhaseReward?: Maybe<EcosystemInfo>;
  completeHackathonTodo?: Maybe<Scalars['Boolean']['output']>;
  completeLearning: Scalars['Boolean']['output'];
  connectDiscord: Scalars['Boolean']['output'];
  connectGithub: Scalars['Boolean']['output'];
  connectWallet: Scalars['Boolean']['output'];
  copyProject?: Maybe<ProjectExtend>;
  /** 创建和修改HackathonAnnouncement */
  createAndUpdateHackathonAnnouncement?: Maybe<HackathonAnnouncement>;
  createAttestation?: Maybe<Attestation>;
  createBlog?: Maybe<Blog>;
  createCertification?: Maybe<Certification>;
  createCoLearning?: Maybe<CoLearning>;
  createCoLearningEvent?: Maybe<CoLearningEvent>;
  createCoLearningMember?: Maybe<CoLearningMember>;
  createCoLearningTimeline?: Maybe<CoLearningTimeline>;
  createCoLearningTodo?: Maybe<CoLearningTodo>;
  createCourseEcosystem?: Maybe<CourseEcosystem>;
  createCourseLearningTrack?: Maybe<CourseLearningTrack>;
  createCustomKeyword?: Maybe<CustomKeyword>;
  createDailyChallenge?: Maybe<DailyChallenge>;
  createDocs?: Maybe<Docs>;
  createDocumentation?: Maybe<Documentation>;
  createEvents?: Maybe<Events>;
  createFaucet?: Maybe<Faucet>;
  createFaucetClaim?: Maybe<FaucetClaimResponse>;
  createGlossary?: Maybe<Glossary>;
  createHackathon?: Maybe<HackathonExtend>;
  createHackathonReword?: Maybe<HackathonRewards>;
  createHackathonSchedule?: Maybe<HackathonSchedule>;
  createHackathonTodo?: Maybe<HackathonTodo>;
  /** 添加 hackathon management Distribution UTM Sources */
  createHackathonUTM?: Maybe<HackathonUtmExtend>;
  /** 创建winner */
  createHackathonWinner?: Maybe<HackathonWinnerExtend>;
  createIdeaBank?: Maybe<IdeaBank>;
  createJobFavorite?: Maybe<JobFavorite>;
  createJobStation?: Maybe<JobStation>;
  createJobTag?: Maybe<JobTag>;
  createJudgeAccount?: Maybe<JudgeAccount>;
  createLearningTrack?: Maybe<LearningTrack>;
  createManyBlog?: Maybe<AffectedRows>;
  createManyCertification?: Maybe<AffectedRows>;
  createManyCourseEcosystem?: Maybe<AffectedRows>;
  createManyCourseLearningTrack?: Maybe<AffectedRows>;
  createManyCustomKeyword?: Maybe<AffectedRows>;
  createManyDailyChallenge?: Maybe<AffectedRows>;
  createManyDocs?: Maybe<AffectedRows>;
  createManyDocumentation?: Maybe<AffectedRows>;
  createManyEvents?: Maybe<AffectedRows>;
  createManyFaucet?: Maybe<AffectedRows>;
  createManyGlossary?: Maybe<AffectedRows>;
  createManyIdeaBank?: Maybe<AffectedRows>;
  createManyJobStation?: Maybe<AffectedRows>;
  createManyJobTag?: Maybe<AffectedRows>;
  createManyLearningTrack?: Maybe<AffectedRows>;
  createManyNotification?: Maybe<AffectedRows>;
  createManyPageView?: Maybe<AffectedRows>;
  createManyPartnerShip?: Maybe<AffectedRows>;
  createManyProgress?: Maybe<AffectedRows>;
  createManyProject?: Maybe<AffectedRows>;
  createManyThirdUser?: Maybe<AffectedRows>;
  createManyTreasure?: Maybe<AffectedRows>;
  createManyUnit?: Maybe<AffectedRows>;
  createManyUser?: Maybe<AffectedRows>;
  createManyUserClaimFaucetRecord?: Maybe<AffectedRows>;
  createMission?: Maybe<Mission>;
  createNotification?: Maybe<Notification>;
  createPageView?: Maybe<PageView>;
  createPartnerShip?: Maybe<PartnerShip>;
  createProgress?: Maybe<ProgressV2>;
  createProject?: Maybe<ProjectExtend>;
  createThirdUser?: Maybe<ThirdUser>;
  createTreasure?: Maybe<Treasure>;
  createUnit?: Maybe<UnitV2>;
  createUser?: Maybe<User>;
  createUserClaimFaucetRecord?: Maybe<UserClaimFaucetRecord>;
  createUserResume?: Maybe<UserResume>;
  createUserWorkExperience?: Maybe<WorkExperience>;
  deleteAttestation?: Maybe<Attestation>;
  deleteBlog?: Maybe<Blog>;
  deleteCertification?: Maybe<Certification>;
  deleteCoLearningEvent?: Maybe<CoLearningEvent>;
  deleteCoLearningTodo?: Maybe<CoLearningTodo>;
  deleteCourseEcosystem?: Maybe<CourseEcosystem>;
  deleteCourseLearningTrack?: Maybe<CourseLearningTrack>;
  deleteCustomKeyword?: Maybe<CustomKeyword>;
  deleteDailyChallenge?: Maybe<DailyChallenge>;
  deleteDocs?: Maybe<Docs>;
  deleteDocumentation?: Maybe<Documentation>;
  deleteEvents?: Maybe<Events>;
  deleteFaucet?: Maybe<Faucet>;
  deleteGlossary?: Maybe<Glossary>;
  deleteHackathon?: Maybe<Scalars['Boolean']['output']>;
  /** 创建和修改HackathonAnnouncement */
  deleteHackathonAnnouncement?: Maybe<HackathonAnnouncement>;
  deleteHackathonReward?: Maybe<Scalars['Boolean']['output']>;
  deleteHackathonSchedule?: Maybe<HackathonSchedule>;
  deleteHackathonTodo?: Maybe<HackathonTodo>;
  /** 删除 hackathon management Distribution UTM Sources */
  deleteHackathonUTM?: Maybe<HackathonUtmExtend>;
  /** 修改winner */
  deleteHackathonWinner?: Maybe<HackathonWinnerExtend>;
  deleteIdeaBank?: Maybe<IdeaBank>;
  deleteJobFavorite?: Maybe<JobFavorite>;
  deleteJobStation?: Maybe<JobStation>;
  deleteJobTag?: Maybe<JobTag>;
  deleteJudgeAccount?: Maybe<Scalars['Boolean']['output']>;
  deleteLearningTrack?: Maybe<LearningTrack>;
  deleteManyBlog?: Maybe<AffectedRows>;
  deleteManyCertification?: Maybe<AffectedRows>;
  deleteManyCourseEcosystem?: Maybe<AffectedRows>;
  deleteManyCourseLearningTrack?: Maybe<AffectedRows>;
  deleteManyCustomKeyword?: Maybe<AffectedRows>;
  deleteManyDailyChallenge?: Maybe<AffectedRows>;
  deleteManyDocs?: Maybe<AffectedRows>;
  deleteManyDocumentation?: Maybe<AffectedRows>;
  deleteManyEvents?: Maybe<AffectedRows>;
  deleteManyFaucet?: Maybe<AffectedRows>;
  deleteManyGlossary?: Maybe<AffectedRows>;
  deleteManyIdeaBank?: Maybe<AffectedRows>;
  deleteManyJobStation?: Maybe<AffectedRows>;
  deleteManyJobTag?: Maybe<AffectedRows>;
  deleteManyLearningTrack?: Maybe<AffectedRows>;
  deleteManyNotification?: Maybe<AffectedRows>;
  deleteManyPageView?: Maybe<AffectedRows>;
  deleteManyPartnerShip?: Maybe<AffectedRows>;
  deleteManyProgress?: Maybe<AffectedRows>;
  deleteManyThirdUser?: Maybe<AffectedRows>;
  deleteManyTreasure?: Maybe<AffectedRows>;
  deleteManyUnit?: Maybe<AffectedRows>;
  deleteManyUser?: Maybe<AffectedRows>;
  deleteManyUserClaimFaucetRecord?: Maybe<AffectedRows>;
  deleteNotification?: Maybe<Notification>;
  deletePageView?: Maybe<PageView>;
  deletePartnerShip?: Maybe<PartnerShip>;
  deleteProgress?: Maybe<ProgressV2>;
  deleteThirdUser?: Maybe<ThirdUser>;
  deleteTreasure?: Maybe<Treasure>;
  deleteUnit?: Maybe<UnitV2>;
  deleteUser?: Maybe<User>;
  deleteUserClaimFaucetRecord?: Maybe<UserClaimFaucetRecord>;
  deleteUserResume?: Maybe<Scalars['Boolean']['output']>;
  deleteUserWorkExperience?: Maybe<Scalars['Boolean']['output']>;
  disconnectDiscord: Scalars['Boolean']['output'];
  disconnectGithub?: Maybe<Scalars['Boolean']['output']>;
  disconnectWallet: Scalars['Boolean']['output'];
  emailExists: Scalars['Boolean']['output'];
  fileUpload: Scalars['String']['output'];
  getCertificationSignature: CertificationSignature;
  hackathonConfirm?: Maybe<Scalars['Boolean']['output']>;
  hackathonRegister?: Maybe<HackathonMemberExtend>;
  inviteCodeExists: Scalars['Boolean']['output'];
  joinProject?: Maybe<Scalars['Boolean']['output']>;
  judgeBatchByScore?: Maybe<Scalars['Boolean']['output']>;
  judgeBatchByVote?: Maybe<Scalars['Boolean']['output']>;
  likeProject?: Maybe<Project>;
  login: LoginData;
  mintCertification: Scalars['Boolean']['output'];
  projectSubmit?: Maybe<Project>;
  projectVote?: Maybe<Scalars['Boolean']['output']>;
  publishHackathon?: Maybe<HackathonExtend>;
  quitHackathon?: Maybe<Scalars['Boolean']['output']>;
  quitProject?: Maybe<Scalars['Boolean']['output']>;
  quitProjectFromHackathon?: Maybe<Scalars['Boolean']['output']>;
  remainingVotes?: Maybe<UserRemainingVotes>;
  removeMember?: Maybe<Scalars['Boolean']['output']>;
  resendConfirmEmail: Scalars['Boolean']['output'];
  resetPassword: Scalars['Boolean']['output'];
  /** 重置密码发送验证邮件 */
  resetPasswordEmail: Scalars['Boolean']['output'];
  sendContactEmail?: Maybe<Scalars['Boolean']['output']>;
  sendNotification?: Maybe<AffectedRows>;
  sendSuggest?: Maybe<Scalars['Boolean']['output']>;
  switchEcosystem: Scalars['Boolean']['output'];
  toggleSchedule: Scalars['String']['output'];
  updateBlog?: Maybe<Blog>;
  updateCertification?: Maybe<Certification>;
  updateCoLearning?: Maybe<CoLearning>;
  updateCoLearningTimeline?: Maybe<CoLearningTimeline>;
  updateCourseEcosystem?: Maybe<CourseEcosystem>;
  updateCourseLearningTrack?: Maybe<CourseLearningTrack>;
  updateCustomKeyword?: Maybe<CustomKeyword>;
  updateDailyChallenge?: Maybe<DailyChallenge>;
  updateDocs?: Maybe<Docs>;
  updateDocumentation?: Maybe<Documentation>;
  updateEvents?: Maybe<Events>;
  updateFaucet?: Maybe<Faucet>;
  updateGlossary?: Maybe<Glossary>;
  updateHackathon?: Maybe<HackathonExtend>;
  updateHackathonReward?: Maybe<HackathonRewards>;
  updateHackathonSchedule?: Maybe<HackathonSchedule>;
  updateHackathonTodo?: Maybe<HackathonTodo>;
  /** 修改 hackathon management Distribution UTM Sources */
  updateHackathonUTM?: Maybe<HackathonUtmExtend>;
  /** 修改winner */
  updateHackathonWinner?: Maybe<Scalars['Int']['output']>;
  updateIdeaBank?: Maybe<IdeaBank>;
  updateJobStation?: Maybe<JobStation>;
  updateJobTag?: Maybe<JobTag>;
  updateJudge?: Maybe<HackathonJudge>;
  updateJudgeAccount?: Maybe<JudgeAccount>;
  updateLearningTrack?: Maybe<LearningTrack>;
  updateManyBlog?: Maybe<AffectedRows>;
  updateManyCertification?: Maybe<AffectedRows>;
  updateManyCourseEcosystem?: Maybe<AffectedRows>;
  updateManyCourseLearningTrack?: Maybe<AffectedRows>;
  updateManyCustomKeyword?: Maybe<AffectedRows>;
  updateManyDailyChallenge?: Maybe<AffectedRows>;
  updateManyDocs?: Maybe<AffectedRows>;
  updateManyDocumentation?: Maybe<AffectedRows>;
  updateManyEvents?: Maybe<AffectedRows>;
  updateManyFaucet?: Maybe<AffectedRows>;
  updateManyGlossary?: Maybe<AffectedRows>;
  updateManyIdeaBank?: Maybe<AffectedRows>;
  updateManyJobStation?: Maybe<AffectedRows>;
  updateManyJobTag?: Maybe<AffectedRows>;
  updateManyLearningTrack?: Maybe<AffectedRows>;
  updateManyNotification?: Maybe<AffectedRows>;
  /** 批量更新 member 参与状态 */
  updateManyOrganizerApplicationMemberStatus?: Maybe<Scalars['Int']['output']>;
  updateManyPageView?: Maybe<AffectedRows>;
  updateManyPartnerShip?: Maybe<AffectedRows>;
  updateManyProgress?: Maybe<AffectedRows>;
  updateManyThirdUser?: Maybe<AffectedRows>;
  updateManyTreasure?: Maybe<AffectedRows>;
  updateManyUnit?: Maybe<AffectedRows>;
  updateManyUser?: Maybe<AffectedRows>;
  updateManyUserClaimFaucetRecord?: Maybe<AffectedRows>;
  updateNotification?: Maybe<Notification>;
  updatePageView?: Maybe<PageView>;
  updatePartnerShip?: Maybe<PartnerShip>;
  updateProgress?: Maybe<ProgressV2>;
  updateProject?: Maybe<ProjectExtend>;
  updateThirdUser?: Maybe<ThirdUser>;
  updateTreasure?: Maybe<Treasure>;
  updateUnit?: Maybe<UnitV2>;
  updateUser?: Maybe<User>;
  updateUserClaimFaucetRecord?: Maybe<UserClaimFaucetRecord>;
  updateUserLeaningPhase?: Maybe<Scalars['Boolean']['output']>;
  updateUserProfile?: Maybe<UserProfile>;
  updateUserWorkExperience?: Maybe<WorkExperience>;
  verifyContactEmail?: Maybe<Scalars['Boolean']['output']>;
};


export type MutationActivateUserArgs = {
  access_token: Scalars['String']['input'];
};


export type MutationAnnounceJudgeArgs = {
  hackathonId: Scalars['String']['input'];
  id: Scalars['String']['input'];
};


export type MutationClaimCertificationArgs = {
  ecosystemId: Scalars['String']['input'];
};


export type MutationClaimPhaseRewardArgs = {
  phaseId: Scalars['String']['input'];
};


export type MutationCompleteHackathonTodoArgs = {
  todoId: Scalars['String']['input'];
};


export type MutationCompleteLearningArgs = {
  id: Scalars['String']['input'];
};


export type MutationConnectDiscordArgs = {
  accessToken: Scalars['String']['input'];
};


export type MutationConnectGithubArgs = {
  accessToken: Scalars['String']['input'];
};


export type MutationConnectWalletArgs = {
  address: Scalars['String']['input'];
};


export type MutationCopyProjectArgs = {
  id: Scalars['String']['input'];
};


export type MutationCreateAndUpdateHackathonAnnouncementArgs = {
  data: HackathonAnnouncementInput;
};


export type MutationCreateAttestationArgs = {
  data: AttestationCreateInput;
};


export type MutationCreateBlogArgs = {
  data: BlogCreateInput;
};


export type MutationCreateCertificationArgs = {
  data: CertificationCreateInput;
};


export type MutationCreateCoLearningArgs = {
  data: CoLearningCreateInput;
};


export type MutationCreateCoLearningEventArgs = {
  data: CoLearningEventCreateInput;
};


export type MutationCreateCoLearningMemberArgs = {
  data: CoLearningMemberCreateInput;
};


export type MutationCreateCoLearningTimelineArgs = {
  data: CoLearningTimelineCreateInput;
};


export type MutationCreateCoLearningTodoArgs = {
  data: CoLearningTodoCreateInput;
};


export type MutationCreateCourseEcosystemArgs = {
  data: CourseEcosystemCreateInput;
};


export type MutationCreateCourseLearningTrackArgs = {
  data: CourseLearningTrackCreateInput;
};


export type MutationCreateCustomKeywordArgs = {
  data: CustomKeywordCreateInput;
};


export type MutationCreateDailyChallengeArgs = {
  data: DailyChallengeCreateInput;
};


export type MutationCreateDocsArgs = {
  data: DocsCreateInput;
};


export type MutationCreateDocumentationArgs = {
  data: DocumentationCreateInput;
};


export type MutationCreateEventsArgs = {
  data: EventsCreateInput;
};


export type MutationCreateFaucetArgs = {
  data: FaucetCreateInput;
};


export type MutationCreateFaucetClaimArgs = {
  address: Scalars['String']['input'];
  chainId: Scalars['Int']['input'];
};


export type MutationCreateGlossaryArgs = {
  data: GlossaryCreateInput;
};


export type MutationCreateHackathonArgs = {
  name: Scalars['String']['input'];
};


export type MutationCreateHackathonRewordArgs = {
  data: HackathonRewardCreateInputExtend;
  hackathonId: Scalars['String']['input'];
};


export type MutationCreateHackathonScheduleArgs = {
  data: HackathonScheduleCreateInputExtend;
  hackathonId: Scalars['String']['input'];
};


export type MutationCreateHackathonTodoArgs = {
  data: HackathonTodoCreateInputExtend;
  hackathonId: Scalars['String']['input'];
};


export type MutationCreateHackathonUtmArgs = {
  data: HackathonUtmCreateInput;
};


export type MutationCreateHackathonWinnerArgs = {
  data: HackathonWinnerInputExtend;
};


export type MutationCreateIdeaBankArgs = {
  data: IdeaBankCreateInput;
};


export type MutationCreateJobFavoriteArgs = {
  data: JobFavoriteCreateInput;
};


export type MutationCreateJobStationArgs = {
  data: JobStationCreateInput;
};


export type MutationCreateJobTagArgs = {
  data: JobTagCreateInput;
};


export type MutationCreateJudgeAccountArgs = {
  judgeId: Scalars['String']['input'];
};


export type MutationCreateLearningTrackArgs = {
  data: LearningTrackCreateInput;
};


export type MutationCreateManyBlogArgs = {
  data: Array<BlogCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCertificationArgs = {
  data: Array<CertificationCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCourseEcosystemArgs = {
  data: Array<CourseEcosystemCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCourseLearningTrackArgs = {
  data: Array<CourseLearningTrackCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCustomKeywordArgs = {
  data: Array<CustomKeywordCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyDailyChallengeArgs = {
  data: Array<DailyChallengeCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyDocsArgs = {
  data: Array<DocsCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyDocumentationArgs = {
  data: Array<DocumentationCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyEventsArgs = {
  data: Array<EventsCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyFaucetArgs = {
  data: Array<FaucetCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyGlossaryArgs = {
  data: Array<GlossaryCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyIdeaBankArgs = {
  data: Array<IdeaBankCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyJobStationArgs = {
  data: Array<JobStationCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyJobTagArgs = {
  data: Array<JobTagCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyLearningTrackArgs = {
  data: Array<LearningTrackCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyNotificationArgs = {
  data: Array<NotificationCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyPageViewArgs = {
  data: Array<PageViewCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyPartnerShipArgs = {
  data: Array<PartnerShipCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyProgressArgs = {
  data: Array<ProgressV2CreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyProjectArgs = {
  data: Array<ProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyThirdUserArgs = {
  data: Array<ThirdUserCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyTreasureArgs = {
  data: Array<TreasureCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUnitArgs = {
  data: Array<UnitV2CreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserArgs = {
  data: Array<UserCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserClaimFaucetRecordArgs = {
  data: Array<UserClaimFaucetRecordCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateMissionArgs = {
  data: MissionCreateInput;
};


export type MutationCreateNotificationArgs = {
  data: NotificationCreateInput;
};


export type MutationCreatePageViewArgs = {
  data: PageViewCreateInput;
};


export type MutationCreatePartnerShipArgs = {
  data: PartnerShipCreateInput;
};


export type MutationCreateProgressArgs = {
  data: ProgressV2CreateInput;
};


export type MutationCreateProjectArgs = {
  data?: InputMaybe<ProjectCreateInput>;
};


export type MutationCreateThirdUserArgs = {
  data: ThirdUserCreateInput;
};


export type MutationCreateTreasureArgs = {
  data: TreasureCreateInput;
};


export type MutationCreateUnitArgs = {
  data: UnitV2CreateInput;
};


export type MutationCreateUserArgs = {
  email: Scalars['String']['input'];
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
};


export type MutationCreateUserClaimFaucetRecordArgs = {
  data: UserClaimFaucetRecordCreateInput;
};


export type MutationCreateUserResumeArgs = {
  data: UserResumeCreateWithoutUserInput;
};


export type MutationCreateUserWorkExperienceArgs = {
  data: WorkExperienceCreateWithoutUserProfileInput;
};


export type MutationDeleteAttestationArgs = {
  attestationId: Scalars['String']['input'];
};


export type MutationDeleteBlogArgs = {
  where: BlogWhereUniqueInput;
};


export type MutationDeleteCertificationArgs = {
  where: CertificationWhereUniqueInput;
};


export type MutationDeleteCoLearningEventArgs = {
  where: CoLearningEventWhereUniqueInput;
};


export type MutationDeleteCoLearningTodoArgs = {
  where: CoLearningTodoWhereUniqueInput;
};


export type MutationDeleteCourseEcosystemArgs = {
  where: CourseEcosystemWhereUniqueInput;
};


export type MutationDeleteCourseLearningTrackArgs = {
  where: CourseLearningTrackWhereUniqueInput;
};


export type MutationDeleteCustomKeywordArgs = {
  where: CustomKeywordWhereUniqueInput;
};


export type MutationDeleteDailyChallengeArgs = {
  where: DailyChallengeWhereUniqueInput;
};


export type MutationDeleteDocsArgs = {
  where: DocsWhereUniqueInput;
};


export type MutationDeleteDocumentationArgs = {
  where: DocumentationWhereUniqueInput;
};


export type MutationDeleteEventsArgs = {
  where: EventsWhereUniqueInput;
};


export type MutationDeleteFaucetArgs = {
  where: FaucetWhereUniqueInput;
};


export type MutationDeleteGlossaryArgs = {
  where: GlossaryWhereUniqueInput;
};


export type MutationDeleteHackathonArgs = {
  hackathonId: Scalars['String']['input'];
};


export type MutationDeleteHackathonAnnouncementArgs = {
  hackathonId: Scalars['String']['input'];
  id: Scalars['Float']['input'];
};


export type MutationDeleteHackathonRewardArgs = {
  rewardId: Scalars['String']['input'];
};


export type MutationDeleteHackathonScheduleArgs = {
  scheduleId: Scalars['String']['input'];
};


export type MutationDeleteHackathonTodoArgs = {
  todoId: Scalars['String']['input'];
};


export type MutationDeleteHackathonUtmArgs = {
  where: HackathonUtmWhereUniqueInput;
};


export type MutationDeleteHackathonWinnerArgs = {
  id: Scalars['String']['input'];
  winnderId: Scalars['String']['input'];
};


export type MutationDeleteIdeaBankArgs = {
  where: IdeaBankWhereUniqueInput;
};


export type MutationDeleteJobFavoriteArgs = {
  where: JobFavoriteWhereUniqueInput;
};


export type MutationDeleteJobStationArgs = {
  where: JobStationWhereUniqueInput;
};


export type MutationDeleteJobTagArgs = {
  where: JobTagWhereUniqueInput;
};


export type MutationDeleteJudgeAccountArgs = {
  accountId: Scalars['String']['input'];
  judgeId: Scalars['String']['input'];
};


export type MutationDeleteLearningTrackArgs = {
  where: LearningTrackWhereUniqueInput;
};


export type MutationDeleteManyBlogArgs = {
  where?: InputMaybe<BlogWhereInput>;
};


export type MutationDeleteManyCertificationArgs = {
  where?: InputMaybe<CertificationWhereInput>;
};


export type MutationDeleteManyCourseEcosystemArgs = {
  where?: InputMaybe<CourseEcosystemWhereInput>;
};


export type MutationDeleteManyCourseLearningTrackArgs = {
  where?: InputMaybe<CourseLearningTrackWhereInput>;
};


export type MutationDeleteManyCustomKeywordArgs = {
  where?: InputMaybe<CustomKeywordWhereInput>;
};


export type MutationDeleteManyDailyChallengeArgs = {
  where?: InputMaybe<DailyChallengeWhereInput>;
};


export type MutationDeleteManyDocsArgs = {
  where?: InputMaybe<DocsWhereInput>;
};


export type MutationDeleteManyDocumentationArgs = {
  where?: InputMaybe<DocumentationWhereInput>;
};


export type MutationDeleteManyEventsArgs = {
  where?: InputMaybe<EventsWhereInput>;
};


export type MutationDeleteManyFaucetArgs = {
  where?: InputMaybe<FaucetWhereInput>;
};


export type MutationDeleteManyGlossaryArgs = {
  where?: InputMaybe<GlossaryWhereInput>;
};


export type MutationDeleteManyIdeaBankArgs = {
  where?: InputMaybe<IdeaBankWhereInput>;
};


export type MutationDeleteManyJobStationArgs = {
  where?: InputMaybe<JobStationWhereInput>;
};


export type MutationDeleteManyJobTagArgs = {
  where?: InputMaybe<JobTagWhereInput>;
};


export type MutationDeleteManyLearningTrackArgs = {
  where?: InputMaybe<LearningTrackWhereInput>;
};


export type MutationDeleteManyNotificationArgs = {
  where?: InputMaybe<NotificationWhereInput>;
};


export type MutationDeleteManyPageViewArgs = {
  where?: InputMaybe<PageViewWhereInput>;
};


export type MutationDeleteManyPartnerShipArgs = {
  where?: InputMaybe<PartnerShipWhereInput>;
};


export type MutationDeleteManyProgressArgs = {
  where?: InputMaybe<ProgressV2WhereInput>;
};


export type MutationDeleteManyThirdUserArgs = {
  where?: InputMaybe<ThirdUserWhereInput>;
};


export type MutationDeleteManyTreasureArgs = {
  where?: InputMaybe<TreasureWhereInput>;
};


export type MutationDeleteManyUnitArgs = {
  where?: InputMaybe<UnitV2WhereInput>;
};


export type MutationDeleteManyUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type MutationDeleteManyUserClaimFaucetRecordArgs = {
  where?: InputMaybe<UserClaimFaucetRecordWhereInput>;
};


export type MutationDeleteNotificationArgs = {
  where: NotificationWhereUniqueInput;
};


export type MutationDeletePageViewArgs = {
  where: PageViewWhereUniqueInput;
};


export type MutationDeletePartnerShipArgs = {
  where: PartnerShipWhereUniqueInput;
};


export type MutationDeleteProgressArgs = {
  where: ProgressV2WhereUniqueInput;
};


export type MutationDeleteThirdUserArgs = {
  where: ThirdUserWhereUniqueInput;
};


export type MutationDeleteTreasureArgs = {
  where: TreasureWhereUniqueInput;
};


export type MutationDeleteUnitArgs = {
  where: UnitV2WhereUniqueInput;
};


export type MutationDeleteUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDeleteUserClaimFaucetRecordArgs = {
  where: UserClaimFaucetRecordWhereUniqueInput;
};


export type MutationDeleteUserResumeArgs = {
  resumeId: Scalars['Float']['input'];
};


export type MutationDeleteUserWorkExperienceArgs = {
  experienceId: Scalars['String']['input'];
};


export type MutationEmailExistsArgs = {
  email: Scalars['String']['input'];
};


export type MutationFileUploadArgs = {
  files: Array<Scalars['Upload']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  path: Scalars['String']['input'];
};


export type MutationGetCertificationSignatureArgs = {
  address: Scalars['String']['input'];
  certificationId: Scalars['String']['input'];
};


export type MutationHackathonConfirmArgs = {
  hackathonId: Scalars['String']['input'];
};


export type MutationHackathonRegisterArgs = {
  data: MemberCreateInput;
  hackathonId: Scalars['String']['input'];
};


export type MutationInviteCodeExistsArgs = {
  inviteCode: Scalars['String']['input'];
};


export type MutationJoinProjectArgs = {
  where: HackathonTeamWhereUniqueInput;
};


export type MutationJudgeBatchByScoreArgs = {
  data: Array<HackathonVoteInput>;
  hackathonId: Scalars['String']['input'];
};


export type MutationJudgeBatchByVoteArgs = {
  data: Array<HackathonVoteInput>;
  hackathonId: Scalars['String']['input'];
};


export type MutationLikeProjectArgs = {
  id: Scalars['String']['input'];
};


export type MutationLoginArgs = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationMintCertificationArgs = {
  certificationId: Scalars['String']['input'];
  txId: Scalars['String']['input'];
};


export type MutationProjectSubmitArgs = {
  ProjectSubmitInput: ProjectSubmitInput;
};


export type MutationProjectVoteArgs = {
  data: HackathonVoteInput;
  rewardId: Scalars['Float']['input'];
};


export type MutationPublishHackathonArgs = {
  id: Scalars['String']['input'];
};


export type MutationQuitHackathonArgs = {
  hackathonId: Scalars['String']['input'];
};


export type MutationQuitProjectArgs = {
  id: Scalars['String']['input'];
};


export type MutationQuitProjectFromHackathonArgs = {
  projectId: Scalars['String']['input'];
};


export type MutationRemainingVotesArgs = {
  rewardId: Scalars['Float']['input'];
};


export type MutationRemoveMemberArgs = {
  memberId: Scalars['String']['input'];
  projectId: Scalars['String']['input'];
};


export type MutationResendConfirmEmailArgs = {
  email: Scalars['String']['input'];
};


export type MutationResetPasswordArgs = {
  access_token: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type MutationResetPasswordEmailArgs = {
  email: Scalars['String']['input'];
};


export type MutationSendContactEmailArgs = {
  email: Scalars['String']['input'];
};


export type MutationSendNotificationArgs = {
  data: SendNotificationInput;
  where?: InputMaybe<SendNotificationWhere>;
};


export type MutationSendSuggestArgs = {
  input: SendSuggestInput;
};


export type MutationSwitchEcosystemArgs = {
  ecosystemId?: InputMaybe<Scalars['String']['input']>;
};


export type MutationToggleScheduleArgs = {
  id: Scalars['String']['input'];
  isStart: Scalars['Boolean']['input'];
  type: Array<TemplateType>;
};


export type MutationUpdateBlogArgs = {
  data: BlogUpdateInput;
  where: BlogWhereUniqueInput;
};


export type MutationUpdateCertificationArgs = {
  data: CertificationUpdateInput;
  where: CertificationWhereUniqueInput;
};


export type MutationUpdateCoLearningArgs = {
  data: CoLearningUpdateInput;
  id: Scalars['String']['input'];
};


export type MutationUpdateCoLearningTimelineArgs = {
  data: CoLearningTimelineUpdateInput;
  where: CoLearningTimelineWhereUniqueInput;
};


export type MutationUpdateCourseEcosystemArgs = {
  data: CourseEcosystemUpdateInput;
  where: CourseEcosystemWhereUniqueInput;
};


export type MutationUpdateCourseLearningTrackArgs = {
  data: CourseLearningTrackUpdateInput;
  where: CourseLearningTrackWhereUniqueInput;
};


export type MutationUpdateCustomKeywordArgs = {
  data: CustomKeywordUpdateInput;
  where: CustomKeywordWhereUniqueInput;
};


export type MutationUpdateDailyChallengeArgs = {
  data: DailyChallengeUpdateInput;
  where: DailyChallengeWhereUniqueInput;
};


export type MutationUpdateDocsArgs = {
  data: DocsUpdateInput;
  where: DocsWhereUniqueInput;
};


export type MutationUpdateDocumentationArgs = {
  data: DocumentationUpdateInput;
  where: DocumentationWhereUniqueInput;
};


export type MutationUpdateEventsArgs = {
  data: EventsUpdateInput;
  where: EventsWhereUniqueInput;
};


export type MutationUpdateFaucetArgs = {
  data: FaucetUpdateInput;
  where: FaucetWhereUniqueInput;
};


export type MutationUpdateGlossaryArgs = {
  data: GlossaryUpdateInput;
  where: GlossaryWhereUniqueInput;
};


export type MutationUpdateHackathonArgs = {
  data: HackathonUpdateInputExtend;
  id: Scalars['String']['input'];
};


export type MutationUpdateHackathonRewardArgs = {
  data: HackathonRewardUpdateInputExtend;
  rewardId: Scalars['String']['input'];
};


export type MutationUpdateHackathonScheduleArgs = {
  data: HackathonScheduleUpdateInputExtend;
  scheduleId: Scalars['String']['input'];
};


export type MutationUpdateHackathonTodoArgs = {
  data: HackathonTodoCreateInputExtend;
  todoId: Scalars['String']['input'];
};


export type MutationUpdateHackathonUtmArgs = {
  data: HackathonUtmUpdateInput;
  where: HackathonUtmWhereUniqueInput;
};


export type MutationUpdateHackathonWinnerArgs = {
  data: HackathonWinnerInputExtend;
  winnerId: Scalars['Int']['input'];
};


export type MutationUpdateIdeaBankArgs = {
  data: IdeaBankUpdateInput;
  where: IdeaBankWhereUniqueInput;
};


export type MutationUpdateJobStationArgs = {
  data: JobStationUpdateInput;
  where: JobStationWhereUniqueInput;
};


export type MutationUpdateJobTagArgs = {
  data: JobTagUpdateInput;
  where: JobTagWhereUniqueInput;
};


export type MutationUpdateJudgeArgs = {
  data: HackathonJudgeUpdateInputExtend;
  judgeId: Scalars['String']['input'];
};


export type MutationUpdateJudgeAccountArgs = {
  accountId: Scalars['String']['input'];
  judgeId: Scalars['String']['input'];
  nickname: Scalars['String']['input'];
};


export type MutationUpdateLearningTrackArgs = {
  data: LearningTrackUpdateInput;
  where: LearningTrackWhereUniqueInput;
};


export type MutationUpdateManyBlogArgs = {
  data: BlogUpdateManyMutationInput;
  where?: InputMaybe<BlogWhereInput>;
};


export type MutationUpdateManyCertificationArgs = {
  data: CertificationUpdateManyMutationInput;
  where?: InputMaybe<CertificationWhereInput>;
};


export type MutationUpdateManyCourseEcosystemArgs = {
  data: CourseEcosystemUpdateManyMutationInput;
  where?: InputMaybe<CourseEcosystemWhereInput>;
};


export type MutationUpdateManyCourseLearningTrackArgs = {
  data: CourseLearningTrackUpdateManyMutationInput;
  where?: InputMaybe<CourseLearningTrackWhereInput>;
};


export type MutationUpdateManyCustomKeywordArgs = {
  data: CustomKeywordUpdateManyMutationInput;
  where?: InputMaybe<CustomKeywordWhereInput>;
};


export type MutationUpdateManyDailyChallengeArgs = {
  data: DailyChallengeUpdateManyMutationInput;
  where?: InputMaybe<DailyChallengeWhereInput>;
};


export type MutationUpdateManyDocsArgs = {
  data: DocsUpdateManyMutationInput;
  where?: InputMaybe<DocsWhereInput>;
};


export type MutationUpdateManyDocumentationArgs = {
  data: DocumentationUpdateManyMutationInput;
  where?: InputMaybe<DocumentationWhereInput>;
};


export type MutationUpdateManyEventsArgs = {
  data: EventsUpdateManyMutationInput;
  where?: InputMaybe<EventsWhereInput>;
};


export type MutationUpdateManyFaucetArgs = {
  data: FaucetUpdateManyMutationInput;
  where?: InputMaybe<FaucetWhereInput>;
};


export type MutationUpdateManyGlossaryArgs = {
  data: GlossaryUpdateManyMutationInput;
  where?: InputMaybe<GlossaryWhereInput>;
};


export type MutationUpdateManyIdeaBankArgs = {
  data: IdeaBankUpdateManyMutationInput;
  where?: InputMaybe<IdeaBankWhereInput>;
};


export type MutationUpdateManyJobStationArgs = {
  data: JobStationUpdateManyMutationInput;
  where?: InputMaybe<JobStationWhereInput>;
};


export type MutationUpdateManyJobTagArgs = {
  data: JobTagUpdateManyMutationInput;
  where?: InputMaybe<JobTagWhereInput>;
};


export type MutationUpdateManyLearningTrackArgs = {
  data: LearningTrackUpdateManyMutationInput;
  where?: InputMaybe<LearningTrackWhereInput>;
};


export type MutationUpdateManyNotificationArgs = {
  data: NotificationUpdateManyMutationInput;
  where?: InputMaybe<NotificationWhereInput>;
};


export type MutationUpdateManyOrganizerApplicationMemberStatusArgs = {
  ids: Array<Scalars['String']['input']>;
  joinStatus: HackathonMemberJoinStatus;
};


export type MutationUpdateManyPageViewArgs = {
  data: PageViewUpdateManyMutationInput;
  where?: InputMaybe<PageViewWhereInput>;
};


export type MutationUpdateManyPartnerShipArgs = {
  data: PartnerShipUpdateManyMutationInput;
  where?: InputMaybe<PartnerShipWhereInput>;
};


export type MutationUpdateManyProgressArgs = {
  data: ProgressV2UpdateManyMutationInput;
  where?: InputMaybe<ProgressV2WhereInput>;
};


export type MutationUpdateManyThirdUserArgs = {
  data: ThirdUserUpdateManyMutationInput;
  where?: InputMaybe<ThirdUserWhereInput>;
};


export type MutationUpdateManyTreasureArgs = {
  data: TreasureUpdateManyMutationInput;
  where?: InputMaybe<TreasureWhereInput>;
};


export type MutationUpdateManyUnitArgs = {
  data: UnitV2UpdateManyMutationInput;
  where?: InputMaybe<UnitV2WhereInput>;
};


export type MutationUpdateManyUserArgs = {
  data: UserUpdateManyMutationInput;
  where?: InputMaybe<UserWhereInput>;
};


export type MutationUpdateManyUserClaimFaucetRecordArgs = {
  data: UserClaimFaucetRecordUpdateManyMutationInput;
  where?: InputMaybe<UserClaimFaucetRecordWhereInput>;
};


export type MutationUpdateNotificationArgs = {
  data: NotificationUpdateInput;
  where: NotificationWhereUniqueInput;
};


export type MutationUpdatePageViewArgs = {
  data: PageViewUpdateInput;
  where: PageViewWhereUniqueInput;
};


export type MutationUpdatePartnerShipArgs = {
  data: PartnerShipUpdateInput;
  where: PartnerShipWhereUniqueInput;
};


export type MutationUpdateProgressArgs = {
  data: ProgressV2UpdateInput;
  where: ProgressV2WhereUniqueInput;
};


export type MutationUpdateProjectArgs = {
  data: ProjectUpdateInput;
  where: ProjectWhereUniqueInput;
};


export type MutationUpdateThirdUserArgs = {
  data: ThirdUserUpdateInput;
  where: ThirdUserWhereUniqueInput;
};


export type MutationUpdateTreasureArgs = {
  data: TreasureUpdateInput;
  where: TreasureWhereUniqueInput;
};


export type MutationUpdateUnitArgs = {
  data: UnitV2UpdateInput;
  where: UnitV2WhereUniqueInput;
};


export type MutationUpdateUserArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationUpdateUserClaimFaucetRecordArgs = {
  data: UserClaimFaucetRecordUpdateInput;
  where: UserClaimFaucetRecordWhereUniqueInput;
};


export type MutationUpdateUserLeaningPhaseArgs = {
  input: UpdateUserLeaningPhaseInput;
};


export type MutationUpdateUserProfileArgs = {
  data: UserProfileUpdateInput;
};


export type MutationUpdateUserWorkExperienceArgs = {
  data: WorkExperienceUpdateInput;
  experienceId: Scalars['String']['input'];
};


export type MutationVerifyContactEmailArgs = {
  code: Scalars['String']['input'];
  hackathonId: Scalars['String']['input'];
};

export type NtuMemberCountAggregate = {
  __typename?: 'NTUMemberCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  discord: Scalars['Int']['output'];
  email: Scalars['Int']['output'];
  firstName: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isEnrolledSingapore: Scalars['Int']['output'];
  isRegister: Scalars['Int']['output'];
  lastName: Scalars['Int']['output'];
  linkedIn: Scalars['Int']['output'];
  selfIntroduction: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  telegram: Scalars['Int']['output'];
  twitter: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  weChat: Scalars['Int']['output'];
  whatsApp: Scalars['Int']['output'];
};

export type NtuMemberMaxAggregate = {
  __typename?: 'NTUMemberMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  discord?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isEnrolledSingapore?: Maybe<Scalars['Boolean']['output']>;
  isRegister?: Maybe<Scalars['Boolean']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  linkedIn?: Maybe<Scalars['String']['output']>;
  selfIntroduction?: Maybe<Scalars['String']['output']>;
  status?: Maybe<NtuMemberStatus>;
  telegram?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  weChat?: Maybe<Scalars['String']['output']>;
  whatsApp?: Maybe<Scalars['String']['output']>;
};

export type NtuMemberMinAggregate = {
  __typename?: 'NTUMemberMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  discord?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  firstName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isEnrolledSingapore?: Maybe<Scalars['Boolean']['output']>;
  isRegister?: Maybe<Scalars['Boolean']['output']>;
  lastName?: Maybe<Scalars['String']['output']>;
  linkedIn?: Maybe<Scalars['String']['output']>;
  selfIntroduction?: Maybe<Scalars['String']['output']>;
  status?: Maybe<NtuMemberStatus>;
  telegram?: Maybe<Scalars['String']['output']>;
  twitter?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  weChat?: Maybe<Scalars['String']['output']>;
  whatsApp?: Maybe<Scalars['String']['output']>;
};

export enum NtuMemberStatus {
  AdditionalInfo = 'ADDITIONAL_INFO',
  Contract = 'CONTRACT',
  Name = 'NAME'
}

export type NestedBoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolFilter>;
};

export type NestedBoolNullableFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolNullableFilter>;
};

export type NestedBoolWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedBoolFilter>;
  _min?: InputMaybe<NestedBoolFilter>;
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolWithAggregatesFilter>;
};

export type NestedDateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type NestedDateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type NestedDateTimeNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedDateTimeNullableFilter>;
  _min?: InputMaybe<NestedDateTimeNullableFilter>;
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type NestedDateTimeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedDateTimeFilter>;
  _min?: InputMaybe<NestedDateTimeFilter>;
  equals?: InputMaybe<Scalars['DateTime']['input']>;
  gt?: InputMaybe<Scalars['DateTime']['input']>;
  gte?: InputMaybe<Scalars['DateTime']['input']>;
  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;
  lt?: InputMaybe<Scalars['DateTime']['input']>;
  lte?: InputMaybe<Scalars['DateTime']['input']>;
  not?: InputMaybe<NestedDateTimeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;
};

export type NestedDecimalFilter = {
  equals?: InputMaybe<Scalars['Decimal']['input']>;
  gt?: InputMaybe<Scalars['Decimal']['input']>;
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  in?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  lt?: InputMaybe<Scalars['Decimal']['input']>;
  lte?: InputMaybe<Scalars['Decimal']['input']>;
  not?: InputMaybe<NestedDecimalFilter>;
  notIn?: InputMaybe<Array<Scalars['Decimal']['input']>>;
};

export type NestedDecimalNullableFilter = {
  equals?: InputMaybe<Scalars['Decimal']['input']>;
  gt?: InputMaybe<Scalars['Decimal']['input']>;
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  in?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  lt?: InputMaybe<Scalars['Decimal']['input']>;
  lte?: InputMaybe<Scalars['Decimal']['input']>;
  not?: InputMaybe<NestedDecimalNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Decimal']['input']>>;
};

export type NestedDecimalWithAggregatesFilter = {
  _avg?: InputMaybe<NestedDecimalFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedDecimalFilter>;
  _min?: InputMaybe<NestedDecimalFilter>;
  _sum?: InputMaybe<NestedDecimalFilter>;
  equals?: InputMaybe<Scalars['Decimal']['input']>;
  gt?: InputMaybe<Scalars['Decimal']['input']>;
  gte?: InputMaybe<Scalars['Decimal']['input']>;
  in?: InputMaybe<Array<Scalars['Decimal']['input']>>;
  lt?: InputMaybe<Scalars['Decimal']['input']>;
  lte?: InputMaybe<Scalars['Decimal']['input']>;
  not?: InputMaybe<NestedDecimalWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Decimal']['input']>>;
};

export type NestedEnumBlockChainTypeFilter = {
  equals?: InputMaybe<BlockChainType>;
  in?: InputMaybe<Array<BlockChainType>>;
  not?: InputMaybe<NestedEnumBlockChainTypeFilter>;
  notIn?: InputMaybe<Array<BlockChainType>>;
};

export type NestedEnumBlockChainTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumBlockChainTypeFilter>;
  _min?: InputMaybe<NestedEnumBlockChainTypeFilter>;
  equals?: InputMaybe<BlockChainType>;
  in?: InputMaybe<Array<BlockChainType>>;
  not?: InputMaybe<NestedEnumBlockChainTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<BlockChainType>>;
};

export type NestedEnumCampaignTypeFilter = {
  equals?: InputMaybe<CampaignType>;
  in?: InputMaybe<Array<CampaignType>>;
  not?: InputMaybe<NestedEnumCampaignTypeFilter>;
  notIn?: InputMaybe<Array<CampaignType>>;
};

export type NestedEnumCourseLevelFilter = {
  equals?: InputMaybe<CourseLevel>;
  in?: InputMaybe<Array<CourseLevel>>;
  not?: InputMaybe<NestedEnumCourseLevelFilter>;
  notIn?: InputMaybe<Array<CourseLevel>>;
};

export type NestedEnumCourseLevelNullableFilter = {
  equals?: InputMaybe<CourseLevel>;
  in?: InputMaybe<Array<CourseLevel>>;
  not?: InputMaybe<NestedEnumCourseLevelNullableFilter>;
  notIn?: InputMaybe<Array<CourseLevel>>;
};

export type NestedEnumCourseLevelWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumCourseLevelFilter>;
  _min?: InputMaybe<NestedEnumCourseLevelFilter>;
  equals?: InputMaybe<CourseLevel>;
  in?: InputMaybe<Array<CourseLevel>>;
  not?: InputMaybe<NestedEnumCourseLevelWithAggregatesFilter>;
  notIn?: InputMaybe<Array<CourseLevel>>;
};

export type NestedEnumCourseTypeFilter = {
  equals?: InputMaybe<CourseType>;
  in?: InputMaybe<Array<CourseType>>;
  not?: InputMaybe<NestedEnumCourseTypeFilter>;
  notIn?: InputMaybe<Array<CourseType>>;
};

export type NestedEnumHackathonModeNullableFilter = {
  equals?: InputMaybe<HackathonMode>;
  in?: InputMaybe<Array<HackathonMode>>;
  not?: InputMaybe<NestedEnumHackathonModeNullableFilter>;
  notIn?: InputMaybe<Array<HackathonMode>>;
};

export type NestedEnumLanguageFilter = {
  equals?: InputMaybe<Language>;
  in?: InputMaybe<Array<Language>>;
  not?: InputMaybe<NestedEnumLanguageFilter>;
  notIn?: InputMaybe<Array<Language>>;
};

export type NestedEnumLanguageNullableFilter = {
  equals?: InputMaybe<Language>;
  in?: InputMaybe<Array<Language>>;
  not?: InputMaybe<NestedEnumLanguageNullableFilter>;
  notIn?: InputMaybe<Array<Language>>;
};

export type NestedEnumLanguageWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumLanguageFilter>;
  _min?: InputMaybe<NestedEnumLanguageFilter>;
  equals?: InputMaybe<Language>;
  in?: InputMaybe<Array<Language>>;
  not?: InputMaybe<NestedEnumLanguageWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Language>>;
};

export type NestedEnumNotificationTypeFilter = {
  equals?: InputMaybe<NotificationType>;
  in?: InputMaybe<Array<NotificationType>>;
  not?: InputMaybe<NestedEnumNotificationTypeFilter>;
  notIn?: InputMaybe<Array<NotificationType>>;
};

export type NestedEnumNotificationTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumNotificationTypeFilter>;
  _min?: InputMaybe<NestedEnumNotificationTypeFilter>;
  equals?: InputMaybe<NotificationType>;
  in?: InputMaybe<Array<NotificationType>>;
  not?: InputMaybe<NestedEnumNotificationTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<NotificationType>>;
};

export type NestedEnumOrganizationRoleFilter = {
  equals?: InputMaybe<OrganizationRole>;
  in?: InputMaybe<Array<OrganizationRole>>;
  not?: InputMaybe<NestedEnumOrganizationRoleFilter>;
  notIn?: InputMaybe<Array<OrganizationRole>>;
};

export type NestedEnumPageTypeFilter = {
  equals?: InputMaybe<PageType>;
  in?: InputMaybe<Array<PageType>>;
  not?: InputMaybe<NestedEnumPageTypeFilter>;
  notIn?: InputMaybe<Array<PageType>>;
};

export type NestedEnumProgressStatusFilter = {
  equals?: InputMaybe<ProgressStatus>;
  in?: InputMaybe<Array<ProgressStatus>>;
  not?: InputMaybe<NestedEnumProgressStatusFilter>;
  notIn?: InputMaybe<Array<ProgressStatus>>;
};

export type NestedEnumProgressStatusWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumProgressStatusFilter>;
  _min?: InputMaybe<NestedEnumProgressStatusFilter>;
  equals?: InputMaybe<ProgressStatus>;
  in?: InputMaybe<Array<ProgressStatus>>;
  not?: InputMaybe<NestedEnumProgressStatusWithAggregatesFilter>;
  notIn?: InputMaybe<Array<ProgressStatus>>;
};

export type NestedEnumProjectTypeNullableFilter = {
  equals?: InputMaybe<ProjectType>;
  in?: InputMaybe<Array<ProjectType>>;
  not?: InputMaybe<NestedEnumProjectTypeNullableFilter>;
  notIn?: InputMaybe<Array<ProjectType>>;
};

export type NestedEnumRoleFilter = {
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumRoleFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type NestedEnumRoleWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumRoleFilter>;
  _min?: InputMaybe<NestedEnumRoleFilter>;
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumRoleWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type NestedEnumUserStatusFilter = {
  equals?: InputMaybe<UserStatus>;
  in?: InputMaybe<Array<UserStatus>>;
  not?: InputMaybe<NestedEnumUserStatusFilter>;
  notIn?: InputMaybe<Array<UserStatus>>;
};

export type NestedEnumUserStatusWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumUserStatusFilter>;
  _min?: InputMaybe<NestedEnumUserStatusFilter>;
  equals?: InputMaybe<UserStatus>;
  in?: InputMaybe<Array<UserStatus>>;
  not?: InputMaybe<NestedEnumUserStatusWithAggregatesFilter>;
  notIn?: InputMaybe<Array<UserStatus>>;
};

export type NestedEnumVoteRoleFilter = {
  equals?: InputMaybe<VoteRole>;
  in?: InputMaybe<Array<VoteRole>>;
  not?: InputMaybe<NestedEnumVoteRoleFilter>;
  notIn?: InputMaybe<Array<VoteRole>>;
};

export type NestedEnumVoteRoleWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumVoteRoleFilter>;
  _min?: InputMaybe<NestedEnumVoteRoleFilter>;
  equals?: InputMaybe<VoteRole>;
  in?: InputMaybe<Array<VoteRole>>;
  not?: InputMaybe<NestedEnumVoteRoleWithAggregatesFilter>;
  notIn?: InputMaybe<Array<VoteRole>>;
};

export type NestedEnumWorkModeFilter = {
  equals?: InputMaybe<WorkMode>;
  in?: InputMaybe<Array<WorkMode>>;
  not?: InputMaybe<NestedEnumWorkModeFilter>;
  notIn?: InputMaybe<Array<WorkMode>>;
};

export type NestedEnumWorkModeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumWorkModeFilter>;
  _min?: InputMaybe<NestedEnumWorkModeFilter>;
  equals?: InputMaybe<WorkMode>;
  in?: InputMaybe<Array<WorkMode>>;
  not?: InputMaybe<NestedEnumWorkModeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<WorkMode>>;
};

export type NestedEnumWorkTypeFilter = {
  equals?: InputMaybe<WorkType>;
  in?: InputMaybe<Array<WorkType>>;
  not?: InputMaybe<NestedEnumWorkTypeFilter>;
  notIn?: InputMaybe<Array<WorkType>>;
};

export type NestedEnumWorkTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumWorkTypeFilter>;
  _min?: InputMaybe<NestedEnumWorkTypeFilter>;
  equals?: InputMaybe<WorkType>;
  in?: InputMaybe<Array<WorkType>>;
  not?: InputMaybe<NestedEnumWorkTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<WorkType>>;
};

export type NestedFloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type NestedFloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type NestedFloatNullableWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatNullableFilter>;
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedFloatNullableFilter>;
  _min?: InputMaybe<NestedFloatNullableFilter>;
  _sum?: InputMaybe<NestedFloatNullableFilter>;
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type NestedIntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedIntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedIntWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedIntFilter>;
  _min?: InputMaybe<NestedIntFilter>;
  _sum?: InputMaybe<NestedIntFilter>;
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedJsonFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type NestedJsonNullableFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedUuidFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type NestedUuidNullableFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type NestedUuidNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type NestedUuidWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Notification = {
  __typename?: 'Notification';
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  isRead: Scalars['Boolean']['output'];
  type: NotificationType;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type NotificationCountAggregate = {
  __typename?: 'NotificationCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isRead: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type NotificationCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  content?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NotificationCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isRead?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type NotificationCreateInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  type: NotificationType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type NotificationCreateManyInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  type: NotificationType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type NotificationGroupBy = {
  __typename?: 'NotificationGroupBy';
  _count?: Maybe<NotificationCountAggregate>;
  _max?: Maybe<NotificationMaxAggregate>;
  _min?: Maybe<NotificationMinAggregate>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  isRead: Scalars['Boolean']['output'];
  type: NotificationType;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type NotificationListPaginated = {
  __typename?: 'NotificationListPaginated';
  data?: Maybe<Array<Notification>>;
  total: Scalars['Int']['output'];
};

export type NotificationMaxAggregate = {
  __typename?: 'NotificationMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isRead?: Maybe<Scalars['Boolean']['output']>;
  type?: Maybe<NotificationType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type NotificationMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NotificationMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isRead?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type NotificationMinAggregate = {
  __typename?: 'NotificationMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isRead?: Maybe<Scalars['Boolean']['output']>;
  type?: Maybe<NotificationType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type NotificationMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  isRead?: InputMaybe<Scalars['Boolean']['input']>;
  type?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NotificationMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isRead?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type NotificationOrderByWithAggregationInput = {
  _count?: InputMaybe<NotificationCountOrderByAggregateInput>;
  _max?: InputMaybe<NotificationMaxOrderByAggregateInput>;
  _min?: InputMaybe<NotificationMinOrderByAggregateInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isRead?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type NotificationOrderByWithRelationInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isRead?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export enum NotificationScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  IsRead = 'isRead',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  UserId = 'userId'
}

export type NotificationScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<NotificationScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<NotificationScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<NotificationScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  isRead?: InputMaybe<BoolWithAggregatesFilter>;
  type?: InputMaybe<EnumNotificationTypeWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
};

export enum NotificationType {
  Message = 'MESSAGE',
  Reaction = 'REACTION',
  Update = 'UPDATE'
}

export type NotificationUpdateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isRead?: InputMaybe<BoolFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumNotificationTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type NotificationUpdateManyMutationInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isRead?: InputMaybe<BoolFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumNotificationTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type NotificationWhereInput = {
  AND?: InputMaybe<Array<NotificationWhereInput>>;
  NOT?: InputMaybe<Array<NotificationWhereInput>>;
  OR?: InputMaybe<Array<NotificationWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  isRead?: InputMaybe<BoolFilter>;
  type?: InputMaybe<EnumNotificationTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type NotificationWhereUniqueInput = {
  AND?: InputMaybe<Array<NotificationWhereInput>>;
  NOT?: InputMaybe<Array<NotificationWhereInput>>;
  OR?: InputMaybe<Array<NotificationWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  isRead?: InputMaybe<BoolFilter>;
  type?: InputMaybe<EnumNotificationTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type NotionLogAvgAggregate = {
  __typename?: 'NotionLogAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type NotionLogCountAggregate = {
  __typename?: 'NotionLogCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  errorMsg: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  modelId: Scalars['Int']['output'];
  modelType: Scalars['Int']['output'];
  notionId: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  url: Scalars['Int']['output'];
};

export type NotionLogMaxAggregate = {
  __typename?: 'NotionLogMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  errorMsg?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  modelId?: Maybe<Scalars['String']['output']>;
  modelType?: Maybe<Scalars['String']['output']>;
  notionId?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type NotionLogMinAggregate = {
  __typename?: 'NotionLogMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  errorMsg?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  modelId?: Maybe<Scalars['String']['output']>;
  modelType?: Maybe<Scalars['String']['output']>;
  notionId?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type NotionLogSumAggregate = {
  __typename?: 'NotionLogSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type NullableBoolFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['DateTime']['input']>;
};

export type NullableDecimalFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Decimal']['input']>;
  divide?: InputMaybe<Scalars['Decimal']['input']>;
  increment?: InputMaybe<Scalars['Decimal']['input']>;
  multiply?: InputMaybe<Scalars['Decimal']['input']>;
  set?: InputMaybe<Scalars['Decimal']['input']>;
};

export type NullableEnumCourseLevelFieldUpdateOperationsInput = {
  set?: InputMaybe<CourseLevel>;
};

export type NullableEnumHackathonModeFieldUpdateOperationsInput = {
  set?: InputMaybe<HackathonMode>;
};

export type NullableEnumLanguageFieldUpdateOperationsInput = {
  set?: InputMaybe<Language>;
};

export type NullableEnumProjectTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<ProjectType>;
};

export type NullableFloatFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Float']['input']>;
  divide?: InputMaybe<Scalars['Float']['input']>;
  increment?: InputMaybe<Scalars['Float']['input']>;
  multiply?: InputMaybe<Scalars['Float']['input']>;
  set?: InputMaybe<Scalars['Float']['input']>;
};

export type NullableIntFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Int']['input']>;
  divide?: InputMaybe<Scalars['Int']['input']>;
  increment?: InputMaybe<Scalars['Int']['input']>;
  multiply?: InputMaybe<Scalars['Int']['input']>;
  set?: InputMaybe<Scalars['Int']['input']>;
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['String']['input']>;
};

export enum NullsOrder {
  First = 'first',
  Last = 'last'
}

export type Organization = {
  __typename?: 'Organization';
  _count: OrganizationCount;
  about?: Maybe<Scalars['String']['output']>;
  code: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId: Scalars['String']['output'];
  ecosystem?: Maybe<Ecosystem>;
  id: Scalars['String']['output'];
  isEcosystem: Scalars['Boolean']['output'];
  location: Scalars['String']['output'];
  members?: Maybe<Array<OrganizationMembership>>;
  name: Scalars['String']['output'];
  oneLineIntro?: Maybe<Scalars['String']['output']>;
  status: UserStatus;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type OrganizationCount = {
  __typename?: 'OrganizationCount';
  members: Scalars['Int']['output'];
};

export type OrganizationCountAggregate = {
  __typename?: 'OrganizationCountAggregate';
  _all: Scalars['Int']['output'];
  about: Scalars['Int']['output'];
  code: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isEcosystem: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  oneLineIntro: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type OrganizationCreateNestedOneWithoutEcosystemInput = {
  connect?: InputMaybe<OrganizationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<OrganizationCreateOrConnectWithoutEcosystemInput>;
  create?: InputMaybe<OrganizationCreateWithoutEcosystemInput>;
};

export type OrganizationCreateOrConnectWithoutEcosystemInput = {
  create: OrganizationCreateWithoutEcosystemInput;
  where: OrganizationWhereUniqueInput;
};

export type OrganizationCreateWithoutEcosystemInput = {
  about?: InputMaybe<Scalars['String']['input']>;
  code: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  isEcosystem?: InputMaybe<Scalars['Boolean']['input']>;
  location: Scalars['String']['input'];
  members?: InputMaybe<OrganizationMembershipCreateNestedManyWithoutOrganizationInput>;
  name: Scalars['String']['input'];
  oneLineIntro?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<UserStatus>;
  tags?: InputMaybe<OrganizationCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type OrganizationCreatetagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type OrganizationMaxAggregate = {
  __typename?: 'OrganizationMaxAggregate';
  about?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isEcosystem?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  oneLineIntro?: Maybe<Scalars['String']['output']>;
  status?: Maybe<UserStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type OrganizationMembership = {
  __typename?: 'OrganizationMembership';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  organization: Organization;
  organizationId: Scalars['String']['output'];
  organizationName: Scalars['String']['output'];
  role: OrganizationRole;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type OrganizationMembershipCountAggregate = {
  __typename?: 'OrganizationMembershipCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  organizationId: Scalars['Int']['output'];
  organizationName: Scalars['Int']['output'];
  role: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type OrganizationMembershipCreateManyOrganizationInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  organizationName: Scalars['String']['input'];
  role?: InputMaybe<OrganizationRole>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type OrganizationMembershipCreateManyOrganizationInputEnvelope = {
  data: Array<OrganizationMembershipCreateManyOrganizationInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrganizationMembershipCreateNestedManyWithoutOrganizationInput = {
  connect?: InputMaybe<Array<OrganizationMembershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OrganizationMembershipCreateOrConnectWithoutOrganizationInput>>;
  create?: InputMaybe<Array<OrganizationMembershipCreateWithoutOrganizationInput>>;
  createMany?: InputMaybe<OrganizationMembershipCreateManyOrganizationInputEnvelope>;
};

export type OrganizationMembershipCreateOrConnectWithoutOrganizationInput = {
  create: OrganizationMembershipCreateWithoutOrganizationInput;
  where: OrganizationMembershipWhereUniqueInput;
};

export type OrganizationMembershipCreateWithoutOrganizationInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  organizationName: Scalars['String']['input'];
  role?: InputMaybe<OrganizationRole>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type OrganizationMembershipListRelationFilter = {
  every?: InputMaybe<OrganizationMembershipWhereInput>;
  none?: InputMaybe<OrganizationMembershipWhereInput>;
  some?: InputMaybe<OrganizationMembershipWhereInput>;
};

export type OrganizationMembershipMaxAggregate = {
  __typename?: 'OrganizationMembershipMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  organizationName?: Maybe<Scalars['String']['output']>;
  role?: Maybe<OrganizationRole>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type OrganizationMembershipMinAggregate = {
  __typename?: 'OrganizationMembershipMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  organizationName?: Maybe<Scalars['String']['output']>;
  role?: Maybe<OrganizationRole>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type OrganizationMembershipOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type OrganizationMembershipScalarWhereInput = {
  AND?: InputMaybe<Array<OrganizationMembershipScalarWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationMembershipScalarWhereInput>>;
  OR?: InputMaybe<Array<OrganizationMembershipScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  organizationId?: InputMaybe<UuidFilter>;
  organizationName?: InputMaybe<StringFilter>;
  role?: InputMaybe<EnumOrganizationRoleFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type OrganizationMembershipUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  organizationName?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumOrganizationRoleFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput = {
  data: OrganizationMembershipUpdateManyMutationInput;
  where: OrganizationMembershipScalarWhereInput;
};

export type OrganizationMembershipUpdateManyWithoutOrganizationNestedInput = {
  connect?: InputMaybe<Array<OrganizationMembershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OrganizationMembershipCreateOrConnectWithoutOrganizationInput>>;
  create?: InputMaybe<Array<OrganizationMembershipCreateWithoutOrganizationInput>>;
  createMany?: InputMaybe<OrganizationMembershipCreateManyOrganizationInputEnvelope>;
  delete?: InputMaybe<Array<OrganizationMembershipWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OrganizationMembershipScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OrganizationMembershipWhereUniqueInput>>;
  set?: InputMaybe<Array<OrganizationMembershipWhereUniqueInput>>;
  update?: InputMaybe<Array<OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput>>;
  updateMany?: InputMaybe<Array<OrganizationMembershipUpdateManyWithWhereWithoutOrganizationInput>>;
  upsert?: InputMaybe<Array<OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput>>;
};

export type OrganizationMembershipUpdateWithWhereUniqueWithoutOrganizationInput = {
  data: OrganizationMembershipUpdateWithoutOrganizationInput;
  where: OrganizationMembershipWhereUniqueInput;
};

export type OrganizationMembershipUpdateWithoutOrganizationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  organizationName?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumOrganizationRoleFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OrganizationMembershipUpsertWithWhereUniqueWithoutOrganizationInput = {
  create: OrganizationMembershipCreateWithoutOrganizationInput;
  update: OrganizationMembershipUpdateWithoutOrganizationInput;
  where: OrganizationMembershipWhereUniqueInput;
};

export type OrganizationMembershipWhereInput = {
  AND?: InputMaybe<Array<OrganizationMembershipWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationMembershipWhereInput>>;
  OR?: InputMaybe<Array<OrganizationMembershipWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  organization?: InputMaybe<OrganizationRelationFilter>;
  organizationId?: InputMaybe<UuidFilter>;
  organizationName?: InputMaybe<StringFilter>;
  role?: InputMaybe<EnumOrganizationRoleFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type OrganizationMembershipWhereUniqueInput = {
  AND?: InputMaybe<Array<OrganizationMembershipWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationMembershipWhereInput>>;
  OR?: InputMaybe<Array<OrganizationMembershipWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  organization?: InputMaybe<OrganizationRelationFilter>;
  organizationId?: InputMaybe<UuidFilter>;
  organizationName?: InputMaybe<StringFilter>;
  role?: InputMaybe<EnumOrganizationRoleFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type OrganizationMinAggregate = {
  __typename?: 'OrganizationMinAggregate';
  about?: Maybe<Scalars['String']['output']>;
  code?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isEcosystem?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  oneLineIntro?: Maybe<Scalars['String']['output']>;
  status?: Maybe<UserStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type OrganizationNullableRelationFilter = {
  is?: InputMaybe<OrganizationWhereInput>;
  isNot?: InputMaybe<OrganizationWhereInput>;
};

export type OrganizationOrderByWithRelationInput = {
  about?: InputMaybe<SortOrderInput>;
  code?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrder>;
  ecosystem?: InputMaybe<EcosystemOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  isEcosystem?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  members?: InputMaybe<OrganizationMembershipOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  oneLineIntro?: InputMaybe<SortOrderInput>;
  status?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OrganizationRelationFilter = {
  is?: InputMaybe<OrganizationWhereInput>;
  isNot?: InputMaybe<OrganizationWhereInput>;
};

export enum OrganizationRole {
  Admin = 'ADMIN',
  Member = 'MEMBER'
}

export type OrganizationUpdateOneWithoutEcosystemNestedInput = {
  connect?: InputMaybe<OrganizationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<OrganizationCreateOrConnectWithoutEcosystemInput>;
  create?: InputMaybe<OrganizationCreateWithoutEcosystemInput>;
  delete?: InputMaybe<OrganizationWhereInput>;
  disconnect?: InputMaybe<OrganizationWhereInput>;
  update?: InputMaybe<OrganizationUpdateToOneWithWhereWithoutEcosystemInput>;
  upsert?: InputMaybe<OrganizationUpsertWithoutEcosystemInput>;
};

export type OrganizationUpdateToOneWithWhereWithoutEcosystemInput = {
  data: OrganizationUpdateWithoutEcosystemInput;
  where?: InputMaybe<OrganizationWhereInput>;
};

export type OrganizationUpdateWithoutEcosystemInput = {
  about?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  code?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isEcosystem?: InputMaybe<BoolFieldUpdateOperationsInput>;
  location?: InputMaybe<StringFieldUpdateOperationsInput>;
  members?: InputMaybe<OrganizationMembershipUpdateManyWithoutOrganizationNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  oneLineIntro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  tags?: InputMaybe<OrganizationUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OrganizationUpdatetagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type OrganizationUpsertWithoutEcosystemInput = {
  create: OrganizationCreateWithoutEcosystemInput;
  update: OrganizationUpdateWithoutEcosystemInput;
  where?: InputMaybe<OrganizationWhereInput>;
};

export type OrganizationWhereInput = {
  AND?: InputMaybe<Array<OrganizationWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationWhereInput>>;
  OR?: InputMaybe<Array<OrganizationWhereInput>>;
  about?: InputMaybe<StringNullableFilter>;
  code?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidFilter>;
  ecosystem?: InputMaybe<EcosystemNullableRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  isEcosystem?: InputMaybe<BoolFilter>;
  location?: InputMaybe<StringFilter>;
  members?: InputMaybe<OrganizationMembershipListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  oneLineIntro?: InputMaybe<StringNullableFilter>;
  status?: InputMaybe<EnumUserStatusFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type OrganizationWhereUniqueInput = {
  AND?: InputMaybe<Array<OrganizationWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationWhereInput>>;
  OR?: InputMaybe<Array<OrganizationWhereInput>>;
  about?: InputMaybe<StringNullableFilter>;
  code?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidFilter>;
  ecosystem?: InputMaybe<EcosystemNullableRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  isEcosystem?: InputMaybe<BoolFilter>;
  location?: InputMaybe<StringFilter>;
  members?: InputMaybe<OrganizationMembershipListRelationFilter>;
  name?: InputMaybe<Scalars['String']['input']>;
  oneLineIntro?: InputMaybe<StringNullableFilter>;
  status?: InputMaybe<EnumUserStatusFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type OrganizerDistribution = {
  __typename?: 'OrganizerDistribution';
  /** pageView */
  pageView?: Maybe<Array<OrganizerDistributionOrigin>>;
  /** registration */
  registration?: Maybe<Array<OrganizerDistributionOrigin>>;
  /** submission */
  submission?: Maybe<Array<OrganizerDistributionOrigin>>;
  /** winner */
  winner?: Maybe<Array<OrganizerDistributionOrigin>>;
};

export type OrganizerDistributionOrigin = {
  __typename?: 'OrganizerDistributionOrigin';
  /** color */
  color?: Maybe<Scalars['String']['output']>;
  /** count */
  count?: Maybe<Scalars['Int']['output']>;
  /** id */
  id?: Maybe<Scalars['Int']['output']>;
  /** rate */
  rate?: Maybe<Scalars['Int']['output']>;
  /** sourceName */
  sourceName?: Maybe<Scalars['String']['output']>;
};

export type OrganizerHackathonIncrecementInfo = {
  __typename?: 'OrganizerHackathonIncrecementInfo';
  application?: Maybe<Scalars['Int']['output']>;
  confirmation?: Maybe<Scalars['Int']['output']>;
  pageView?: Maybe<Scalars['Int']['output']>;
  submission?: Maybe<Scalars['Int']['output']>;
  timeline?: Maybe<HackathonTimeline>;
  todayApplication?: Maybe<Scalars['Int']['output']>;
  todayConfirmation?: Maybe<Scalars['Int']['output']>;
  todayPageView?: Maybe<Scalars['Int']['output']>;
  todaySubmission?: Maybe<Scalars['Int']['output']>;
  winner?: Maybe<Scalars['Int']['output']>;
};

export type OrganizerHackathonJudgePaginated = {
  __typename?: 'OrganizerHackathonJudgePaginated';
  data?: Maybe<Array<HackathonJudgeExtend>>;
  total: Scalars['Int']['output'];
};

/** Status of the hackathon */
export enum OrganizerHackathonStatus {
  Draft = 'DRAFT',
  Ongoing = 'ONGOING',
  Past = 'PAST',
  Register = 'REGISTER',
  Review = 'REVIEW',
  Voting = 'VOTING'
}

export type OrganizerHackathonSubmission = {
  __typename?: 'OrganizerHackathonSubmission';
  ProjectLikes?: Maybe<Array<ProjectLikes>>;
  _count: ProjectCount;
  addition?: Maybe<ProjectAddition>;
  alias: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  demoVideo?: Maybe<Scalars['String']['output']>;
  detail?: Maybe<ProjectDetail>;
  ecology?: Maybe<Array<Scalars['String']['output']>>;
  fields: Scalars['JSON']['output'];
  from?: Maybe<Project>;
  fromId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  invalid: Scalars['Boolean']['output'];
  invalidReason?: Maybe<Scalars['String']['output']>;
  isSubmit: Scalars['Boolean']['output'];
  likes: Scalars['Int']['output'];
  location?: Maybe<Scalars['String']['output']>;
  lock: Scalars['Boolean']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  member?: Maybe<Array<HackathonMember>>;
  name: Scalars['String']['output'];
  pitchVideo?: Maybe<Scalars['String']['output']>;
  prizeTrack?: Maybe<Scalars['String']['output']>;
  progress: Scalars['Int']['output'];
  projectAddition?: Maybe<ProjectAddition>;
  projectDetail?: Maybe<ProjectDetail>;
  status: Scalars['String']['output'];
  teachStack?: Maybe<Array<Scalars['String']['output']>>;
  team?: Maybe<HackathonTeam>;
  teamId?: Maybe<Scalars['String']['output']>;
  tracks?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<ProjectType>;
  updatedAt: Scalars['DateTime']['output'];
  versionName?: Maybe<Scalars['String']['output']>;
  versions?: Maybe<Array<Project>>;
  vote: Scalars['Int']['output'];
  wallet?: Maybe<Scalars['String']['output']>;
  winner?: Maybe<Array<HackathonWinner>>;
};

export type Page = {
  __typename?: 'Page';
  content: Scalars['JSON']['output'];
  course: Course;
  courseId: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  type: PageType;
  unit: Unit;
  unitId: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type PageAvgAggregate = {
  __typename?: 'PageAvgAggregate';
  sequence?: Maybe<Scalars['Float']['output']>;
};

export type PageCountAggregate = {
  __typename?: 'PageCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  unitId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type PageExtend = {
  __typename?: 'PageExtend';
  _count: PageV2Count;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  isCompleted?: Maybe<Scalars['Boolean']['output']>;
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  type: PageType;
  unitPage?: Maybe<Array<UnitPage>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type PageListPaginated = {
  __typename?: 'PageListPaginated';
  data?: Maybe<Array<PageV2>>;
  total: Scalars['Int']['output'];
};

export type PageMaxAggregate = {
  __typename?: 'PageMaxAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<PageType>;
  unitId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PageMinAggregate = {
  __typename?: 'PageMinAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<PageType>;
  unitId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PageSumAggregate = {
  __typename?: 'PageSumAggregate';
  sequence?: Maybe<Scalars['Int']['output']>;
};

export enum PageType {
  Article = 'ARTICLE',
  Default = 'DEFAULT',
  Guide = 'GUIDE',
  Quiz = 'QUIZ',
  Reading = 'READING',
  Video = 'VIDEO'
}

export type PageV2 = {
  __typename?: 'PageV2';
  _count: PageV2Count;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  type: PageType;
  unitPage?: Maybe<Array<UnitPage>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type PageV2AvgAggregate = {
  __typename?: 'PageV2AvgAggregate';
  sequence?: Maybe<Scalars['Float']['output']>;
};

export type PageV2Count = {
  __typename?: 'PageV2Count';
  unitPage: Scalars['Int']['output'];
};

export type PageV2CountAggregate = {
  __typename?: 'PageV2CountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type PageV2CreateNestedOneWithoutUnitPageInput = {
  connect?: InputMaybe<PageV2WhereUniqueInput>;
  connectOrCreate?: InputMaybe<PageV2CreateOrConnectWithoutUnitPageInput>;
  create?: InputMaybe<PageV2CreateWithoutUnitPageInput>;
};

export type PageV2CreateOrConnectWithoutUnitPageInput = {
  create: PageV2CreateWithoutUnitPageInput;
  where: PageV2WhereUniqueInput;
};

export type PageV2CreateWithoutUnitPageInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  sequence: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  type?: InputMaybe<PageType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type PageV2MaxAggregate = {
  __typename?: 'PageV2MaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<PageType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PageV2MinAggregate = {
  __typename?: 'PageV2MinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  type?: Maybe<PageType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PageV2OrderByWithRelationInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  unitPage?: InputMaybe<UnitPageOrderByRelationAggregateInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type PageV2RelationFilter = {
  is?: InputMaybe<PageV2WhereInput>;
  isNot?: InputMaybe<PageV2WhereInput>;
};

export enum PageV2ScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  Sequence = 'sequence',
  Title = 'title',
  Type = 'type',
  UpdatedAt = 'updatedAt'
}

export type PageV2SumAggregate = {
  __typename?: 'PageV2SumAggregate';
  sequence?: Maybe<Scalars['Int']['output']>;
};

export type PageV2UpdateOneRequiredWithoutUnitPageNestedInput = {
  connect?: InputMaybe<PageV2WhereUniqueInput>;
  connectOrCreate?: InputMaybe<PageV2CreateOrConnectWithoutUnitPageInput>;
  create?: InputMaybe<PageV2CreateWithoutUnitPageInput>;
  update?: InputMaybe<PageV2UpdateToOneWithWhereWithoutUnitPageInput>;
  upsert?: InputMaybe<PageV2UpsertWithoutUnitPageInput>;
};

export type PageV2UpdateToOneWithWhereWithoutUnitPageInput = {
  data: PageV2UpdateWithoutUnitPageInput;
  where?: InputMaybe<PageV2WhereInput>;
};

export type PageV2UpdateWithoutUnitPageInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumPageTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type PageV2UpsertWithoutUnitPageInput = {
  create: PageV2CreateWithoutUnitPageInput;
  update: PageV2UpdateWithoutUnitPageInput;
  where?: InputMaybe<PageV2WhereInput>;
};

export type PageV2WhereInput = {
  AND?: InputMaybe<Array<PageV2WhereInput>>;
  NOT?: InputMaybe<Array<PageV2WhereInput>>;
  OR?: InputMaybe<Array<PageV2WhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  sequence?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  type?: InputMaybe<EnumPageTypeFilter>;
  unitPage?: InputMaybe<UnitPageListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type PageV2WhereUniqueInput = {
  AND?: InputMaybe<Array<PageV2WhereInput>>;
  NOT?: InputMaybe<Array<PageV2WhereInput>>;
  OR?: InputMaybe<Array<PageV2WhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  sequence?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  type?: InputMaybe<EnumPageTypeFilter>;
  unitPage?: InputMaybe<UnitPageListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type PageView = {
  __typename?: 'PageView';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['Int']['output'];
  sourceId: Scalars['String']['output'];
  sourceType: Scalars['String']['output'];
  userId?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type PageViewAvgAggregate = {
  __typename?: 'PageViewAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type PageViewAvgAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageViewAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type PageViewCountAggregate = {
  __typename?: 'PageViewCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  sourceId: Scalars['Int']['output'];
  sourceType: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  utmSource: Scalars['Int']['output'];
};

export type PageViewCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  sourceId?: InputMaybe<Scalars['Boolean']['input']>;
  sourceType?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  utmSource?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageViewCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sourceId?: InputMaybe<SortOrder>;
  sourceType?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  utmSource?: InputMaybe<SortOrder>;
};

export type PageViewCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  sourceId: Scalars['String']['input'];
  sourceType: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['String']['input']>;
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

export type PageViewCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  sourceId: Scalars['String']['input'];
  sourceType: Scalars['String']['input'];
  userId?: InputMaybe<Scalars['String']['input']>;
  utmSource?: InputMaybe<Scalars['String']['input']>;
};

export type PageViewGroupBy = {
  __typename?: 'PageViewGroupBy';
  _avg?: Maybe<PageViewAvgAggregate>;
  _count?: Maybe<PageViewCountAggregate>;
  _max?: Maybe<PageViewMaxAggregate>;
  _min?: Maybe<PageViewMinAggregate>;
  _sum?: Maybe<PageViewSumAggregate>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['Int']['output'];
  sourceId: Scalars['String']['output'];
  sourceType: Scalars['String']['output'];
  userId?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type PageViewListPaginated = {
  __typename?: 'PageViewListPaginated';
  data?: Maybe<Array<PageView>>;
  total: Scalars['Int']['output'];
};

export type PageViewMaxAggregate = {
  __typename?: 'PageViewMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sourceId?: Maybe<Scalars['String']['output']>;
  sourceType?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type PageViewMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  sourceId?: InputMaybe<Scalars['Boolean']['input']>;
  sourceType?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  utmSource?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageViewMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sourceId?: InputMaybe<SortOrder>;
  sourceType?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  utmSource?: InputMaybe<SortOrder>;
};

export type PageViewMinAggregate = {
  __typename?: 'PageViewMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  sourceId?: Maybe<Scalars['String']['output']>;
  sourceType?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  utmSource?: Maybe<Scalars['String']['output']>;
};

export type PageViewMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  sourceId?: InputMaybe<Scalars['Boolean']['input']>;
  sourceType?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
  utmSource?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageViewMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sourceId?: InputMaybe<SortOrder>;
  sourceType?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
  utmSource?: InputMaybe<SortOrder>;
};

export type PageViewOrderByWithAggregationInput = {
  _avg?: InputMaybe<PageViewAvgOrderByAggregateInput>;
  _count?: InputMaybe<PageViewCountOrderByAggregateInput>;
  _max?: InputMaybe<PageViewMaxOrderByAggregateInput>;
  _min?: InputMaybe<PageViewMinOrderByAggregateInput>;
  _sum?: InputMaybe<PageViewSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sourceId?: InputMaybe<SortOrder>;
  sourceType?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrderInput>;
  utmSource?: InputMaybe<SortOrderInput>;
};

export type PageViewOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sourceId?: InputMaybe<SortOrder>;
  sourceType?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrderInput>;
  utmSource?: InputMaybe<SortOrderInput>;
};

export enum PageViewScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  SourceId = 'sourceId',
  SourceType = 'sourceType',
  UserId = 'userId',
  UtmSource = 'utmSource'
}

export type PageViewScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<PageViewScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<PageViewScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<PageViewScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  sourceId?: InputMaybe<UuidWithAggregatesFilter>;
  sourceType?: InputMaybe<StringWithAggregatesFilter>;
  userId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  utmSource?: InputMaybe<StringNullableWithAggregatesFilter>;
};

export type PageViewSumAggregate = {
  __typename?: 'PageViewSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type PageViewSumAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageViewSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type PageViewUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  sourceId?: InputMaybe<StringFieldUpdateOperationsInput>;
  sourceType?: InputMaybe<StringFieldUpdateOperationsInput>;
  userId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  utmSource?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PageViewUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  sourceId?: InputMaybe<StringFieldUpdateOperationsInput>;
  sourceType?: InputMaybe<StringFieldUpdateOperationsInput>;
  userId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  utmSource?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PageViewWhereInput = {
  AND?: InputMaybe<Array<PageViewWhereInput>>;
  NOT?: InputMaybe<Array<PageViewWhereInput>>;
  OR?: InputMaybe<Array<PageViewWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  sourceId?: InputMaybe<UuidFilter>;
  sourceType?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidNullableFilter>;
  utmSource?: InputMaybe<StringNullableFilter>;
};

export type PageViewWhereUniqueInput = {
  AND?: InputMaybe<Array<PageViewWhereInput>>;
  NOT?: InputMaybe<Array<PageViewWhereInput>>;
  OR?: InputMaybe<Array<PageViewWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  sourceId?: InputMaybe<UuidFilter>;
  sourceType?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidNullableFilter>;
  utmSource?: InputMaybe<StringNullableFilter>;
};

export type PartnerShip = {
  __typename?: 'PartnerShip';
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  url?: Maybe<Scalars['String']['output']>;
};

export type PartnerShipAvgAggregate = {
  __typename?: 'PartnerShipAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type PartnerShipAvgAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PartnerShipAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type PartnerShipCountAggregate = {
  __typename?: 'PartnerShipCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  logo: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  url: Scalars['Int']['output'];
};

export type PartnerShipCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  tags?: InputMaybe<Scalars['Boolean']['input']>;
  url?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PartnerShipCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  logo?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrder>;
};

export type PartnerShipCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  tags?: InputMaybe<PartnerShipCreatetagsInput>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type PartnerShipCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['Int']['input'];
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  tags?: InputMaybe<PartnerShipCreatetagsInput>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type PartnerShipCreatetagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type PartnerShipGroupBy = {
  __typename?: 'PartnerShipGroupBy';
  _avg?: Maybe<PartnerShipAvgAggregate>;
  _count?: Maybe<PartnerShipCountAggregate>;
  _max?: Maybe<PartnerShipMaxAggregate>;
  _min?: Maybe<PartnerShipMinAggregate>;
  _sum?: Maybe<PartnerShipSumAggregate>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  url?: Maybe<Scalars['String']['output']>;
};

export type PartnerShipListPaginated = {
  __typename?: 'PartnerShipListPaginated';
  data?: Maybe<Array<PartnerShip>>;
  total: Scalars['Int']['output'];
};

export type PartnerShipMaxAggregate = {
  __typename?: 'PartnerShipMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type PartnerShipMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  url?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PartnerShipMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  logo?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrder>;
};

export type PartnerShipMinAggregate = {
  __typename?: 'PartnerShipMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type PartnerShipMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  url?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PartnerShipMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  logo?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrder>;
};

export type PartnerShipOrderByWithAggregationInput = {
  _avg?: InputMaybe<PartnerShipAvgOrderByAggregateInput>;
  _count?: InputMaybe<PartnerShipCountOrderByAggregateInput>;
  _max?: InputMaybe<PartnerShipMaxOrderByAggregateInput>;
  _min?: InputMaybe<PartnerShipMinOrderByAggregateInput>;
  _sum?: InputMaybe<PartnerShipSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  logo?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrderInput>;
};

export type PartnerShipOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  logo?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  url?: InputMaybe<SortOrderInput>;
};

export enum PartnerShipScalarFieldEnum {
  CreatedAt = 'createdAt',
  Description = 'description',
  Id = 'id',
  Logo = 'logo',
  Name = 'name',
  Tags = 'tags',
  Url = 'url'
}

export type PartnerShipScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<PartnerShipScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<PartnerShipScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<PartnerShipScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  description?: InputMaybe<StringNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  logo?: InputMaybe<StringNullableWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  url?: InputMaybe<StringNullableWithAggregatesFilter>;
};

export type PartnerShipSumAggregate = {
  __typename?: 'PartnerShipSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type PartnerShipSumAggregateInput = {
  id?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PartnerShipSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type PartnerShipUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  tags?: InputMaybe<PartnerShipUpdatetagsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PartnerShipUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  tags?: InputMaybe<PartnerShipUpdatetagsInput>;
  url?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PartnerShipUpdatetagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type PartnerShipWhereInput = {
  AND?: InputMaybe<Array<PartnerShipWhereInput>>;
  NOT?: InputMaybe<Array<PartnerShipWhereInput>>;
  OR?: InputMaybe<Array<PartnerShipWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IntFilter>;
  logo?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type PartnerShipWhereUniqueInput = {
  AND?: InputMaybe<Array<PartnerShipWhereInput>>;
  NOT?: InputMaybe<Array<PartnerShipWhereInput>>;
  OR?: InputMaybe<Array<PartnerShipWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  logo?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  url?: InputMaybe<StringNullableFilter>;
};

export type PhaseCourseAvgAggregate = {
  __typename?: 'PhaseCourseAvgAggregate';
  order?: Maybe<Scalars['Float']['output']>;
};

export type PhaseCourseCountAggregate = {
  __typename?: 'PhaseCourseCountAggregate';
  _all: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  courseTitle: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  phaseId: Scalars['Int']['output'];
  phaseTitle: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type PhaseCourseMaxAggregate = {
  __typename?: 'PhaseCourseMaxAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  courseTitle?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  phaseTitle?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PhaseCourseMinAggregate = {
  __typename?: 'PhaseCourseMinAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  courseTitle?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  phaseTitle?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PhaseCourseSumAggregate = {
  __typename?: 'PhaseCourseSumAggregate';
  order?: Maybe<Scalars['Int']['output']>;
};

export type PhaseQuizAvgAggregate = {
  __typename?: 'PhaseQuizAvgAggregate';
  order?: Maybe<Scalars['Float']['output']>;
};

export type PhaseQuizCountAggregate = {
  __typename?: 'PhaseQuizCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  phaseId: Scalars['Int']['output'];
  quizList: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type PhaseQuizExtend = {
  __typename?: 'PhaseQuizExtend';
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  lang: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  phaseId: Scalars['String']['output'];
  progress?: Maybe<Scalars['Float']['output']>;
  quizList?: Maybe<Array<DailyChallengeExtend>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type PhaseQuizMaxAggregate = {
  __typename?: 'PhaseQuizMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PhaseQuizMinAggregate = {
  __typename?: 'PhaseQuizMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type PhaseQuizSumAggregate = {
  __typename?: 'PhaseQuizSumAggregate';
  order?: Maybe<Scalars['Int']['output']>;
};

export type ProgressAvgAggregate = {
  __typename?: 'ProgressAvgAggregate';
  completedQuiz?: Maybe<Scalars['Float']['output']>;
};

export type ProgressCountAggregate = {
  __typename?: 'ProgressCountAggregate';
  _all: Scalars['Int']['output'];
  completeTime: Scalars['Int']['output'];
  completedQuiz: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  isDug: Scalars['Int']['output'];
  pageId: Scalars['Int']['output'];
  showHint: Scalars['Int']['output'];
  startTime: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  treasureId: Scalars['Int']['output'];
  unitId: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type ProgressListPaginated = {
  __typename?: 'ProgressListPaginated';
  data?: Maybe<Array<ProgressV2>>;
  total: Scalars['Int']['output'];
};

export type ProgressMaxAggregate = {
  __typename?: 'ProgressMaxAggregate';
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  courseId?: Maybe<Scalars['String']['output']>;
  isDug?: Maybe<Scalars['Boolean']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
  showHint?: Maybe<Scalars['Boolean']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  status?: Maybe<ProgressStatus>;
  treasureId?: Maybe<Scalars['String']['output']>;
  unitId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ProgressMinAggregate = {
  __typename?: 'ProgressMinAggregate';
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  courseId?: Maybe<Scalars['String']['output']>;
  isDug?: Maybe<Scalars['Boolean']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
  showHint?: Maybe<Scalars['Boolean']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  status?: Maybe<ProgressStatus>;
  treasureId?: Maybe<Scalars['String']['output']>;
  unitId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export enum ProgressStatus {
  Completed = 'COMPLETED',
  Started = 'STARTED'
}

export type ProgressSumAggregate = {
  __typename?: 'ProgressSumAggregate';
  completedQuiz?: Maybe<Array<Scalars['Int']['output']>>;
};

export type ProgressV2 = {
  __typename?: 'ProgressV2';
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  completedQuiz?: Maybe<Array<Scalars['Int']['output']>>;
  isDug: Scalars['Boolean']['output'];
  pageId: Scalars['String']['output'];
  showHint: Scalars['Boolean']['output'];
  startTime: Scalars['DateTime']['output'];
  status: ProgressStatus;
  treasureId?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

export type ProgressV2AvgAggregate = {
  __typename?: 'ProgressV2AvgAggregate';
  completedQuiz?: Maybe<Scalars['Float']['output']>;
};

export type ProgressV2AvgAggregateInput = {
  completedQuiz?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProgressV2AvgOrderByAggregateInput = {
  completedQuiz?: InputMaybe<SortOrder>;
};

export type ProgressV2CountAggregate = {
  __typename?: 'ProgressV2CountAggregate';
  _all: Scalars['Int']['output'];
  completeTime: Scalars['Int']['output'];
  completedQuiz: Scalars['Int']['output'];
  isDug: Scalars['Int']['output'];
  pageId: Scalars['Int']['output'];
  showHint: Scalars['Int']['output'];
  startTime: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  treasureId: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type ProgressV2CountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  completeTime?: InputMaybe<Scalars['Boolean']['input']>;
  completedQuiz?: InputMaybe<Scalars['Boolean']['input']>;
  isDug?: InputMaybe<Scalars['Boolean']['input']>;
  pageId?: InputMaybe<Scalars['Boolean']['input']>;
  showHint?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  treasureId?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProgressV2CountOrderByAggregateInput = {
  completeTime?: InputMaybe<SortOrder>;
  completedQuiz?: InputMaybe<SortOrder>;
  isDug?: InputMaybe<SortOrder>;
  pageId?: InputMaybe<SortOrder>;
  showHint?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  treasureId?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type ProgressV2CreateInput = {
  completeTime?: InputMaybe<Scalars['DateTime']['input']>;
  completedQuiz?: InputMaybe<ProgressV2CreatecompletedQuizInput>;
  isDug?: InputMaybe<Scalars['Boolean']['input']>;
  pageId: Scalars['String']['input'];
  showHint?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  status?: InputMaybe<ProgressStatus>;
  treasureId?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['String']['input'];
};

export type ProgressV2CreateManyInput = {
  completeTime?: InputMaybe<Scalars['DateTime']['input']>;
  completedQuiz?: InputMaybe<ProgressV2CreatecompletedQuizInput>;
  isDug?: InputMaybe<Scalars['Boolean']['input']>;
  pageId: Scalars['String']['input'];
  showHint?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['DateTime']['input']>;
  status?: InputMaybe<ProgressStatus>;
  treasureId?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['String']['input'];
};

export type ProgressV2CreatecompletedQuizInput = {
  set: Array<Scalars['Int']['input']>;
};

export type ProgressV2GroupBy = {
  __typename?: 'ProgressV2GroupBy';
  _avg?: Maybe<ProgressV2AvgAggregate>;
  _count?: Maybe<ProgressV2CountAggregate>;
  _max?: Maybe<ProgressV2MaxAggregate>;
  _min?: Maybe<ProgressV2MinAggregate>;
  _sum?: Maybe<ProgressV2SumAggregate>;
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  completedQuiz?: Maybe<Array<Scalars['Int']['output']>>;
  isDug: Scalars['Boolean']['output'];
  pageId: Scalars['String']['output'];
  showHint: Scalars['Boolean']['output'];
  startTime: Scalars['DateTime']['output'];
  status: ProgressStatus;
  treasureId?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

export type ProgressV2MaxAggregate = {
  __typename?: 'ProgressV2MaxAggregate';
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  isDug?: Maybe<Scalars['Boolean']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
  showHint?: Maybe<Scalars['Boolean']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  status?: Maybe<ProgressStatus>;
  treasureId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ProgressV2MaxAggregateInput = {
  completeTime?: InputMaybe<Scalars['Boolean']['input']>;
  isDug?: InputMaybe<Scalars['Boolean']['input']>;
  pageId?: InputMaybe<Scalars['Boolean']['input']>;
  showHint?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  treasureId?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProgressV2MaxOrderByAggregateInput = {
  completeTime?: InputMaybe<SortOrder>;
  isDug?: InputMaybe<SortOrder>;
  pageId?: InputMaybe<SortOrder>;
  showHint?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  treasureId?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type ProgressV2MinAggregate = {
  __typename?: 'ProgressV2MinAggregate';
  completeTime?: Maybe<Scalars['DateTime']['output']>;
  isDug?: Maybe<Scalars['Boolean']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
  showHint?: Maybe<Scalars['Boolean']['output']>;
  startTime?: Maybe<Scalars['DateTime']['output']>;
  status?: Maybe<ProgressStatus>;
  treasureId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ProgressV2MinAggregateInput = {
  completeTime?: InputMaybe<Scalars['Boolean']['input']>;
  isDug?: InputMaybe<Scalars['Boolean']['input']>;
  pageId?: InputMaybe<Scalars['Boolean']['input']>;
  showHint?: InputMaybe<Scalars['Boolean']['input']>;
  startTime?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  treasureId?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProgressV2MinOrderByAggregateInput = {
  completeTime?: InputMaybe<SortOrder>;
  isDug?: InputMaybe<SortOrder>;
  pageId?: InputMaybe<SortOrder>;
  showHint?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  treasureId?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type ProgressV2OrderByWithAggregationInput = {
  _avg?: InputMaybe<ProgressV2AvgOrderByAggregateInput>;
  _count?: InputMaybe<ProgressV2CountOrderByAggregateInput>;
  _max?: InputMaybe<ProgressV2MaxOrderByAggregateInput>;
  _min?: InputMaybe<ProgressV2MinOrderByAggregateInput>;
  _sum?: InputMaybe<ProgressV2SumOrderByAggregateInput>;
  completeTime?: InputMaybe<SortOrderInput>;
  completedQuiz?: InputMaybe<SortOrder>;
  isDug?: InputMaybe<SortOrder>;
  pageId?: InputMaybe<SortOrder>;
  showHint?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  treasureId?: InputMaybe<SortOrderInput>;
  userId?: InputMaybe<SortOrder>;
};

export type ProgressV2OrderByWithRelationInput = {
  completeTime?: InputMaybe<SortOrderInput>;
  completedQuiz?: InputMaybe<SortOrder>;
  isDug?: InputMaybe<SortOrder>;
  pageId?: InputMaybe<SortOrder>;
  showHint?: InputMaybe<SortOrder>;
  startTime?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  treasureId?: InputMaybe<SortOrderInput>;
  userId?: InputMaybe<SortOrder>;
};

export enum ProgressV2ScalarFieldEnum {
  CompleteTime = 'completeTime',
  CompletedQuiz = 'completedQuiz',
  IsDug = 'isDug',
  PageId = 'pageId',
  ShowHint = 'showHint',
  StartTime = 'startTime',
  Status = 'status',
  TreasureId = 'treasureId',
  UserId = 'userId'
}

export type ProgressV2ScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ProgressV2ScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ProgressV2ScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ProgressV2ScalarWhereWithAggregatesInput>>;
  completeTime?: InputMaybe<DateTimeNullableWithAggregatesFilter>;
  completedQuiz?: InputMaybe<IntNullableListFilter>;
  isDug?: InputMaybe<BoolWithAggregatesFilter>;
  pageId?: InputMaybe<UuidWithAggregatesFilter>;
  showHint?: InputMaybe<BoolWithAggregatesFilter>;
  startTime?: InputMaybe<DateTimeWithAggregatesFilter>;
  status?: InputMaybe<EnumProgressStatusWithAggregatesFilter>;
  treasureId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
};

export type ProgressV2SumAggregate = {
  __typename?: 'ProgressV2SumAggregate';
  completedQuiz?: Maybe<Array<Scalars['Int']['output']>>;
};

export type ProgressV2SumAggregateInput = {
  completedQuiz?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProgressV2SumOrderByAggregateInput = {
  completedQuiz?: InputMaybe<SortOrder>;
};

export type ProgressV2UpdateInput = {
  completeTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  completedQuiz?: InputMaybe<ProgressV2UpdatecompletedQuizInput>;
  isDug?: InputMaybe<BoolFieldUpdateOperationsInput>;
  pageId?: InputMaybe<StringFieldUpdateOperationsInput>;
  showHint?: InputMaybe<BoolFieldUpdateOperationsInput>;
  startTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  status?: InputMaybe<EnumProgressStatusFieldUpdateOperationsInput>;
  treasureId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProgressV2UpdateManyMutationInput = {
  completeTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  completedQuiz?: InputMaybe<ProgressV2UpdatecompletedQuizInput>;
  isDug?: InputMaybe<BoolFieldUpdateOperationsInput>;
  pageId?: InputMaybe<StringFieldUpdateOperationsInput>;
  showHint?: InputMaybe<BoolFieldUpdateOperationsInput>;
  startTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  status?: InputMaybe<EnumProgressStatusFieldUpdateOperationsInput>;
  treasureId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProgressV2UpdatecompletedQuizInput = {
  push?: InputMaybe<Array<Scalars['Int']['input']>>;
  set?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type ProgressV2UserIdPageIdCompoundUniqueInput = {
  pageId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type ProgressV2WhereInput = {
  AND?: InputMaybe<Array<ProgressV2WhereInput>>;
  NOT?: InputMaybe<Array<ProgressV2WhereInput>>;
  OR?: InputMaybe<Array<ProgressV2WhereInput>>;
  completeTime?: InputMaybe<DateTimeNullableFilter>;
  completedQuiz?: InputMaybe<IntNullableListFilter>;
  isDug?: InputMaybe<BoolFilter>;
  pageId?: InputMaybe<UuidFilter>;
  showHint?: InputMaybe<BoolFilter>;
  startTime?: InputMaybe<DateTimeFilter>;
  status?: InputMaybe<EnumProgressStatusFilter>;
  treasureId?: InputMaybe<UuidNullableFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type ProgressV2WhereUniqueInput = {
  AND?: InputMaybe<Array<ProgressV2WhereInput>>;
  NOT?: InputMaybe<Array<ProgressV2WhereInput>>;
  OR?: InputMaybe<Array<ProgressV2WhereInput>>;
  completeTime?: InputMaybe<DateTimeNullableFilter>;
  completedQuiz?: InputMaybe<IntNullableListFilter>;
  isDug?: InputMaybe<BoolFilter>;
  pageId?: InputMaybe<UuidFilter>;
  showHint?: InputMaybe<BoolFilter>;
  startTime?: InputMaybe<DateTimeFilter>;
  status?: InputMaybe<EnumProgressStatusFilter>;
  treasureId?: InputMaybe<UuidNullableFilter>;
  userId?: InputMaybe<UuidFilter>;
  userId_pageId?: InputMaybe<ProgressV2UserIdPageIdCompoundUniqueInput>;
};

export type Project = {
  __typename?: 'Project';
  ProjectLikes?: Maybe<Array<ProjectLikes>>;
  _count: ProjectCount;
  addition?: Maybe<ProjectAddition>;
  alias: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  demoVideo?: Maybe<Scalars['String']['output']>;
  detail?: Maybe<ProjectDetail>;
  ecology?: Maybe<Array<Scalars['String']['output']>>;
  fields: Scalars['JSON']['output'];
  from?: Maybe<Project>;
  fromId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  invalid: Scalars['Boolean']['output'];
  invalidReason?: Maybe<Scalars['String']['output']>;
  isSubmit: Scalars['Boolean']['output'];
  likes: Scalars['Int']['output'];
  location?: Maybe<Scalars['String']['output']>;
  lock: Scalars['Boolean']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  pitchVideo?: Maybe<Scalars['String']['output']>;
  prizeTrack?: Maybe<Scalars['String']['output']>;
  progress: Scalars['Int']['output'];
  status: Scalars['String']['output'];
  teachStack?: Maybe<Array<Scalars['String']['output']>>;
  team?: Maybe<HackathonTeam>;
  teamId?: Maybe<Scalars['String']['output']>;
  tracks?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<ProjectType>;
  updatedAt: Scalars['DateTime']['output'];
  versionName?: Maybe<Scalars['String']['output']>;
  versions?: Maybe<Array<Project>>;
  vote: Scalars['Int']['output'];
  wallet?: Maybe<Scalars['String']['output']>;
  winner?: Maybe<Array<HackathonWinner>>;
};

export type ProjectAddition = {
  __typename?: 'ProjectAddition';
  contract?: Maybe<Scalars['String']['output']>;
  fields: Scalars['JSON']['output'];
  fundraisingStatus?: Maybe<Scalars['String']['output']>;
  githubLink?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  isOpenSource: Scalars['Boolean']['output'];
  project?: Maybe<Project>;
};

export type ProjectAdditionCountAggregate = {
  __typename?: 'ProjectAdditionCountAggregate';
  _all: Scalars['Int']['output'];
  contract: Scalars['Int']['output'];
  fields: Scalars['Int']['output'];
  fundraisingStatus: Scalars['Int']['output'];
  githubLink: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isOpenSource: Scalars['Int']['output'];
};

export type ProjectAdditionCreateNestedOneWithoutProjectInput = {
  connect?: InputMaybe<ProjectAdditionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectAdditionCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<ProjectAdditionCreateWithoutProjectInput>;
};

export type ProjectAdditionCreateOrConnectWithoutProjectInput = {
  create: ProjectAdditionCreateWithoutProjectInput;
  where: ProjectAdditionWhereUniqueInput;
};

export type ProjectAdditionCreateWithoutProjectInput = {
  contract?: InputMaybe<Scalars['String']['input']>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  fundraisingStatus?: InputMaybe<Scalars['String']['input']>;
  githubLink?: InputMaybe<Scalars['String']['input']>;
  isOpenSource?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectAdditionMaxAggregate = {
  __typename?: 'ProjectAdditionMaxAggregate';
  contract?: Maybe<Scalars['String']['output']>;
  fundraisingStatus?: Maybe<Scalars['String']['output']>;
  githubLink?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isOpenSource?: Maybe<Scalars['Boolean']['output']>;
};

export type ProjectAdditionMinAggregate = {
  __typename?: 'ProjectAdditionMinAggregate';
  contract?: Maybe<Scalars['String']['output']>;
  fundraisingStatus?: Maybe<Scalars['String']['output']>;
  githubLink?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isOpenSource?: Maybe<Scalars['Boolean']['output']>;
};

export type ProjectAdditionNullableRelationFilter = {
  is?: InputMaybe<ProjectAdditionWhereInput>;
  isNot?: InputMaybe<ProjectAdditionWhereInput>;
};

export type ProjectAdditionOrderByWithRelationInput = {
  contract?: InputMaybe<SortOrderInput>;
  fields?: InputMaybe<SortOrder>;
  fundraisingStatus?: InputMaybe<SortOrderInput>;
  githubLink?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  isOpenSource?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
};

export type ProjectAdditionUpdateOneWithoutProjectNestedInput = {
  connect?: InputMaybe<ProjectAdditionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectAdditionCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<ProjectAdditionCreateWithoutProjectInput>;
  delete?: InputMaybe<ProjectAdditionWhereInput>;
  disconnect?: InputMaybe<ProjectAdditionWhereInput>;
  update?: InputMaybe<ProjectAdditionUpdateToOneWithWhereWithoutProjectInput>;
  upsert?: InputMaybe<ProjectAdditionUpsertWithoutProjectInput>;
};

export type ProjectAdditionUpdateToOneWithWhereWithoutProjectInput = {
  data: ProjectAdditionUpdateWithoutProjectInput;
  where?: InputMaybe<ProjectAdditionWhereInput>;
};

export type ProjectAdditionUpdateWithoutProjectInput = {
  contract?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  fundraisingStatus?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  githubLink?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  isOpenSource?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type ProjectAdditionUpsertWithoutProjectInput = {
  create: ProjectAdditionCreateWithoutProjectInput;
  update: ProjectAdditionUpdateWithoutProjectInput;
  where?: InputMaybe<ProjectAdditionWhereInput>;
};

export type ProjectAdditionWhereInput = {
  AND?: InputMaybe<Array<ProjectAdditionWhereInput>>;
  NOT?: InputMaybe<Array<ProjectAdditionWhereInput>>;
  OR?: InputMaybe<Array<ProjectAdditionWhereInput>>;
  contract?: InputMaybe<StringNullableFilter>;
  fields?: InputMaybe<JsonFilter>;
  fundraisingStatus?: InputMaybe<StringNullableFilter>;
  githubLink?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  isOpenSource?: InputMaybe<BoolFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
};

export type ProjectAdditionWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectAdditionWhereInput>>;
  NOT?: InputMaybe<Array<ProjectAdditionWhereInput>>;
  OR?: InputMaybe<Array<ProjectAdditionWhereInput>>;
  contract?: InputMaybe<StringNullableFilter>;
  fields?: InputMaybe<JsonFilter>;
  fundraisingStatus?: InputMaybe<StringNullableFilter>;
  githubLink?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpenSource?: InputMaybe<BoolFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
};

export type ProjectAvgAggregate = {
  __typename?: 'ProjectAvgAggregate';
  likes?: Maybe<Scalars['Float']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  vote?: Maybe<Scalars['Float']['output']>;
};

export type ProjectCount = {
  __typename?: 'ProjectCount';
  ProjectLikes: Scalars['Int']['output'];
  versions: Scalars['Int']['output'];
  winner: Scalars['Int']['output'];
};

export type ProjectCountAggregate = {
  __typename?: 'ProjectCountAggregate';
  _all: Scalars['Int']['output'];
  alias: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  creatorId: Scalars['Int']['output'];
  deletedAt: Scalars['Int']['output'];
  demoVideo: Scalars['Int']['output'];
  ecology: Scalars['Int']['output'];
  fields: Scalars['Int']['output'];
  fromId: Scalars['Int']['output'];
  hackathonId: Scalars['Int']['output'];
  hackathonName: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  invalid: Scalars['Int']['output'];
  invalidReason: Scalars['Int']['output'];
  isSubmit: Scalars['Int']['output'];
  likes: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  lock: Scalars['Int']['output'];
  logo: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  pitchVideo: Scalars['Int']['output'];
  prizeTrack: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  teachStack: Scalars['Int']['output'];
  teamId: Scalars['Int']['output'];
  tracks: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  versionName: Scalars['Int']['output'];
  vote: Scalars['Int']['output'];
  wallet: Scalars['Int']['output'];
};

export type ProjectCreateInput = {
  ProjectLikes?: InputMaybe<ProjectLikesCreateNestedManyWithoutProjectInput>;
  addition?: InputMaybe<ProjectAdditionCreateNestedOneWithoutProjectInput>;
  alias?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;
  demoVideo?: InputMaybe<Scalars['String']['input']>;
  detail?: InputMaybe<ProjectDetailCreateNestedOneWithoutProjectInput>;
  ecology?: InputMaybe<ProjectCreateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  from?: InputMaybe<ProjectCreateNestedOneWithoutVersionsInput>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  hackathonName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<Scalars['Boolean']['input']>;
  invalidReason?: InputMaybe<Scalars['String']['input']>;
  isSubmit?: InputMaybe<Scalars['Boolean']['input']>;
  likes?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pitchVideo?: InputMaybe<Scalars['String']['input']>;
  prizeTrack?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  teachStack?: InputMaybe<ProjectCreateteachStackInput>;
  team?: InputMaybe<HackathonTeamCreateNestedOneWithoutProjectInput>;
  teamId?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<ProjectCreatetracksInput>;
  type?: InputMaybe<ProjectType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  versionName?: InputMaybe<Scalars['String']['input']>;
  versions?: InputMaybe<ProjectCreateNestedManyWithoutFromInput>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  wallet?: InputMaybe<Scalars['String']['input']>;
  winner?: InputMaybe<HackathonWinnerCreateNestedManyWithoutProjectInput>;
};

export type ProjectCreateManyFromInput = {
  alias: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;
  demoVideo?: InputMaybe<Scalars['String']['input']>;
  ecology?: InputMaybe<ProjectCreateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  hackathonName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<Scalars['Boolean']['input']>;
  invalidReason?: InputMaybe<Scalars['String']['input']>;
  isSubmit?: InputMaybe<Scalars['Boolean']['input']>;
  likes?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pitchVideo?: InputMaybe<Scalars['String']['input']>;
  prizeTrack?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  teachStack?: InputMaybe<ProjectCreateteachStackInput>;
  teamId?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<ProjectCreatetracksInput>;
  type?: InputMaybe<ProjectType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  versionName?: InputMaybe<Scalars['String']['input']>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  wallet?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectCreateManyFromInputEnvelope = {
  data: Array<ProjectCreateManyFromInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectCreateManyInput = {
  alias: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;
  demoVideo?: InputMaybe<Scalars['String']['input']>;
  ecology?: InputMaybe<ProjectCreateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  fromId?: InputMaybe<Scalars['String']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  hackathonName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<Scalars['Boolean']['input']>;
  invalidReason?: InputMaybe<Scalars['String']['input']>;
  isSubmit?: InputMaybe<Scalars['Boolean']['input']>;
  likes?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pitchVideo?: InputMaybe<Scalars['String']['input']>;
  prizeTrack?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  teachStack?: InputMaybe<ProjectCreateteachStackInput>;
  teamId?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<ProjectCreatetracksInput>;
  type?: InputMaybe<ProjectType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  versionName?: InputMaybe<Scalars['String']['input']>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  wallet?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectCreateNestedManyWithoutFromInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutFromInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutFromInput>>;
  createMany?: InputMaybe<ProjectCreateManyFromInputEnvelope>;
};

export type ProjectCreateNestedOneWithoutTeamInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutTeamInput>;
  create?: InputMaybe<ProjectCreateWithoutTeamInput>;
};

export type ProjectCreateNestedOneWithoutVersionsInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutVersionsInput>;
  create?: InputMaybe<ProjectCreateWithoutVersionsInput>;
};

export type ProjectCreateOrConnectWithoutFromInput = {
  create: ProjectCreateWithoutFromInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutTeamInput = {
  create: ProjectCreateWithoutTeamInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutVersionsInput = {
  create: ProjectCreateWithoutVersionsInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateWithoutFromInput = {
  ProjectLikes?: InputMaybe<ProjectLikesCreateNestedManyWithoutProjectInput>;
  addition?: InputMaybe<ProjectAdditionCreateNestedOneWithoutProjectInput>;
  alias: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;
  demoVideo?: InputMaybe<Scalars['String']['input']>;
  detail?: InputMaybe<ProjectDetailCreateNestedOneWithoutProjectInput>;
  ecology?: InputMaybe<ProjectCreateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  hackathonName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<Scalars['Boolean']['input']>;
  invalidReason?: InputMaybe<Scalars['String']['input']>;
  isSubmit?: InputMaybe<Scalars['Boolean']['input']>;
  likes?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pitchVideo?: InputMaybe<Scalars['String']['input']>;
  prizeTrack?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  teachStack?: InputMaybe<ProjectCreateteachStackInput>;
  team?: InputMaybe<HackathonTeamCreateNestedOneWithoutProjectInput>;
  teamId?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<ProjectCreatetracksInput>;
  type?: InputMaybe<ProjectType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  versionName?: InputMaybe<Scalars['String']['input']>;
  versions?: InputMaybe<ProjectCreateNestedManyWithoutFromInput>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  wallet?: InputMaybe<Scalars['String']['input']>;
  winner?: InputMaybe<HackathonWinnerCreateNestedManyWithoutProjectInput>;
};

export type ProjectCreateWithoutTeamInput = {
  ProjectLikes?: InputMaybe<ProjectLikesCreateNestedManyWithoutProjectInput>;
  addition?: InputMaybe<ProjectAdditionCreateNestedOneWithoutProjectInput>;
  alias: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;
  demoVideo?: InputMaybe<Scalars['String']['input']>;
  detail?: InputMaybe<ProjectDetailCreateNestedOneWithoutProjectInput>;
  ecology?: InputMaybe<ProjectCreateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  from?: InputMaybe<ProjectCreateNestedOneWithoutVersionsInput>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  hackathonName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<Scalars['Boolean']['input']>;
  invalidReason?: InputMaybe<Scalars['String']['input']>;
  isSubmit?: InputMaybe<Scalars['Boolean']['input']>;
  likes?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pitchVideo?: InputMaybe<Scalars['String']['input']>;
  prizeTrack?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  teachStack?: InputMaybe<ProjectCreateteachStackInput>;
  teamId?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<ProjectCreatetracksInput>;
  type?: InputMaybe<ProjectType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  versionName?: InputMaybe<Scalars['String']['input']>;
  versions?: InputMaybe<ProjectCreateNestedManyWithoutFromInput>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  wallet?: InputMaybe<Scalars['String']['input']>;
  winner?: InputMaybe<HackathonWinnerCreateNestedManyWithoutProjectInput>;
};

export type ProjectCreateWithoutVersionsInput = {
  ProjectLikes?: InputMaybe<ProjectLikesCreateNestedManyWithoutProjectInput>;
  addition?: InputMaybe<ProjectAdditionCreateNestedOneWithoutProjectInput>;
  alias: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  creatorId?: InputMaybe<Scalars['String']['input']>;
  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;
  demoVideo?: InputMaybe<Scalars['String']['input']>;
  detail?: InputMaybe<ProjectDetailCreateNestedOneWithoutProjectInput>;
  ecology?: InputMaybe<ProjectCreateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  from?: InputMaybe<ProjectCreateNestedOneWithoutVersionsInput>;
  hackathonId?: InputMaybe<Scalars['String']['input']>;
  hackathonName?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<Scalars['Boolean']['input']>;
  invalidReason?: InputMaybe<Scalars['String']['input']>;
  isSubmit?: InputMaybe<Scalars['Boolean']['input']>;
  likes?: InputMaybe<Scalars['Int']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  lock?: InputMaybe<Scalars['Boolean']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  pitchVideo?: InputMaybe<Scalars['String']['input']>;
  prizeTrack?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  teachStack?: InputMaybe<ProjectCreateteachStackInput>;
  team?: InputMaybe<HackathonTeamCreateNestedOneWithoutProjectInput>;
  teamId?: InputMaybe<Scalars['String']['input']>;
  tracks?: InputMaybe<ProjectCreatetracksInput>;
  type?: InputMaybe<ProjectType>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  versionName?: InputMaybe<Scalars['String']['input']>;
  vote?: InputMaybe<Scalars['Int']['input']>;
  wallet?: InputMaybe<Scalars['String']['input']>;
  winner?: InputMaybe<HackathonWinnerCreateNestedManyWithoutProjectInput>;
};

export type ProjectCreateecologyInput = {
  set: Array<Scalars['String']['input']>;
};

export type ProjectCreateteachStackInput = {
  set: Array<Scalars['String']['input']>;
};

export type ProjectCreatetracksInput = {
  set: Array<Scalars['String']['input']>;
};

export type ProjectDetail = {
  __typename?: 'ProjectDetail';
  detailedIntro?: Maybe<Scalars['String']['output']>;
  fields: Scalars['JSON']['output'];
  id: Scalars['String']['output'];
  oneLineIntro?: Maybe<Scalars['String']['output']>;
  progress?: Maybe<Scalars['String']['output']>;
  project?: Maybe<Project>;
  teamBackground?: Maybe<Scalars['String']['output']>;
};

export type ProjectDetailCountAggregate = {
  __typename?: 'ProjectDetailCountAggregate';
  _all: Scalars['Int']['output'];
  detailedIntro: Scalars['Int']['output'];
  fields: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  oneLineIntro: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  teamBackground: Scalars['Int']['output'];
};

export type ProjectDetailCreateNestedOneWithoutProjectInput = {
  connect?: InputMaybe<ProjectDetailWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectDetailCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<ProjectDetailCreateWithoutProjectInput>;
};

export type ProjectDetailCreateOrConnectWithoutProjectInput = {
  create: ProjectDetailCreateWithoutProjectInput;
  where: ProjectDetailWhereUniqueInput;
};

export type ProjectDetailCreateWithoutProjectInput = {
  detailedIntro?: InputMaybe<Scalars['String']['input']>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  oneLineIntro?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<Scalars['String']['input']>;
  teamBackground?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectDetailMaxAggregate = {
  __typename?: 'ProjectDetailMaxAggregate';
  detailedIntro?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  oneLineIntro?: Maybe<Scalars['String']['output']>;
  progress?: Maybe<Scalars['String']['output']>;
  teamBackground?: Maybe<Scalars['String']['output']>;
};

export type ProjectDetailMinAggregate = {
  __typename?: 'ProjectDetailMinAggregate';
  detailedIntro?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  oneLineIntro?: Maybe<Scalars['String']['output']>;
  progress?: Maybe<Scalars['String']['output']>;
  teamBackground?: Maybe<Scalars['String']['output']>;
};

export type ProjectDetailNullableRelationFilter = {
  is?: InputMaybe<ProjectDetailWhereInput>;
  isNot?: InputMaybe<ProjectDetailWhereInput>;
};

export type ProjectDetailOrderByWithRelationInput = {
  detailedIntro?: InputMaybe<SortOrderInput>;
  fields?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  oneLineIntro?: InputMaybe<SortOrderInput>;
  progress?: InputMaybe<SortOrderInput>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  teamBackground?: InputMaybe<SortOrderInput>;
};

export type ProjectDetailUpdateOneWithoutProjectNestedInput = {
  connect?: InputMaybe<ProjectDetailWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectDetailCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<ProjectDetailCreateWithoutProjectInput>;
  delete?: InputMaybe<ProjectDetailWhereInput>;
  disconnect?: InputMaybe<ProjectDetailWhereInput>;
  update?: InputMaybe<ProjectDetailUpdateToOneWithWhereWithoutProjectInput>;
  upsert?: InputMaybe<ProjectDetailUpsertWithoutProjectInput>;
};

export type ProjectDetailUpdateToOneWithWhereWithoutProjectInput = {
  data: ProjectDetailUpdateWithoutProjectInput;
  where?: InputMaybe<ProjectDetailWhereInput>;
};

export type ProjectDetailUpdateWithoutProjectInput = {
  detailedIntro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  oneLineIntro?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  teamBackground?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ProjectDetailUpsertWithoutProjectInput = {
  create: ProjectDetailCreateWithoutProjectInput;
  update: ProjectDetailUpdateWithoutProjectInput;
  where?: InputMaybe<ProjectDetailWhereInput>;
};

export type ProjectDetailWhereInput = {
  AND?: InputMaybe<Array<ProjectDetailWhereInput>>;
  NOT?: InputMaybe<Array<ProjectDetailWhereInput>>;
  OR?: InputMaybe<Array<ProjectDetailWhereInput>>;
  detailedIntro?: InputMaybe<StringNullableFilter>;
  fields?: InputMaybe<JsonFilter>;
  id?: InputMaybe<UuidFilter>;
  oneLineIntro?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<StringNullableFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  teamBackground?: InputMaybe<StringNullableFilter>;
};

export type ProjectDetailWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectDetailWhereInput>>;
  NOT?: InputMaybe<Array<ProjectDetailWhereInput>>;
  OR?: InputMaybe<Array<ProjectDetailWhereInput>>;
  detailedIntro?: InputMaybe<StringNullableFilter>;
  fields?: InputMaybe<JsonFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  oneLineIntro?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<StringNullableFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  teamBackground?: InputMaybe<StringNullableFilter>;
};

export type ProjectExtend = {
  __typename?: 'ProjectExtend';
  ProjectLikes?: Maybe<Array<ProjectLikes>>;
  _count: ProjectCount;
  addition?: Maybe<ProjectAddition>;
  alias: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  demoVideo?: Maybe<Scalars['String']['output']>;
  detail?: Maybe<ProjectDetail>;
  ecology?: Maybe<Array<Scalars['String']['output']>>;
  ecosystem?: Maybe<Array<EcosystemExtend>>;
  fields: Scalars['JSON']['output'];
  from?: Maybe<Project>;
  fromId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  invalid: Scalars['Boolean']['output'];
  invalidReason?: Maybe<Scalars['String']['output']>;
  isLiked?: Maybe<Scalars['Boolean']['output']>;
  isSubmit: Scalars['Boolean']['output'];
  likes?: Maybe<Scalars['Float']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  lock: Scalars['Boolean']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  pitchVideo?: Maybe<Scalars['String']['output']>;
  prizeTrack?: Maybe<Scalars['String']['output']>;
  progress: Scalars['Int']['output'];
  rewards?: Maybe<Array<ProjectVotingReward>>;
  status: Scalars['String']['output'];
  teachStack?: Maybe<Array<Scalars['String']['output']>>;
  team?: Maybe<HackathonTeamExtend>;
  teamId?: Maybe<Scalars['String']['output']>;
  teamLead?: Maybe<HackathonMemberExtend>;
  tracks?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<ProjectType>;
  updatedAt: Scalars['DateTime']['output'];
  versionName?: Maybe<Scalars['String']['output']>;
  versions?: Maybe<Array<Project>>;
  vote: Scalars['Int']['output'];
  wallet?: Maybe<Scalars['String']['output']>;
  winner?: Maybe<Array<HackathonWinnerExtend>>;
};

export type ProjectFromIdHackathonIdCompoundUniqueInput = {
  fromId: Scalars['String']['input'];
  hackathonId: Scalars['String']['input'];
};

export type ProjectInfo = {
  __typename?: 'ProjectInfo';
  ProjectLikes?: Maybe<Array<ProjectLikes>>;
  _count: ProjectCount;
  addition?: Maybe<ProjectAddition>;
  alias: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  demoVideo?: Maybe<Scalars['String']['output']>;
  detail?: Maybe<ProjectDetail>;
  ecology?: Maybe<Array<Scalars['String']['output']>>;
  ecosystem?: Maybe<Array<EcosystemExtend>>;
  fields: Scalars['JSON']['output'];
  /** fix模式 */
  fixOrSocreVote?: Maybe<FixOrScoreVote>;
  from?: Maybe<Project>;
  fromId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  invalid: Scalars['Boolean']['output'];
  invalidReason?: Maybe<Scalars['String']['output']>;
  isLiked?: Maybe<Scalars['Boolean']['output']>;
  isSubmit: Scalars['Boolean']['output'];
  likes?: Maybe<Scalars['Float']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  lock: Scalars['Boolean']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  pitchVideo?: Maybe<Scalars['String']['output']>;
  prizeTrack?: Maybe<Scalars['String']['output']>;
  progress: Scalars['Int']['output'];
  rewards?: Maybe<Array<ProjectVotingReward>>;
  status: Scalars['String']['output'];
  teachStack?: Maybe<Array<Scalars['String']['output']>>;
  team?: Maybe<HackathonTeamExtend>;
  teamId?: Maybe<Scalars['String']['output']>;
  teamLead?: Maybe<HackathonMemberExtend>;
  tracks?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<ProjectType>;
  updatedAt: Scalars['DateTime']['output'];
  versionName?: Maybe<Scalars['String']['output']>;
  versions?: Maybe<Array<Project>>;
  vote: Scalars['Int']['output'];
  wallet?: Maybe<Scalars['String']['output']>;
  winner?: Maybe<Array<HackathonWinnerExtend>>;
};

export type ProjectJudgeDetail = {
  __typename?: 'ProjectJudgeDetail';
  alias: Scalars['String']['output'];
  detail?: Maybe<ProjectDetail>;
  id: Scalars['String']['output'];
  logo?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  prizeTrack?: Maybe<Scalars['String']['output']>;
  vote: Scalars['Int']['output'];
  voteJudgeCount?: Maybe<Scalars['Float']['output']>;
};

export type ProjectLikes = {
  __typename?: 'ProjectLikes';
  project?: Maybe<Project>;
  projectId: Scalars['String']['output'];
  userId: Scalars['String']['output'];
};

export type ProjectLikesCountAggregate = {
  __typename?: 'ProjectLikesCountAggregate';
  _all: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type ProjectLikesCreateManyProjectInput = {
  userId: Scalars['String']['input'];
};

export type ProjectLikesCreateManyProjectInputEnvelope = {
  data: Array<ProjectLikesCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectLikesCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ProjectLikesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectLikesCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectLikesCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectLikesCreateManyProjectInputEnvelope>;
};

export type ProjectLikesCreateOrConnectWithoutProjectInput = {
  create: ProjectLikesCreateWithoutProjectInput;
  where: ProjectLikesWhereUniqueInput;
};

export type ProjectLikesCreateWithoutProjectInput = {
  userId: Scalars['String']['input'];
};

export type ProjectLikesListRelationFilter = {
  every?: InputMaybe<ProjectLikesWhereInput>;
  none?: InputMaybe<ProjectLikesWhereInput>;
  some?: InputMaybe<ProjectLikesWhereInput>;
};

export type ProjectLikesMaxAggregate = {
  __typename?: 'ProjectLikesMaxAggregate';
  projectId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ProjectLikesMinAggregate = {
  __typename?: 'ProjectLikesMinAggregate';
  projectId?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ProjectLikesOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ProjectLikesProjectIdUserIdCompoundUniqueInput = {
  projectId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type ProjectLikesScalarWhereInput = {
  AND?: InputMaybe<Array<ProjectLikesScalarWhereInput>>;
  NOT?: InputMaybe<Array<ProjectLikesScalarWhereInput>>;
  OR?: InputMaybe<Array<ProjectLikesScalarWhereInput>>;
  projectId?: InputMaybe<UuidFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type ProjectLikesUpdateManyMutationInput = {
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectLikesUpdateManyWithWhereWithoutProjectInput = {
  data: ProjectLikesUpdateManyMutationInput;
  where: ProjectLikesScalarWhereInput;
};

export type ProjectLikesUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<ProjectLikesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectLikesCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectLikesCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectLikesCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<ProjectLikesWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectLikesScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectLikesWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectLikesWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectLikesUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<ProjectLikesUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<ProjectLikesUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type ProjectLikesUpdateWithWhereUniqueWithoutProjectInput = {
  data: ProjectLikesUpdateWithoutProjectInput;
  where: ProjectLikesWhereUniqueInput;
};

export type ProjectLikesUpdateWithoutProjectInput = {
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectLikesUpsertWithWhereUniqueWithoutProjectInput = {
  create: ProjectLikesCreateWithoutProjectInput;
  update: ProjectLikesUpdateWithoutProjectInput;
  where: ProjectLikesWhereUniqueInput;
};

export type ProjectLikesWhereInput = {
  AND?: InputMaybe<Array<ProjectLikesWhereInput>>;
  NOT?: InputMaybe<Array<ProjectLikesWhereInput>>;
  OR?: InputMaybe<Array<ProjectLikesWhereInput>>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<UuidFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type ProjectLikesWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectLikesWhereInput>>;
  NOT?: InputMaybe<Array<ProjectLikesWhereInput>>;
  OR?: InputMaybe<Array<ProjectLikesWhereInput>>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<UuidFilter>;
  projectId_userId?: InputMaybe<ProjectLikesProjectIdUserIdCompoundUniqueInput>;
  userId?: InputMaybe<UuidFilter>;
};

export type ProjectListPaginated = {
  __typename?: 'ProjectListPaginated';
  data?: Maybe<Array<ProjectExtend>>;
  total: Scalars['Int']['output'];
};

export type ProjectListRelationFilter = {
  every?: InputMaybe<ProjectWhereInput>;
  none?: InputMaybe<ProjectWhereInput>;
  some?: InputMaybe<ProjectWhereInput>;
};

export type ProjectMaxAggregate = {
  __typename?: 'ProjectMaxAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  demoVideo?: Maybe<Scalars['String']['output']>;
  fromId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  invalid?: Maybe<Scalars['Boolean']['output']>;
  invalidReason?: Maybe<Scalars['String']['output']>;
  isSubmit?: Maybe<Scalars['Boolean']['output']>;
  likes?: Maybe<Scalars['Int']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  lock?: Maybe<Scalars['Boolean']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pitchVideo?: Maybe<Scalars['String']['output']>;
  prizeTrack?: Maybe<Scalars['String']['output']>;
  progress?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  teamId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<ProjectType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  versionName?: Maybe<Scalars['String']['output']>;
  vote?: Maybe<Scalars['Int']['output']>;
  wallet?: Maybe<Scalars['String']['output']>;
};

export type ProjectMinAggregate = {
  __typename?: 'ProjectMinAggregate';
  alias?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  creatorId?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  demoVideo?: Maybe<Scalars['String']['output']>;
  fromId?: Maybe<Scalars['String']['output']>;
  hackathonId?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  invalid?: Maybe<Scalars['Boolean']['output']>;
  invalidReason?: Maybe<Scalars['String']['output']>;
  isSubmit?: Maybe<Scalars['Boolean']['output']>;
  likes?: Maybe<Scalars['Int']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  lock?: Maybe<Scalars['Boolean']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pitchVideo?: Maybe<Scalars['String']['output']>;
  prizeTrack?: Maybe<Scalars['String']['output']>;
  progress?: Maybe<Scalars['Int']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  teamId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<ProjectType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  versionName?: Maybe<Scalars['String']['output']>;
  vote?: Maybe<Scalars['Int']['output']>;
  wallet?: Maybe<Scalars['String']['output']>;
};

export type ProjectNullableRelationFilter = {
  is?: InputMaybe<ProjectWhereInput>;
  isNot?: InputMaybe<ProjectWhereInput>;
};

export type ProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ProjectOrderByWithRelationInput = {
  ProjectLikes?: InputMaybe<ProjectLikesOrderByRelationAggregateInput>;
  addition?: InputMaybe<ProjectAdditionOrderByWithRelationInput>;
  alias?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  creatorId?: InputMaybe<SortOrderInput>;
  deletedAt?: InputMaybe<SortOrderInput>;
  demoVideo?: InputMaybe<SortOrderInput>;
  detail?: InputMaybe<ProjectDetailOrderByWithRelationInput>;
  ecology?: InputMaybe<SortOrder>;
  fields?: InputMaybe<SortOrder>;
  from?: InputMaybe<ProjectOrderByWithRelationInput>;
  fromId?: InputMaybe<SortOrderInput>;
  hackathonId?: InputMaybe<SortOrderInput>;
  hackathonName?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  invalid?: InputMaybe<SortOrder>;
  invalidReason?: InputMaybe<SortOrderInput>;
  isSubmit?: InputMaybe<SortOrder>;
  likes?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrderInput>;
  lock?: InputMaybe<SortOrder>;
  logo?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  pitchVideo?: InputMaybe<SortOrderInput>;
  prizeTrack?: InputMaybe<SortOrderInput>;
  progress?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  teachStack?: InputMaybe<SortOrder>;
  team?: InputMaybe<HackathonTeamOrderByWithRelationInput>;
  teamId?: InputMaybe<SortOrderInput>;
  tracks?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  versionName?: InputMaybe<SortOrderInput>;
  versions?: InputMaybe<ProjectOrderByRelationAggregateInput>;
  vote?: InputMaybe<SortOrder>;
  wallet?: InputMaybe<SortOrderInput>;
  winner?: InputMaybe<HackathonWinnerOrderByRelationAggregateInput>;
};

export type ProjectRelationFilter = {
  is?: InputMaybe<ProjectWhereInput>;
  isNot?: InputMaybe<ProjectWhereInput>;
};

export enum ProjectScalarFieldEnum {
  Alias = 'alias',
  CreatedAt = 'createdAt',
  CreatorId = 'creatorId',
  DeletedAt = 'deletedAt',
  DemoVideo = 'demoVideo',
  Ecology = 'ecology',
  Fields = 'fields',
  FromId = 'fromId',
  HackathonId = 'hackathonId',
  HackathonName = 'hackathonName',
  Id = 'id',
  Invalid = 'invalid',
  InvalidReason = 'invalidReason',
  IsSubmit = 'isSubmit',
  Likes = 'likes',
  Location = 'location',
  Lock = 'lock',
  Logo = 'logo',
  Name = 'name',
  PitchVideo = 'pitchVideo',
  PrizeTrack = 'prizeTrack',
  Progress = 'progress',
  Status = 'status',
  TeachStack = 'teachStack',
  TeamId = 'teamId',
  Tracks = 'tracks',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  VersionName = 'versionName',
  Vote = 'vote',
  Wallet = 'wallet'
}

export type ProjectScalarWhereInput = {
  AND?: InputMaybe<Array<ProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<ProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<ProjectScalarWhereInput>>;
  alias?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  deletedAt?: InputMaybe<DateTimeNullableFilter>;
  demoVideo?: InputMaybe<StringNullableFilter>;
  ecology?: InputMaybe<StringNullableListFilter>;
  fields?: InputMaybe<JsonFilter>;
  fromId?: InputMaybe<UuidNullableFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  hackathonName?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  invalid?: InputMaybe<BoolFilter>;
  invalidReason?: InputMaybe<StringNullableFilter>;
  isSubmit?: InputMaybe<BoolFilter>;
  likes?: InputMaybe<IntFilter>;
  location?: InputMaybe<StringNullableFilter>;
  lock?: InputMaybe<BoolFilter>;
  logo?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringFilter>;
  pitchVideo?: InputMaybe<StringNullableFilter>;
  prizeTrack?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  teachStack?: InputMaybe<StringNullableListFilter>;
  teamId?: InputMaybe<UuidNullableFilter>;
  tracks?: InputMaybe<StringNullableListFilter>;
  type?: InputMaybe<EnumProjectTypeNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  versionName?: InputMaybe<StringNullableFilter>;
  vote?: InputMaybe<IntFilter>;
  wallet?: InputMaybe<StringNullableFilter>;
};

export type ProjectSubmitInput = {
  fields?: InputMaybe<Scalars['JSON']['input']>;
  fromId: Scalars['String']['input'];
  hackathonId: Scalars['String']['input'];
  isSubmit?: InputMaybe<BoolFieldUpdateOperationsInput>;
  prizeTrack?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ProjectSumAggregate = {
  __typename?: 'ProjectSumAggregate';
  likes?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Int']['output']>;
  vote?: Maybe<Scalars['Int']['output']>;
};

export enum ProjectType {
  Branch = 'Branch',
  Main = 'Main'
}

export type ProjectUpdateInput = {
  ProjectLikes?: InputMaybe<ProjectLikesUpdateManyWithoutProjectNestedInput>;
  addition?: InputMaybe<ProjectAdditionUpdateOneWithoutProjectNestedInput>;
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  deletedAt?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  demoVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  detail?: InputMaybe<ProjectDetailUpdateOneWithoutProjectNestedInput>;
  ecology?: InputMaybe<ProjectUpdateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  from?: InputMaybe<ProjectUpdateOneWithoutVersionsNestedInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  invalid?: InputMaybe<BoolFieldUpdateOperationsInput>;
  invalidReason?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  isSubmit?: InputMaybe<BoolFieldUpdateOperationsInput>;
  likes?: InputMaybe<IntFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pitchVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  prizeTrack?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  teachStack?: InputMaybe<ProjectUpdateteachStackInput>;
  team?: InputMaybe<HackathonTeamUpdateOneWithoutProjectNestedInput>;
  teamId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  tracks?: InputMaybe<ProjectUpdatetracksInput>;
  type?: InputMaybe<NullableEnumProjectTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  versionName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  versions?: InputMaybe<ProjectUpdateManyWithoutFromNestedInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  wallet?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  winner?: InputMaybe<HackathonWinnerUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUpdateManyMutationInput = {
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  deletedAt?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  demoVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  ecology?: InputMaybe<ProjectUpdateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  invalid?: InputMaybe<BoolFieldUpdateOperationsInput>;
  invalidReason?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  isSubmit?: InputMaybe<BoolFieldUpdateOperationsInput>;
  likes?: InputMaybe<IntFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pitchVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  prizeTrack?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  teachStack?: InputMaybe<ProjectUpdateteachStackInput>;
  teamId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  tracks?: InputMaybe<ProjectUpdatetracksInput>;
  type?: InputMaybe<NullableEnumProjectTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  versionName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  wallet?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ProjectUpdateManyWithWhereWithoutFromInput = {
  data: ProjectUpdateManyMutationInput;
  where: ProjectScalarWhereInput;
};

export type ProjectUpdateManyWithoutFromNestedInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutFromInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutFromInput>>;
  createMany?: InputMaybe<ProjectCreateManyFromInputEnvelope>;
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectUpdateWithWhereUniqueWithoutFromInput>>;
  updateMany?: InputMaybe<Array<ProjectUpdateManyWithWhereWithoutFromInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertWithWhereUniqueWithoutFromInput>>;
};

export type ProjectUpdateOneWithoutTeamNestedInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutTeamInput>;
  create?: InputMaybe<ProjectCreateWithoutTeamInput>;
  delete?: InputMaybe<ProjectWhereInput>;
  disconnect?: InputMaybe<ProjectWhereInput>;
  update?: InputMaybe<ProjectUpdateToOneWithWhereWithoutTeamInput>;
  upsert?: InputMaybe<ProjectUpsertWithoutTeamInput>;
};

export type ProjectUpdateOneWithoutVersionsNestedInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutVersionsInput>;
  create?: InputMaybe<ProjectCreateWithoutVersionsInput>;
  delete?: InputMaybe<ProjectWhereInput>;
  disconnect?: InputMaybe<ProjectWhereInput>;
  update?: InputMaybe<ProjectUpdateToOneWithWhereWithoutVersionsInput>;
  upsert?: InputMaybe<ProjectUpsertWithoutVersionsInput>;
};

export type ProjectUpdateToOneWithWhereWithoutTeamInput = {
  data: ProjectUpdateWithoutTeamInput;
  where?: InputMaybe<ProjectWhereInput>;
};

export type ProjectUpdateToOneWithWhereWithoutVersionsInput = {
  data: ProjectUpdateWithoutVersionsInput;
  where?: InputMaybe<ProjectWhereInput>;
};

export type ProjectUpdateWithWhereUniqueWithoutFromInput = {
  data: ProjectUpdateWithoutFromInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpdateWithoutFromInput = {
  ProjectLikes?: InputMaybe<ProjectLikesUpdateManyWithoutProjectNestedInput>;
  addition?: InputMaybe<ProjectAdditionUpdateOneWithoutProjectNestedInput>;
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  deletedAt?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  demoVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  detail?: InputMaybe<ProjectDetailUpdateOneWithoutProjectNestedInput>;
  ecology?: InputMaybe<ProjectUpdateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  invalid?: InputMaybe<BoolFieldUpdateOperationsInput>;
  invalidReason?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  isSubmit?: InputMaybe<BoolFieldUpdateOperationsInput>;
  likes?: InputMaybe<IntFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pitchVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  prizeTrack?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  teachStack?: InputMaybe<ProjectUpdateteachStackInput>;
  team?: InputMaybe<HackathonTeamUpdateOneWithoutProjectNestedInput>;
  teamId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  tracks?: InputMaybe<ProjectUpdatetracksInput>;
  type?: InputMaybe<NullableEnumProjectTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  versionName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  versions?: InputMaybe<ProjectUpdateManyWithoutFromNestedInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  wallet?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  winner?: InputMaybe<HackathonWinnerUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUpdateWithoutTeamInput = {
  ProjectLikes?: InputMaybe<ProjectLikesUpdateManyWithoutProjectNestedInput>;
  addition?: InputMaybe<ProjectAdditionUpdateOneWithoutProjectNestedInput>;
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  deletedAt?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  demoVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  detail?: InputMaybe<ProjectDetailUpdateOneWithoutProjectNestedInput>;
  ecology?: InputMaybe<ProjectUpdateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  from?: InputMaybe<ProjectUpdateOneWithoutVersionsNestedInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  invalid?: InputMaybe<BoolFieldUpdateOperationsInput>;
  invalidReason?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  isSubmit?: InputMaybe<BoolFieldUpdateOperationsInput>;
  likes?: InputMaybe<IntFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pitchVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  prizeTrack?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  teachStack?: InputMaybe<ProjectUpdateteachStackInput>;
  teamId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  tracks?: InputMaybe<ProjectUpdatetracksInput>;
  type?: InputMaybe<NullableEnumProjectTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  versionName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  versions?: InputMaybe<ProjectUpdateManyWithoutFromNestedInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  wallet?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  winner?: InputMaybe<HackathonWinnerUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUpdateWithoutVersionsInput = {
  ProjectLikes?: InputMaybe<ProjectLikesUpdateManyWithoutProjectNestedInput>;
  addition?: InputMaybe<ProjectAdditionUpdateOneWithoutProjectNestedInput>;
  alias?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  creatorId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  deletedAt?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  demoVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  detail?: InputMaybe<ProjectDetailUpdateOneWithoutProjectNestedInput>;
  ecology?: InputMaybe<ProjectUpdateecologyInput>;
  fields?: InputMaybe<Scalars['JSON']['input']>;
  from?: InputMaybe<ProjectUpdateOneWithoutVersionsNestedInput>;
  hackathonId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackathonName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  invalid?: InputMaybe<BoolFieldUpdateOperationsInput>;
  invalidReason?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  isSubmit?: InputMaybe<BoolFieldUpdateOperationsInput>;
  likes?: InputMaybe<IntFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  lock?: InputMaybe<BoolFieldUpdateOperationsInput>;
  logo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pitchVideo?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  prizeTrack?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  progress?: InputMaybe<IntFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  teachStack?: InputMaybe<ProjectUpdateteachStackInput>;
  team?: InputMaybe<HackathonTeamUpdateOneWithoutProjectNestedInput>;
  teamId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  tracks?: InputMaybe<ProjectUpdatetracksInput>;
  type?: InputMaybe<NullableEnumProjectTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  versionName?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  vote?: InputMaybe<IntFieldUpdateOperationsInput>;
  wallet?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  winner?: InputMaybe<HackathonWinnerUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUpdateecologyInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ProjectUpdateteachStackInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ProjectUpdatetracksInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ProjectUpsertWithWhereUniqueWithoutFromInput = {
  create: ProjectCreateWithoutFromInput;
  update: ProjectUpdateWithoutFromInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpsertWithoutTeamInput = {
  create: ProjectCreateWithoutTeamInput;
  update: ProjectUpdateWithoutTeamInput;
  where?: InputMaybe<ProjectWhereInput>;
};

export type ProjectUpsertWithoutVersionsInput = {
  create: ProjectCreateWithoutVersionsInput;
  update: ProjectUpdateWithoutVersionsInput;
  where?: InputMaybe<ProjectWhereInput>;
};

export type ProjectVotingReward = {
  __typename?: 'ProjectVotingReward';
  canVote?: Maybe<Scalars['Boolean']['output']>;
  disableJudge?: Maybe<Scalars['Boolean']['output']>;
  hackathonImage?: Maybe<Scalars['String']['output']>;
  hackathonName?: Maybe<Scalars['String']['output']>;
  hackathonStatus?: Maybe<Array<HackathonJoinState>>;
  id?: Maybe<Scalars['Float']['output']>;
  judgeMode?: Maybe<Scalars['String']['output']>;
  myVotes?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  rank?: Maybe<Rank>;
  remainingVotes?: Maybe<Scalars['Float']['output']>;
  voteMode?: Maybe<Scalars['String']['output']>;
  votes?: Maybe<Scalars['Float']['output']>;
};

export type ProjectWhereInput = {
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  ProjectLikes?: InputMaybe<ProjectLikesListRelationFilter>;
  addition?: InputMaybe<ProjectAdditionNullableRelationFilter>;
  alias?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  deletedAt?: InputMaybe<DateTimeNullableFilter>;
  demoVideo?: InputMaybe<StringNullableFilter>;
  detail?: InputMaybe<ProjectDetailNullableRelationFilter>;
  ecology?: InputMaybe<StringNullableListFilter>;
  fields?: InputMaybe<JsonFilter>;
  from?: InputMaybe<ProjectNullableRelationFilter>;
  fromId?: InputMaybe<UuidNullableFilter>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  hackathonName?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  invalid?: InputMaybe<BoolFilter>;
  invalidReason?: InputMaybe<StringNullableFilter>;
  isSubmit?: InputMaybe<BoolFilter>;
  likes?: InputMaybe<IntFilter>;
  location?: InputMaybe<StringNullableFilter>;
  lock?: InputMaybe<BoolFilter>;
  logo?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringFilter>;
  pitchVideo?: InputMaybe<StringNullableFilter>;
  prizeTrack?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  teachStack?: InputMaybe<StringNullableListFilter>;
  team?: InputMaybe<HackathonTeamNullableRelationFilter>;
  teamId?: InputMaybe<UuidNullableFilter>;
  tracks?: InputMaybe<StringNullableListFilter>;
  type?: InputMaybe<EnumProjectTypeNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  versionName?: InputMaybe<StringNullableFilter>;
  versions?: InputMaybe<ProjectListRelationFilter>;
  vote?: InputMaybe<IntFilter>;
  wallet?: InputMaybe<StringNullableFilter>;
  winner?: InputMaybe<HackathonWinnerListRelationFilter>;
};

export type ProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  ProjectLikes?: InputMaybe<ProjectLikesListRelationFilter>;
  addition?: InputMaybe<ProjectAdditionNullableRelationFilter>;
  alias?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<DateTimeFilter>;
  creatorId?: InputMaybe<UuidNullableFilter>;
  deletedAt?: InputMaybe<DateTimeNullableFilter>;
  demoVideo?: InputMaybe<StringNullableFilter>;
  detail?: InputMaybe<ProjectDetailNullableRelationFilter>;
  ecology?: InputMaybe<StringNullableListFilter>;
  fields?: InputMaybe<JsonFilter>;
  from?: InputMaybe<ProjectNullableRelationFilter>;
  fromId?: InputMaybe<UuidNullableFilter>;
  fromId_hackathonId?: InputMaybe<ProjectFromIdHackathonIdCompoundUniqueInput>;
  hackathonId?: InputMaybe<UuidNullableFilter>;
  hackathonName?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  invalid?: InputMaybe<BoolFilter>;
  invalidReason?: InputMaybe<StringNullableFilter>;
  isSubmit?: InputMaybe<BoolFilter>;
  likes?: InputMaybe<IntFilter>;
  location?: InputMaybe<StringNullableFilter>;
  lock?: InputMaybe<BoolFilter>;
  logo?: InputMaybe<StringNullableFilter>;
  name?: InputMaybe<StringFilter>;
  pitchVideo?: InputMaybe<StringNullableFilter>;
  prizeTrack?: InputMaybe<StringNullableFilter>;
  progress?: InputMaybe<IntFilter>;
  status?: InputMaybe<StringFilter>;
  teachStack?: InputMaybe<StringNullableListFilter>;
  team?: InputMaybe<HackathonTeamNullableRelationFilter>;
  teamId?: InputMaybe<UuidNullableFilter>;
  tracks?: InputMaybe<StringNullableListFilter>;
  type?: InputMaybe<EnumProjectTypeNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  versionName?: InputMaybe<StringNullableFilter>;
  versions?: InputMaybe<ProjectListRelationFilter>;
  vote?: InputMaybe<IntFilter>;
  wallet?: InputMaybe<StringNullableFilter>;
  winner?: InputMaybe<HackathonWinnerListRelationFilter>;
};

export type PublishedJobCount = {
  __typename?: 'PublishedJobCount';
  open: Scalars['Int']['output'];
  total: Scalars['Int']['output'];
};

export type Query = {
  __typename?: 'Query';
  aggregateBlog: AggregateBlog;
  aggregateCertification: AggregateCertification;
  aggregateCourseEcosystem: AggregateCourseEcosystem;
  aggregateCourseLearningTrack: AggregateCourseLearningTrack;
  aggregateCustomKeyword: AggregateCustomKeyword;
  aggregateDailyChallenge: AggregateDailyChallenge;
  aggregateDocs: AggregateDocs;
  aggregateDocumentation: AggregateDocumentation;
  aggregateEvents: AggregateEvents;
  aggregateFaucet: AggregateFaucet;
  aggregateGlossary: AggregateGlossary;
  aggregateIdeaBank: AggregateIdeaBank;
  aggregateJobStation: AggregateJobStation;
  aggregateJobTag: AggregateJobTag;
  aggregateLearningTrack: AggregateLearningTrack;
  aggregateNotification: AggregateNotification;
  aggregatePageView: AggregatePageView;
  aggregatePartnerShip: AggregatePartnerShip;
  aggregateProgress: AggregateProgressV2;
  aggregateThirdUser: AggregateThirdUser;
  aggregateTreasure: AggregateTreasure;
  aggregateUnit: AggregateUnitV2;
  aggregateUser: AggregateUser;
  aggregateUserClaimFaucetRecord: AggregateUserClaimFaucetRecord;
  certificateProgress?: Maybe<CertificationProgress>;
  findActiveEcosystem?: Maybe<Scalars['String']['output']>;
  findCourseDetail: CourseExtend;
  /** 获取 hackathon management Distribution */
  findDistribution?: Maybe<OrganizerDistribution>;
  /** 获取 hackathon management Distribution Growth */
  findDistributionGrouth?: Maybe<Array<HackathonUtmExtend>>;
  findFirstAttestation: Attestation;
  findFirstBlog: Blog;
  findFirstCertification: Certification;
  findFirstCourse: CourseV2;
  findFirstCourseEcosystem: CourseEcosystem;
  findFirstCourseLearningTrack: CourseLearningTrack;
  findFirstCustomKeyword: CustomKeyword;
  findFirstDailyChallenge: DailyChallenge;
  findFirstDocs: Docs;
  findFirstDocumentation: Documentation;
  findFirstEcosystem: Ecosystem;
  findFirstEcosystemInfo?: Maybe<EcosystemInfoExtend>;
  findFirstEvents: Events;
  findFirstFaucet: Faucet;
  findFirstGlossary: Glossary;
  /** 查询Hackathon详情 */
  findFirstHackathon?: Maybe<HackathonExtend>;
  findFirstIdeaBank: IdeaBank;
  findFirstJobStation: JobStation;
  findFirstJobTag: JobTag;
  findFirstLearningTrack: LearningTrack;
  findFirstNotification: Notification;
  findFirstPage: PageV2;
  findFirstPageView: PageView;
  findFirstPartnerShip: PartnerShip;
  findFirstProgress: ProgressV2;
  findFirstProject?: Maybe<ProjectExtend>;
  findFirstThirdUser: ThirdUser;
  findFirstTreasure: Treasure;
  findFirstUnit: UnitV2;
  findFirstUser: User;
  findFirstUserClaimFaucetRecord: UserClaimFaucetRecord;
  findFirstUserProfile: UserProfile;
  findHackathonJudgeDetailByUser?: Maybe<HackathonJudgeVote>;
  /** 查询hackathon的rewards信息，包含每个reward下的projects */
  findHackathonReward?: Maybe<Array<HackathonRewardsExtend>>;
  findHackathonWinner: Array<HackathonWinnerExtend>;
  /** 获取模板 */
  findListTemplate?: Maybe<FindListTemplate>;
  /** 查询 organizer 中 hackathon 增长相关信息 */
  findOrganizerHackathonIncrecementInfo?: Maybe<OrganizerHackathonIncrecementInfo>;
  findPublishedJobCount: PublishedJobCount;
  /** 获取Receivers人数 */
  findReceivers?: Maybe<Array<Receivers>>;
  findTracks?: Maybe<Array<Scalars['String']['output']>>;
  findUniqueAttestation: Attestation;
  findUniqueBlog: Blog;
  findUniqueCertification: Certification;
  findUniqueCoLearning: CoLearning;
  findUniqueCoLearningTimeline: CoLearningTimeline;
  findUniqueCourse: CourseV2;
  findUniqueCourseEcosystem: CourseEcosystem;
  findUniqueCourseLearningTrack: CourseLearningTrack;
  findUniqueCustomKeyword: CustomKeyword;
  findUniqueDailyChallenge: DailyChallenge;
  findUniqueDocs: Docs;
  findUniqueDocumentation: Documentation;
  findUniqueEcosystem: Ecosystem;
  findUniqueEcosystemInfo?: Maybe<EcosystemInfoExtend>;
  findUniqueEvents: Events;
  findUniqueFaucet: Faucet;
  findUniqueGlossary: Glossary;
  /** 通过唯一键查询Hackathon详情 */
  findUniqueHackathon?: Maybe<HackathonExtend>;
  findUniqueIdeaBank: IdeaBank;
  findUniqueJobStation: JobStation;
  findUniqueJobTag: JobTag;
  findUniqueLearningTrack: LearningTrack;
  findUniqueNotification: Notification;
  findUniquePage: PageV2;
  findUniquePageView: PageView;
  findUniquePartnerShip: PartnerShip;
  findUniqueProgress: ProgressV2;
  findUniqueProject?: Maybe<ProjectExtend>;
  findUniqueThirdUser: ThirdUser;
  findUniqueTreasure: Treasure;
  findUniqueUnit: UnitV2;
  findUniqueUser: User;
  findUniqueUserClaimFaucetRecord: UserClaimFaucetRecord;
  findUniqueUserProfile: UserProfile;
  findUserCertification: UserCertificationExtend;
  findUserProfileByUsername: UserProfileExtend;
  getHackathonRegisterInfo?: Maybe<HackathonMemberExtend>;
  getHistories: Langchain_Chat_Histories;
  getUserInfo?: Maybe<User>;
  getUserJudgeCount?: Maybe<Scalars['Int']['output']>;
  getUserToken?: Maybe<Array<LoginData>>;
  globalSearch: GlobalSearchResponse;
  groupByBlog: Array<BlogGroupBy>;
  groupByCertification: Array<CertificationGroupBy>;
  groupByCourseEcosystem: Array<CourseEcosystemGroupBy>;
  groupByCourseLearningTrack: Array<CourseLearningTrackGroupBy>;
  groupByCustomKeyword: Array<CustomKeywordGroupBy>;
  groupByDailyChallenge: Array<DailyChallengeGroupBy>;
  groupByDocs: Array<DocsGroupBy>;
  groupByDocumentation: Array<DocumentationGroupBy>;
  groupByEvents: Array<EventsGroupBy>;
  groupByFaucet: Array<FaucetGroupBy>;
  groupByGlossary: Array<GlossaryGroupBy>;
  groupByIdeaBank: Array<IdeaBankGroupBy>;
  groupByJobStation: Array<JobStationGroupBy>;
  groupByJobTag: Array<JobTagGroupBy>;
  groupByLearningTrack: Array<LearningTrackGroupBy>;
  groupByNotification: Array<NotificationGroupBy>;
  groupByPageView: Array<PageViewGroupBy>;
  groupByPartnerShip: Array<PartnerShipGroupBy>;
  groupByProgress: Array<ProgressV2GroupBy>;
  groupByThirdUser: Array<ThirdUserGroupBy>;
  groupByTreasure: Array<TreasureGroupBy>;
  groupByUnit: Array<UnitV2GroupBy>;
  groupByUser: Array<UserGroupBy>;
  groupByUserClaimFaucetRecord: Array<UserClaimFaucetRecordGroupBy>;
  highlightBuilder: Array<HackathonMemberExtend>;
  highlightProject?: Maybe<Array<ProjectExtend>>;
  listActiveEcosystemInfos: Array<EcosystemInfo>;
  listBlogs: BlogListPaginated;
  listCertifications: CertificationListPaginated;
  listCoLearning: CoLearningListPaginated;
  listCoLearningEvent: CoLearningEventListPaginated;
  listCoLearningMember: CoLearningMemberListPaginated;
  listCoLearningTodo: CoLearningTodoListPaginated;
  listCourseEcosystems: CourseEcosystemListPaginated;
  listCourseLearningTracks: CourseLearningTrackListPaginated;
  listCourses: CourseListPaginated;
  listCustomKeywords: CustomKeywordListPaginated;
  listDailyChallenges: DailyChallengeListPaginated;
  listDocss: DocsListPaginated;
  listDocumentations: DocumentationListPaginated;
  listEcosystemInfos: EcosystemInfoListPaginated;
  listEcosystems: EcosystemListPaginated;
  listEvents: EventsListPaginated;
  listFaucets: FaucetListPaginated;
  listFaucetsClaimRecordByChainId: UserClaimFaucetRecordListPaginated;
  listGlossarys: GlossaryListPaginated;
  listGlossarysTracks: Array<Maybe<Scalars['String']['output']>>;
  /** 获取HackathonAnnouncement */
  listHackathonAnnouncement?: Maybe<Array<HackathonAnnouncement>>;
  /** 查询Hackathon列表 */
  listHackathons: HackathonListPaginated;
  /** 查询 creator hackathon list */
  listHackathonsByOrganizer: HackathonListPaginated;
  /** 查询我的Hackathon列表 */
  listHackathonsBySelf: HackathonListPaginated;
  listIdeaBanks: IdeaBankListPaginated;
  listJobStations: JobStationListPaginated;
  listJobStationsFavorite: JobStationListPaginated;
  listJobTags: JobTagListPaginated;
  listLearningTracks: LearningTrackListPaginated;
  listNotifications: NotificationListPaginated;
  /** 获取 hackathon member */
  listOrganizerApplication: HackathonMemberExtendListPaginated;
  /** 获取 hackathon management Distribution UTM Sources */
  listOrganizerDistributionUTMSources?: Maybe<Array<HackathonUtmExtend>>;
  /** 获取Organizer中Judge中reward 以及 judgeInfo */
  listOrganizerJudge?: Maybe<OrganizerHackathonJudgePaginated>;
  /** 获取judge中project的info */
  listOrganizerJudgeProject?: Maybe<JudgeProjectInfoList>;
  /** 获取 submission 中的 project */
  listOrganizerSubmissionProject?: Maybe<ProjectListPaginated>;
  listPageViews: PageViewListPaginated;
  listPages: PageListPaginated;
  listPartnerShips: PartnerShipListPaginated;
  listProgresss: ProgressListPaginated;
  listProjects: ProjectListPaginated;
  /** 我的项目 */
  listProjectsBySelf: ProjectListPaginated;
  listThirdUsers: ThirdUserListPaginated;
  listTreasures: TreasureListPaginated;
  listUnits: UnitListPaginated;
  listUserAttestations: Array<AttestationWithCreator>;
  listUserClaimFaucetRecords: UserClaimFaucetRecordListPaginated;
  listUsers: Array<User>;
  listValidateProjects?: Maybe<Array<ValidateProject>>;
  missions: Array<Mission>;
  sendMessage: ChatBotResponse;
  twitterTest: Scalars['String']['output'];
};


export type QueryAggregateBlogArgs = {
  _avg?: InputMaybe<BlogAvgAggregateInput>;
  _count?: InputMaybe<BlogCountAggregateInput>;
  _max?: InputMaybe<BlogMaxAggregateInput>;
  _min?: InputMaybe<BlogMinAggregateInput>;
  _sum?: InputMaybe<BlogSumAggregateInput>;
  cursor?: InputMaybe<BlogWhereUniqueInput>;
  orderBy?: InputMaybe<Array<BlogOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogWhereInput>;
};


export type QueryAggregateCertificationArgs = {
  _avg?: InputMaybe<CertificationAvgAggregateInput>;
  _count?: InputMaybe<CertificationCountAggregateInput>;
  _max?: InputMaybe<CertificationMaxAggregateInput>;
  _min?: InputMaybe<CertificationMinAggregateInput>;
  _sum?: InputMaybe<CertificationSumAggregateInput>;
  cursor?: InputMaybe<CertificationWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CertificationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CertificationWhereInput>;
};


export type QueryAggregateCourseEcosystemArgs = {
  _avg?: InputMaybe<CourseEcosystemAvgAggregateInput>;
  _count?: InputMaybe<CourseEcosystemCountAggregateInput>;
  _max?: InputMaybe<CourseEcosystemMaxAggregateInput>;
  _min?: InputMaybe<CourseEcosystemMinAggregateInput>;
  _sum?: InputMaybe<CourseEcosystemSumAggregateInput>;
  cursor?: InputMaybe<CourseEcosystemWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CourseEcosystemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseEcosystemWhereInput>;
};


export type QueryAggregateCourseLearningTrackArgs = {
  _avg?: InputMaybe<CourseLearningTrackAvgAggregateInput>;
  _count?: InputMaybe<CourseLearningTrackCountAggregateInput>;
  _max?: InputMaybe<CourseLearningTrackMaxAggregateInput>;
  _min?: InputMaybe<CourseLearningTrackMinAggregateInput>;
  _sum?: InputMaybe<CourseLearningTrackSumAggregateInput>;
  cursor?: InputMaybe<CourseLearningTrackWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CourseLearningTrackOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseLearningTrackWhereInput>;
};


export type QueryAggregateCustomKeywordArgs = {
  _avg?: InputMaybe<CustomKeywordAvgAggregateInput>;
  _count?: InputMaybe<CustomKeywordCountAggregateInput>;
  _max?: InputMaybe<CustomKeywordMaxAggregateInput>;
  _min?: InputMaybe<CustomKeywordMinAggregateInput>;
  _sum?: InputMaybe<CustomKeywordSumAggregateInput>;
  cursor?: InputMaybe<CustomKeywordWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CustomKeywordOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CustomKeywordWhereInput>;
};


export type QueryAggregateDailyChallengeArgs = {
  _count?: InputMaybe<DailyChallengeCountAggregateInput>;
  _max?: InputMaybe<DailyChallengeMaxAggregateInput>;
  _min?: InputMaybe<DailyChallengeMinAggregateInput>;
  cursor?: InputMaybe<DailyChallengeWhereUniqueInput>;
  orderBy?: InputMaybe<Array<DailyChallengeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DailyChallengeWhereInput>;
};


export type QueryAggregateDocsArgs = {
  _count?: InputMaybe<DocsCountAggregateInput>;
  _max?: InputMaybe<DocsMaxAggregateInput>;
  _min?: InputMaybe<DocsMinAggregateInput>;
  cursor?: InputMaybe<DocsWhereUniqueInput>;
  orderBy?: InputMaybe<Array<DocsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsWhereInput>;
};


export type QueryAggregateDocumentationArgs = {
  _count?: InputMaybe<DocumentationCountAggregateInput>;
  _max?: InputMaybe<DocumentationMaxAggregateInput>;
  _min?: InputMaybe<DocumentationMinAggregateInput>;
  cursor?: InputMaybe<DocumentationWhereUniqueInput>;
  orderBy?: InputMaybe<Array<DocumentationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentationWhereInput>;
};


export type QueryAggregateEventsArgs = {
  _count?: InputMaybe<EventsCountAggregateInput>;
  _max?: InputMaybe<EventsMaxAggregateInput>;
  _min?: InputMaybe<EventsMinAggregateInput>;
  cursor?: InputMaybe<EventsWhereUniqueInput>;
  orderBy?: InputMaybe<Array<EventsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventsWhereInput>;
};


export type QueryAggregateFaucetArgs = {
  _avg?: InputMaybe<FaucetAvgAggregateInput>;
  _count?: InputMaybe<FaucetCountAggregateInput>;
  _max?: InputMaybe<FaucetMaxAggregateInput>;
  _min?: InputMaybe<FaucetMinAggregateInput>;
  _sum?: InputMaybe<FaucetSumAggregateInput>;
  cursor?: InputMaybe<FaucetWhereUniqueInput>;
  orderBy?: InputMaybe<Array<FaucetOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FaucetWhereInput>;
};


export type QueryAggregateGlossaryArgs = {
  _avg?: InputMaybe<GlossaryAvgAggregateInput>;
  _count?: InputMaybe<GlossaryCountAggregateInput>;
  _max?: InputMaybe<GlossaryMaxAggregateInput>;
  _min?: InputMaybe<GlossaryMinAggregateInput>;
  _sum?: InputMaybe<GlossarySumAggregateInput>;
  cursor?: InputMaybe<GlossaryWhereUniqueInput>;
  orderBy?: InputMaybe<Array<GlossaryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GlossaryWhereInput>;
};


export type QueryAggregateIdeaBankArgs = {
  _avg?: InputMaybe<IdeaBankAvgAggregateInput>;
  _count?: InputMaybe<IdeaBankCountAggregateInput>;
  _max?: InputMaybe<IdeaBankMaxAggregateInput>;
  _min?: InputMaybe<IdeaBankMinAggregateInput>;
  _sum?: InputMaybe<IdeaBankSumAggregateInput>;
  cursor?: InputMaybe<IdeaBankWhereUniqueInput>;
  orderBy?: InputMaybe<Array<IdeaBankOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IdeaBankWhereInput>;
};


export type QueryAggregateJobStationArgs = {
  _avg?: InputMaybe<JobStationAvgAggregateInput>;
  _count?: InputMaybe<JobStationCountAggregateInput>;
  _max?: InputMaybe<JobStationMaxAggregateInput>;
  _min?: InputMaybe<JobStationMinAggregateInput>;
  _sum?: InputMaybe<JobStationSumAggregateInput>;
  cursor?: InputMaybe<JobStationWhereUniqueInput>;
  orderBy?: InputMaybe<Array<JobStationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobStationWhereInput>;
};


export type QueryAggregateJobTagArgs = {
  _avg?: InputMaybe<JobTagAvgAggregateInput>;
  _count?: InputMaybe<JobTagCountAggregateInput>;
  _max?: InputMaybe<JobTagMaxAggregateInput>;
  _min?: InputMaybe<JobTagMinAggregateInput>;
  _sum?: InputMaybe<JobTagSumAggregateInput>;
  cursor?: InputMaybe<JobTagWhereUniqueInput>;
  orderBy?: InputMaybe<Array<JobTagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobTagWhereInput>;
};


export type QueryAggregateLearningTrackArgs = {
  _count?: InputMaybe<LearningTrackCountAggregateInput>;
  _max?: InputMaybe<LearningTrackMaxAggregateInput>;
  _min?: InputMaybe<LearningTrackMinAggregateInput>;
  cursor?: InputMaybe<LearningTrackWhereUniqueInput>;
  orderBy?: InputMaybe<Array<LearningTrackOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LearningTrackWhereInput>;
};


export type QueryAggregateNotificationArgs = {
  _count?: InputMaybe<NotificationCountAggregateInput>;
  _max?: InputMaybe<NotificationMaxAggregateInput>;
  _min?: InputMaybe<NotificationMinAggregateInput>;
  cursor?: InputMaybe<NotificationWhereUniqueInput>;
  orderBy?: InputMaybe<Array<NotificationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryAggregatePageViewArgs = {
  _avg?: InputMaybe<PageViewAvgAggregateInput>;
  _count?: InputMaybe<PageViewCountAggregateInput>;
  _max?: InputMaybe<PageViewMaxAggregateInput>;
  _min?: InputMaybe<PageViewMinAggregateInput>;
  _sum?: InputMaybe<PageViewSumAggregateInput>;
  cursor?: InputMaybe<PageViewWhereUniqueInput>;
  orderBy?: InputMaybe<Array<PageViewOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageViewWhereInput>;
};


export type QueryAggregatePartnerShipArgs = {
  _avg?: InputMaybe<PartnerShipAvgAggregateInput>;
  _count?: InputMaybe<PartnerShipCountAggregateInput>;
  _max?: InputMaybe<PartnerShipMaxAggregateInput>;
  _min?: InputMaybe<PartnerShipMinAggregateInput>;
  _sum?: InputMaybe<PartnerShipSumAggregateInput>;
  cursor?: InputMaybe<PartnerShipWhereUniqueInput>;
  orderBy?: InputMaybe<Array<PartnerShipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PartnerShipWhereInput>;
};


export type QueryAggregateProgressArgs = {
  _avg?: InputMaybe<ProgressV2AvgAggregateInput>;
  _count?: InputMaybe<ProgressV2CountAggregateInput>;
  _max?: InputMaybe<ProgressV2MaxAggregateInput>;
  _min?: InputMaybe<ProgressV2MinAggregateInput>;
  _sum?: InputMaybe<ProgressV2SumAggregateInput>;
  cursor?: InputMaybe<ProgressV2WhereUniqueInput>;
  orderBy?: InputMaybe<Array<ProgressV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProgressV2WhereInput>;
};


export type QueryAggregateThirdUserArgs = {
  _count?: InputMaybe<ThirdUserCountAggregateInput>;
  _max?: InputMaybe<ThirdUserMaxAggregateInput>;
  _min?: InputMaybe<ThirdUserMinAggregateInput>;
  cursor?: InputMaybe<ThirdUserWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ThirdUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThirdUserWhereInput>;
};


export type QueryAggregateTreasureArgs = {
  _avg?: InputMaybe<TreasureAvgAggregateInput>;
  _count?: InputMaybe<TreasureCountAggregateInput>;
  _max?: InputMaybe<TreasureMaxAggregateInput>;
  _min?: InputMaybe<TreasureMinAggregateInput>;
  _sum?: InputMaybe<TreasureSumAggregateInput>;
  cursor?: InputMaybe<TreasureWhereUniqueInput>;
  orderBy?: InputMaybe<Array<TreasureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TreasureWhereInput>;
};


export type QueryAggregateUnitArgs = {
  _avg?: InputMaybe<UnitV2AvgAggregateInput>;
  _count?: InputMaybe<UnitV2CountAggregateInput>;
  _max?: InputMaybe<UnitV2MaxAggregateInput>;
  _min?: InputMaybe<UnitV2MinAggregateInput>;
  _sum?: InputMaybe<UnitV2SumAggregateInput>;
  cursor?: InputMaybe<UnitV2WhereUniqueInput>;
  orderBy?: InputMaybe<Array<UnitV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UnitV2WhereInput>;
};


export type QueryAggregateUserArgs = {
  _avg?: InputMaybe<UserAvgAggregateInput>;
  _count?: InputMaybe<UserCountAggregateInput>;
  _max?: InputMaybe<UserMaxAggregateInput>;
  _min?: InputMaybe<UserMinAggregateInput>;
  _sum?: InputMaybe<UserSumAggregateInput>;
  cursor?: InputMaybe<UserWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryAggregateUserClaimFaucetRecordArgs = {
  _avg?: InputMaybe<UserClaimFaucetRecordAvgAggregateInput>;
  _count?: InputMaybe<UserClaimFaucetRecordCountAggregateInput>;
  _max?: InputMaybe<UserClaimFaucetRecordMaxAggregateInput>;
  _min?: InputMaybe<UserClaimFaucetRecordMinAggregateInput>;
  _sum?: InputMaybe<UserClaimFaucetRecordSumAggregateInput>;
  cursor?: InputMaybe<UserClaimFaucetRecordWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserClaimFaucetRecordOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserClaimFaucetRecordWhereInput>;
};


export type QueryCertificateProgressArgs = {
  where: EcosystemInfoWhereUniqueInput;
};


export type QueryFindCourseDetailArgs = {
  cursor?: InputMaybe<CourseV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseV2ScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CourseV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseV2WhereInput>;
};


export type QueryFindDistributionArgs = {
  id: Scalars['String']['input'];
};


export type QueryFindDistributionGrouthArgs = {
  growthFilter?: InputMaybe<GrowthFilter>;
  growthType?: InputMaybe<GrowthType>;
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFindFirstAttestationArgs = {
  cursor?: InputMaybe<AttestationWhereUniqueInput>;
  distinct?: InputMaybe<Array<AttestationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<AttestationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AttestationWhereInput>;
};


export type QueryFindFirstBlogArgs = {
  cursor?: InputMaybe<BlogWhereUniqueInput>;
  distinct?: InputMaybe<Array<BlogScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BlogOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogWhereInput>;
};


export type QueryFindFirstCertificationArgs = {
  cursor?: InputMaybe<CertificationWhereUniqueInput>;
  distinct?: InputMaybe<Array<CertificationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CertificationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CertificationWhereInput>;
};


export type QueryFindFirstCourseArgs = {
  cursor?: InputMaybe<CourseV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseV2ScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CourseV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseV2WhereInput>;
};


export type QueryFindFirstCourseEcosystemArgs = {
  cursor?: InputMaybe<CourseEcosystemWhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseEcosystemScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CourseEcosystemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseEcosystemWhereInput>;
};


export type QueryFindFirstCourseLearningTrackArgs = {
  cursor?: InputMaybe<CourseLearningTrackWhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseLearningTrackScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CourseLearningTrackOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseLearningTrackWhereInput>;
};


export type QueryFindFirstCustomKeywordArgs = {
  cursor?: InputMaybe<CustomKeywordWhereUniqueInput>;
  distinct?: InputMaybe<Array<CustomKeywordScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CustomKeywordOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CustomKeywordWhereInput>;
};


export type QueryFindFirstDailyChallengeArgs = {
  cursor?: InputMaybe<DailyChallengeWhereUniqueInput>;
  distinct?: InputMaybe<Array<DailyChallengeScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<DailyChallengeOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DailyChallengeWhereInput>;
};


export type QueryFindFirstDocsArgs = {
  cursor?: InputMaybe<DocsWhereUniqueInput>;
  distinct?: InputMaybe<Array<DocsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<DocsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsWhereInput>;
};


export type QueryFindFirstDocumentationArgs = {
  cursor?: InputMaybe<DocumentationWhereUniqueInput>;
  distinct?: InputMaybe<Array<DocumentationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<DocumentationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentationWhereInput>;
};


export type QueryFindFirstEcosystemArgs = {
  cursor?: InputMaybe<EcosystemWhereUniqueInput>;
  distinct?: InputMaybe<Array<EcosystemScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<EcosystemOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EcosystemWhereInput>;
};


export type QueryFindFirstEcosystemInfoArgs = {
  cursor?: InputMaybe<EcosystemInfoWhereUniqueInput>;
  distinct?: InputMaybe<Array<EcosystemInfoScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<EcosystemInfoOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EcosystemInfoWhereInput>;
};


export type QueryFindFirstEventsArgs = {
  cursor?: InputMaybe<EventsWhereUniqueInput>;
  distinct?: InputMaybe<Array<EventsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<EventsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventsWhereInput>;
};


export type QueryFindFirstFaucetArgs = {
  cursor?: InputMaybe<FaucetWhereUniqueInput>;
  distinct?: InputMaybe<Array<FaucetScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FaucetOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FaucetWhereInput>;
};


export type QueryFindFirstGlossaryArgs = {
  cursor?: InputMaybe<GlossaryWhereUniqueInput>;
  distinct?: InputMaybe<Array<GlossaryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GlossaryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GlossaryWhereInput>;
};


export type QueryFindFirstHackathonArgs = {
  cursor?: InputMaybe<HackathonWhereUniqueInput>;
  distinct?: InputMaybe<Array<HackathonScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HackathonOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HackathonWhereInput>;
};


export type QueryFindFirstIdeaBankArgs = {
  cursor?: InputMaybe<IdeaBankWhereUniqueInput>;
  distinct?: InputMaybe<Array<IdeaBankScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<IdeaBankOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IdeaBankWhereInput>;
};


export type QueryFindFirstJobStationArgs = {
  cursor?: InputMaybe<JobStationWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobStationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<JobStationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobStationWhereInput>;
};


export type QueryFindFirstJobTagArgs = {
  cursor?: InputMaybe<JobTagWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobTagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<JobTagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobTagWhereInput>;
};


export type QueryFindFirstLearningTrackArgs = {
  cursor?: InputMaybe<LearningTrackWhereUniqueInput>;
  distinct?: InputMaybe<Array<LearningTrackScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<LearningTrackOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LearningTrackWhereInput>;
};


export type QueryFindFirstNotificationArgs = {
  cursor?: InputMaybe<NotificationWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotificationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<NotificationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryFindFirstPageArgs = {
  cursor?: InputMaybe<PageV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<PageV2ScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PageV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageV2WhereInput>;
};


export type QueryFindFirstPageViewArgs = {
  cursor?: InputMaybe<PageViewWhereUniqueInput>;
  distinct?: InputMaybe<Array<PageViewScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PageViewOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageViewWhereInput>;
};


export type QueryFindFirstPartnerShipArgs = {
  cursor?: InputMaybe<PartnerShipWhereUniqueInput>;
  distinct?: InputMaybe<Array<PartnerShipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PartnerShipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PartnerShipWhereInput>;
};


export type QueryFindFirstProgressArgs = {
  cursor?: InputMaybe<ProgressV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<ProgressV2ScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProgressV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProgressV2WhereInput>;
};


export type QueryFindFirstProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryFindFirstThirdUserArgs = {
  cursor?: InputMaybe<ThirdUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<ThirdUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ThirdUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThirdUserWhereInput>;
};


export type QueryFindFirstTreasureArgs = {
  cursor?: InputMaybe<TreasureWhereUniqueInput>;
  distinct?: InputMaybe<Array<TreasureScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TreasureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TreasureWhereInput>;
};


export type QueryFindFirstUnitArgs = {
  cursor?: InputMaybe<UnitV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<UnitV2ScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UnitV2OrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UnitV2WhereInput>;
};


export type QueryFindFirstUserArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryFindFirstUserClaimFaucetRecordArgs = {
  cursor?: InputMaybe<UserClaimFaucetRecordWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserClaimFaucetRecordScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserClaimFaucetRecordOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserClaimFaucetRecordWhereInput>;
};


export type QueryFindFirstUserProfileArgs = {
  cursor?: InputMaybe<UserProfileWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserProfileScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserProfileOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserProfileWhereInput>;
};


export type QueryFindHackathonRewardArgs = {
  hackathonId: Scalars['String']['input'];
};


export type QueryFindHackathonWinnerArgs = {
  id: Scalars['String']['input'];
  prizeTrack: Scalars['String']['input'];
};


export type QueryFindListTemplateArgs = {
  id: Scalars['String']['input'];
  mode: ModeEnum;
};


export type QueryFindOrganizerHackathonIncrecementInfoArgs = {
  id: Scalars['String']['input'];
};


export type QueryFindReceiversArgs = {
  id: Scalars['String']['input'];
};


export type QueryFindUniqueAttestationArgs = {
  where: AttestationWhereUniqueInput;
};


export type QueryFindUniqueBlogArgs = {
  where: BlogWhereUniqueInput;
};


export type QueryFindUniqueCertificationArgs = {
  where: CertificationWhereUniqueInput;
};


export type QueryFindUniqueCoLearningArgs = {
  where: CoLearningWhereUniqueInput;
};


export type QueryFindUniqueCoLearningTimelineArgs = {
  where: CoLearningTimelineWhereUniqueInput;
};


export type QueryFindUniqueCourseArgs = {
  where: CourseV2WhereUniqueInput;
};


export type QueryFindUniqueCourseEcosystemArgs = {
  where: CourseEcosystemWhereUniqueInput;
};


export type QueryFindUniqueCourseLearningTrackArgs = {
  where: CourseLearningTrackWhereUniqueInput;
};


export type QueryFindUniqueCustomKeywordArgs = {
  where: CustomKeywordWhereUniqueInput;
};


export type QueryFindUniqueDailyChallengeArgs = {
  where: DailyChallengeWhereUniqueInput;
};


export type QueryFindUniqueDocsArgs = {
  where: DocsWhereUniqueInput;
};


export type QueryFindUniqueDocumentationArgs = {
  where: DocumentationWhereUniqueInput;
};


export type QueryFindUniqueEcosystemArgs = {
  where: EcosystemWhereUniqueInput;
};


export type QueryFindUniqueEcosystemInfoArgs = {
  where: EcosystemInfoWhereUniqueInput;
};


export type QueryFindUniqueEventsArgs = {
  where: EventsWhereUniqueInput;
};


export type QueryFindUniqueFaucetArgs = {
  where: FaucetWhereUniqueInput;
};


export type QueryFindUniqueGlossaryArgs = {
  where: GlossaryWhereUniqueInput;
};


export type QueryFindUniqueHackathonArgs = {
  where: HackathonWhereUniqueInput;
};


export type QueryFindUniqueIdeaBankArgs = {
  where: IdeaBankWhereUniqueInput;
};


export type QueryFindUniqueJobStationArgs = {
  where: JobStationWhereUniqueInput;
};


export type QueryFindUniqueJobTagArgs = {
  where: JobTagWhereUniqueInput;
};


export type QueryFindUniqueLearningTrackArgs = {
  where: LearningTrackWhereUniqueInput;
};


export type QueryFindUniqueNotificationArgs = {
  where: NotificationWhereUniqueInput;
};


export type QueryFindUniquePageArgs = {
  where: PageV2WhereUniqueInput;
};


export type QueryFindUniquePageViewArgs = {
  where: PageViewWhereUniqueInput;
};


export type QueryFindUniquePartnerShipArgs = {
  where: PartnerShipWhereUniqueInput;
};


export type QueryFindUniqueProgressArgs = {
  where: ProgressV2WhereUniqueInput;
};


export type QueryFindUniqueProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type QueryFindUniqueThirdUserArgs = {
  where: ThirdUserWhereUniqueInput;
};


export type QueryFindUniqueTreasureArgs = {
  where: TreasureWhereUniqueInput;
};


export type QueryFindUniqueUnitArgs = {
  where: UnitV2WhereUniqueInput;
};


export type QueryFindUniqueUserArgs = {
  email: Scalars['String']['input'];
  where: UserWhereUniqueInput;
};


export type QueryFindUniqueUserClaimFaucetRecordArgs = {
  where: UserClaimFaucetRecordWhereUniqueInput;
};


export type QueryFindUniqueUserProfileArgs = {
  where: UserProfileWhereUniqueInput;
};


export type QueryFindUserCertificationArgs = {
  certificateId: Scalars['Float']['input'];
};


export type QueryFindUserProfileByUsernameArgs = {
  username: Scalars['String']['input'];
};


export type QueryGetHackathonRegisterInfoArgs = {
  hackathonId: Scalars['String']['input'];
};


export type QueryGetUserJudgeCountArgs = {
  userTags: Array<UserJudgeType>;
};


export type QueryGetUserTokenArgs = {
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  keyword?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGlobalSearchArgs = {
  keyword: Scalars['String']['input'];
};


export type QueryGroupByBlogArgs = {
  _avg?: InputMaybe<BlogAvgAggregateInput>;
  _count?: InputMaybe<BlogCountAggregateInput>;
  _max?: InputMaybe<BlogMaxAggregateInput>;
  _min?: InputMaybe<BlogMinAggregateInput>;
  _sum?: InputMaybe<BlogSumAggregateInput>;
  by: Array<BlogScalarFieldEnum>;
  having?: InputMaybe<BlogScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<BlogOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogWhereInput>;
};


export type QueryGroupByCertificationArgs = {
  _avg?: InputMaybe<CertificationAvgAggregateInput>;
  _count?: InputMaybe<CertificationCountAggregateInput>;
  _max?: InputMaybe<CertificationMaxAggregateInput>;
  _min?: InputMaybe<CertificationMinAggregateInput>;
  _sum?: InputMaybe<CertificationSumAggregateInput>;
  by: Array<CertificationScalarFieldEnum>;
  having?: InputMaybe<CertificationScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CertificationOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CertificationWhereInput>;
};


export type QueryGroupByCourseEcosystemArgs = {
  _avg?: InputMaybe<CourseEcosystemAvgAggregateInput>;
  _count?: InputMaybe<CourseEcosystemCountAggregateInput>;
  _max?: InputMaybe<CourseEcosystemMaxAggregateInput>;
  _min?: InputMaybe<CourseEcosystemMinAggregateInput>;
  _sum?: InputMaybe<CourseEcosystemSumAggregateInput>;
  by: Array<CourseEcosystemScalarFieldEnum>;
  having?: InputMaybe<CourseEcosystemScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CourseEcosystemOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseEcosystemWhereInput>;
};


export type QueryGroupByCourseLearningTrackArgs = {
  _avg?: InputMaybe<CourseLearningTrackAvgAggregateInput>;
  _count?: InputMaybe<CourseLearningTrackCountAggregateInput>;
  _max?: InputMaybe<CourseLearningTrackMaxAggregateInput>;
  _min?: InputMaybe<CourseLearningTrackMinAggregateInput>;
  _sum?: InputMaybe<CourseLearningTrackSumAggregateInput>;
  by: Array<CourseLearningTrackScalarFieldEnum>;
  having?: InputMaybe<CourseLearningTrackScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CourseLearningTrackOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseLearningTrackWhereInput>;
};


export type QueryGroupByCustomKeywordArgs = {
  _avg?: InputMaybe<CustomKeywordAvgAggregateInput>;
  _count?: InputMaybe<CustomKeywordCountAggregateInput>;
  _max?: InputMaybe<CustomKeywordMaxAggregateInput>;
  _min?: InputMaybe<CustomKeywordMinAggregateInput>;
  _sum?: InputMaybe<CustomKeywordSumAggregateInput>;
  by: Array<CustomKeywordScalarFieldEnum>;
  having?: InputMaybe<CustomKeywordScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CustomKeywordOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CustomKeywordWhereInput>;
};


export type QueryGroupByDailyChallengeArgs = {
  _count?: InputMaybe<DailyChallengeCountAggregateInput>;
  _max?: InputMaybe<DailyChallengeMaxAggregateInput>;
  _min?: InputMaybe<DailyChallengeMinAggregateInput>;
  by: Array<DailyChallengeScalarFieldEnum>;
  having?: InputMaybe<DailyChallengeScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<DailyChallengeOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DailyChallengeWhereInput>;
};


export type QueryGroupByDocsArgs = {
  _count?: InputMaybe<DocsCountAggregateInput>;
  _max?: InputMaybe<DocsMaxAggregateInput>;
  _min?: InputMaybe<DocsMinAggregateInput>;
  by: Array<DocsScalarFieldEnum>;
  having?: InputMaybe<DocsScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<DocsOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsWhereInput>;
};


export type QueryGroupByDocumentationArgs = {
  _count?: InputMaybe<DocumentationCountAggregateInput>;
  _max?: InputMaybe<DocumentationMaxAggregateInput>;
  _min?: InputMaybe<DocumentationMinAggregateInput>;
  by: Array<DocumentationScalarFieldEnum>;
  having?: InputMaybe<DocumentationScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<DocumentationOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentationWhereInput>;
};


export type QueryGroupByEventsArgs = {
  _count?: InputMaybe<EventsCountAggregateInput>;
  _max?: InputMaybe<EventsMaxAggregateInput>;
  _min?: InputMaybe<EventsMinAggregateInput>;
  by: Array<EventsScalarFieldEnum>;
  having?: InputMaybe<EventsScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<EventsOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventsWhereInput>;
};


export type QueryGroupByFaucetArgs = {
  _avg?: InputMaybe<FaucetAvgAggregateInput>;
  _count?: InputMaybe<FaucetCountAggregateInput>;
  _max?: InputMaybe<FaucetMaxAggregateInput>;
  _min?: InputMaybe<FaucetMinAggregateInput>;
  _sum?: InputMaybe<FaucetSumAggregateInput>;
  by: Array<FaucetScalarFieldEnum>;
  having?: InputMaybe<FaucetScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<FaucetOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FaucetWhereInput>;
};


export type QueryGroupByGlossaryArgs = {
  _avg?: InputMaybe<GlossaryAvgAggregateInput>;
  _count?: InputMaybe<GlossaryCountAggregateInput>;
  _max?: InputMaybe<GlossaryMaxAggregateInput>;
  _min?: InputMaybe<GlossaryMinAggregateInput>;
  _sum?: InputMaybe<GlossarySumAggregateInput>;
  by: Array<GlossaryScalarFieldEnum>;
  having?: InputMaybe<GlossaryScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<GlossaryOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GlossaryWhereInput>;
};


export type QueryGroupByIdeaBankArgs = {
  _avg?: InputMaybe<IdeaBankAvgAggregateInput>;
  _count?: InputMaybe<IdeaBankCountAggregateInput>;
  _max?: InputMaybe<IdeaBankMaxAggregateInput>;
  _min?: InputMaybe<IdeaBankMinAggregateInput>;
  _sum?: InputMaybe<IdeaBankSumAggregateInput>;
  by: Array<IdeaBankScalarFieldEnum>;
  having?: InputMaybe<IdeaBankScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<IdeaBankOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IdeaBankWhereInput>;
};


export type QueryGroupByJobStationArgs = {
  _avg?: InputMaybe<JobStationAvgAggregateInput>;
  _count?: InputMaybe<JobStationCountAggregateInput>;
  _max?: InputMaybe<JobStationMaxAggregateInput>;
  _min?: InputMaybe<JobStationMinAggregateInput>;
  _sum?: InputMaybe<JobStationSumAggregateInput>;
  by: Array<JobStationScalarFieldEnum>;
  having?: InputMaybe<JobStationScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<JobStationOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobStationWhereInput>;
};


export type QueryGroupByJobTagArgs = {
  _avg?: InputMaybe<JobTagAvgAggregateInput>;
  _count?: InputMaybe<JobTagCountAggregateInput>;
  _max?: InputMaybe<JobTagMaxAggregateInput>;
  _min?: InputMaybe<JobTagMinAggregateInput>;
  _sum?: InputMaybe<JobTagSumAggregateInput>;
  by: Array<JobTagScalarFieldEnum>;
  having?: InputMaybe<JobTagScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<JobTagOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobTagWhereInput>;
};


export type QueryGroupByLearningTrackArgs = {
  _count?: InputMaybe<LearningTrackCountAggregateInput>;
  _max?: InputMaybe<LearningTrackMaxAggregateInput>;
  _min?: InputMaybe<LearningTrackMinAggregateInput>;
  by: Array<LearningTrackScalarFieldEnum>;
  having?: InputMaybe<LearningTrackScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<LearningTrackOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LearningTrackWhereInput>;
};


export type QueryGroupByNotificationArgs = {
  _count?: InputMaybe<NotificationCountAggregateInput>;
  _max?: InputMaybe<NotificationMaxAggregateInput>;
  _min?: InputMaybe<NotificationMinAggregateInput>;
  by: Array<NotificationScalarFieldEnum>;
  having?: InputMaybe<NotificationScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<NotificationOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryGroupByPageViewArgs = {
  _avg?: InputMaybe<PageViewAvgAggregateInput>;
  _count?: InputMaybe<PageViewCountAggregateInput>;
  _max?: InputMaybe<PageViewMaxAggregateInput>;
  _min?: InputMaybe<PageViewMinAggregateInput>;
  _sum?: InputMaybe<PageViewSumAggregateInput>;
  by: Array<PageViewScalarFieldEnum>;
  having?: InputMaybe<PageViewScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<PageViewOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageViewWhereInput>;
};


export type QueryGroupByPartnerShipArgs = {
  _avg?: InputMaybe<PartnerShipAvgAggregateInput>;
  _count?: InputMaybe<PartnerShipCountAggregateInput>;
  _max?: InputMaybe<PartnerShipMaxAggregateInput>;
  _min?: InputMaybe<PartnerShipMinAggregateInput>;
  _sum?: InputMaybe<PartnerShipSumAggregateInput>;
  by: Array<PartnerShipScalarFieldEnum>;
  having?: InputMaybe<PartnerShipScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<PartnerShipOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PartnerShipWhereInput>;
};


export type QueryGroupByProgressArgs = {
  _avg?: InputMaybe<ProgressV2AvgAggregateInput>;
  _count?: InputMaybe<ProgressV2CountAggregateInput>;
  _max?: InputMaybe<ProgressV2MaxAggregateInput>;
  _min?: InputMaybe<ProgressV2MinAggregateInput>;
  _sum?: InputMaybe<ProgressV2SumAggregateInput>;
  by: Array<ProgressV2ScalarFieldEnum>;
  having?: InputMaybe<ProgressV2ScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ProgressV2OrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProgressV2WhereInput>;
};


export type QueryGroupByThirdUserArgs = {
  _count?: InputMaybe<ThirdUserCountAggregateInput>;
  _max?: InputMaybe<ThirdUserMaxAggregateInput>;
  _min?: InputMaybe<ThirdUserMinAggregateInput>;
  by: Array<ThirdUserScalarFieldEnum>;
  having?: InputMaybe<ThirdUserScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ThirdUserOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThirdUserWhereInput>;
};


export type QueryGroupByTreasureArgs = {
  _avg?: InputMaybe<TreasureAvgAggregateInput>;
  _count?: InputMaybe<TreasureCountAggregateInput>;
  _max?: InputMaybe<TreasureMaxAggregateInput>;
  _min?: InputMaybe<TreasureMinAggregateInput>;
  _sum?: InputMaybe<TreasureSumAggregateInput>;
  by: Array<TreasureScalarFieldEnum>;
  having?: InputMaybe<TreasureScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<TreasureOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TreasureWhereInput>;
};


export type QueryGroupByUnitArgs = {
  _avg?: InputMaybe<UnitV2AvgAggregateInput>;
  _count?: InputMaybe<UnitV2CountAggregateInput>;
  _max?: InputMaybe<UnitV2MaxAggregateInput>;
  _min?: InputMaybe<UnitV2MinAggregateInput>;
  _sum?: InputMaybe<UnitV2SumAggregateInput>;
  by: Array<UnitV2ScalarFieldEnum>;
  having?: InputMaybe<UnitV2ScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UnitV2OrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UnitV2WhereInput>;
};


export type QueryGroupByUserArgs = {
  _avg?: InputMaybe<UserAvgAggregateInput>;
  _count?: InputMaybe<UserCountAggregateInput>;
  _max?: InputMaybe<UserMaxAggregateInput>;
  _min?: InputMaybe<UserMinAggregateInput>;
  _sum?: InputMaybe<UserSumAggregateInput>;
  by: Array<UserScalarFieldEnum>;
  having?: InputMaybe<UserScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryGroupByUserClaimFaucetRecordArgs = {
  _avg?: InputMaybe<UserClaimFaucetRecordAvgAggregateInput>;
  _count?: InputMaybe<UserClaimFaucetRecordCountAggregateInput>;
  _max?: InputMaybe<UserClaimFaucetRecordMaxAggregateInput>;
  _min?: InputMaybe<UserClaimFaucetRecordMinAggregateInput>;
  _sum?: InputMaybe<UserClaimFaucetRecordSumAggregateInput>;
  by: Array<UserClaimFaucetRecordScalarFieldEnum>;
  having?: InputMaybe<UserClaimFaucetRecordScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserClaimFaucetRecordOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserClaimFaucetRecordWhereInput>;
};


export type QueryHighlightProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryListActiveEcosystemInfosArgs = {
  lang: Scalars['String']['input'];
};


export type QueryListBlogsArgs = {
  cursor?: InputMaybe<BlogWhereUniqueInput>;
  distinct?: InputMaybe<Array<BlogScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<BlogOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BlogWhereInput>;
};


export type QueryListCertificationsArgs = {
  cursor?: InputMaybe<CertificationWhereUniqueInput>;
  distinct?: InputMaybe<Array<CertificationScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CertificationOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CertificationWhereInput>;
};


export type QueryListCoLearningArgs = {
  cursor?: InputMaybe<CoLearningWhereUniqueInput>;
  distinct?: InputMaybe<Array<CoLearningScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CoLearningOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CoLearningCoustomWhereInput>;
};


export type QueryListCoLearningEventArgs = {
  cursor?: InputMaybe<CoLearningEventWhereUniqueInput>;
  distinct?: InputMaybe<Array<CoLearningEventScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CoLearningEventOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CoLearningEventWhereInput>;
};


export type QueryListCoLearningMemberArgs = {
  cursor?: InputMaybe<CoLearningMemberWhereUniqueInput>;
  distinct?: InputMaybe<Array<CoLearningMemberScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CoLearningMemberOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CoLearningMemberWhereInput>;
};


export type QueryListCoLearningTodoArgs = {
  cursor?: InputMaybe<CoLearningTodoWhereUniqueInput>;
  distinct?: InputMaybe<Array<CoLearningTodoScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CoLearningTodoOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CoLearningTodoWhereInput>;
};


export type QueryListCourseEcosystemsArgs = {
  cursor?: InputMaybe<CourseEcosystemWhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseEcosystemScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CourseEcosystemOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseEcosystemWhereInput>;
};


export type QueryListCourseLearningTracksArgs = {
  cursor?: InputMaybe<CourseLearningTrackWhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseLearningTrackScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CourseLearningTrackOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseLearningTrackWhereInput>;
};


export type QueryListCoursesArgs = {
  cursor?: InputMaybe<CourseV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<CourseV2ScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CourseV2OrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CourseV2WhereInput>;
};


export type QueryListCustomKeywordsArgs = {
  cursor?: InputMaybe<CustomKeywordWhereUniqueInput>;
  distinct?: InputMaybe<Array<CustomKeywordScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CustomKeywordOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CustomKeywordWhereInput>;
};


export type QueryListDailyChallengesArgs = {
  cursor?: InputMaybe<DailyChallengeWhereUniqueInput>;
  distinct?: InputMaybe<Array<DailyChallengeScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DailyChallengeOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DailyChallengeWhereInput>;
};


export type QueryListDocssArgs = {
  cursor?: InputMaybe<DocsWhereUniqueInput>;
  distinct?: InputMaybe<Array<DocsScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DocsOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocsWhereInput>;
};


export type QueryListDocumentationsArgs = {
  cursor?: InputMaybe<DocumentationWhereUniqueInput>;
  distinct?: InputMaybe<Array<DocumentationScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<DocumentationOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<DocumentationWhereInput>;
};


export type QueryListEcosystemInfosArgs = {
  cursor?: InputMaybe<EcosystemInfoWhereUniqueInput>;
  distinct?: InputMaybe<Array<EcosystemInfoScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EcosystemInfoOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EcosystemInfoWhereInput>;
};


export type QueryListEcosystemsArgs = {
  cursor?: InputMaybe<EcosystemWhereUniqueInput>;
  distinct?: InputMaybe<Array<EcosystemScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EcosystemOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EcosystemWhereInput>;
};


export type QueryListEventsArgs = {
  cursor?: InputMaybe<EventsWhereUniqueInput>;
  distinct?: InputMaybe<Array<EventsScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<EventsOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<EventsWhereInput>;
};


export type QueryListFaucetsArgs = {
  cursor?: InputMaybe<FaucetWhereUniqueInput>;
  distinct?: InputMaybe<Array<FaucetScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<FaucetOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FaucetWhereInput>;
};


export type QueryListFaucetsClaimRecordByChainIdArgs = {
  chainId: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryListGlossarysArgs = {
  cursor?: InputMaybe<GlossaryWhereUniqueInput>;
  distinct?: InputMaybe<Array<GlossaryScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<GlossaryOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GlossaryWhereInput>;
};


export type QueryListHackathonAnnouncementArgs = {
  id: Scalars['String']['input'];
};


export type QueryListHackathonsArgs = {
  cursor?: InputMaybe<HackathonWhereUniqueInput>;
  distinct?: InputMaybe<Array<HackathonScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<HackathonStatus>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HackathonWhereInput>;
};


export type QueryListHackathonsByOrganizerArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  status: OrganizerHackathonStatus;
};


export type QueryListHackathonsBySelfArgs = {
  cursor?: InputMaybe<HackathonWhereUniqueInput>;
  distinct?: InputMaybe<Array<HackathonScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['String']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<HackathonStatus>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HackathonWhereInput>;
};


export type QueryListIdeaBanksArgs = {
  cursor?: InputMaybe<IdeaBankWhereUniqueInput>;
  distinct?: InputMaybe<Array<IdeaBankScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<IdeaBankOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<IdeaBankWhereInput>;
};


export type QueryListJobStationsArgs = {
  cursor?: InputMaybe<JobStationWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobStationScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<JobStationOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobStationWhereInput>;
};


export type QueryListJobStationsFavoriteArgs = {
  cursor?: InputMaybe<JobStationWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobStationScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<JobStationOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobStationWhereInput>;
};


export type QueryListJobTagsArgs = {
  cursor?: InputMaybe<JobTagWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobTagScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<JobTagOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobTagWhereInput>;
};


export type QueryListLearningTracksArgs = {
  cursor?: InputMaybe<LearningTrackWhereUniqueInput>;
  distinct?: InputMaybe<Array<LearningTrackScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<LearningTrackOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<LearningTrackWhereInput>;
};


export type QueryListNotificationsArgs = {
  cursor?: InputMaybe<NotificationWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotificationScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<NotificationOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotificationWhereInput>;
};


export type QueryListOrganizerApplicationArgs = {
  cursor?: InputMaybe<HackathonMemberWhereUniqueInput>;
  distinct?: InputMaybe<Array<HackathonMemberScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonMemberOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HackathonMemberWhereInput>;
};


export type QueryListOrganizerDistributionUtmSourcesArgs = {
  cursor?: InputMaybe<HackathonUtmWhereUniqueInput>;
  distinct?: InputMaybe<Array<HackathonUtmScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HackathonUtmOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HackathonUtmWhereInput>;
};


export type QueryListOrganizerJudgeArgs = {
  cursor?: InputMaybe<HackathonJudgeWhereUniqueInput>;
  distinct?: InputMaybe<Array<HackathonJudgeScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonJudgeOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HackathonJudgeWhereInput>;
};


export type QueryListOrganizerJudgeProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryListOrganizerSubmissionProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryListPageViewsArgs = {
  cursor?: InputMaybe<PageViewWhereUniqueInput>;
  distinct?: InputMaybe<Array<PageViewScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PageViewOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageViewWhereInput>;
};


export type QueryListPagesArgs = {
  cursor?: InputMaybe<PageV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<PageV2ScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PageV2OrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PageV2WhereInput>;
};


export type QueryListPartnerShipsArgs = {
  cursor?: InputMaybe<PartnerShipWhereUniqueInput>;
  distinct?: InputMaybe<Array<PartnerShipScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<PartnerShipOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PartnerShipWhereInput>;
};


export type QueryListProgresssArgs = {
  cursor?: InputMaybe<ProgressV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<ProgressV2ScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProgressV2OrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProgressV2WhereInput>;
};


export type QueryListProjectsArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryListProjectsBySelfArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryListThirdUsersArgs = {
  cursor?: InputMaybe<ThirdUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<ThirdUserScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ThirdUserOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThirdUserWhereInput>;
};


export type QueryListTreasuresArgs = {
  cursor?: InputMaybe<TreasureWhereUniqueInput>;
  distinct?: InputMaybe<Array<TreasureScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<TreasureOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TreasureWhereInput>;
};


export type QueryListUnitsArgs = {
  cursor?: InputMaybe<UnitV2WhereUniqueInput>;
  distinct?: InputMaybe<Array<UnitV2ScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UnitV2OrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UnitV2WhereInput>;
};


export type QueryListUserAttestationsArgs = {
  username: Scalars['String']['input'];
};


export type QueryListUserClaimFaucetRecordsArgs = {
  cursor?: InputMaybe<UserClaimFaucetRecordWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserClaimFaucetRecordScalarFieldEnum>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<UserClaimFaucetRecordOrderByWithRelationInput>>;
  page?: InputMaybe<Scalars['Int']['input']>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserClaimFaucetRecordWhereInput>;
};


export type QueryListUsersArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryListValidateProjectsArgs = {
  hackathonId: Scalars['String']['input'];
};


export type QuerySendMessageArgs = {
  data: SendMessageInput;
};

export enum QueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type Rank = {
  __typename?: 'Rank';
  rank?: Maybe<Scalars['Float']['output']>;
  total?: Maybe<Scalars['Float']['output']>;
};

export type RankAndVote = {
  __typename?: 'RankAndVote';
  rank?: Maybe<Scalars['Int']['output']>;
  totalVotes?: Maybe<Scalars['Float']['output']>;
};

export type Receivers = {
  __typename?: 'Receivers';
  /** 人数 */
  count: Scalars['Int']['output'];
  /** 类型 */
  type: Scalars['String']['output'];
};

export enum Role {
  Admin = 'ADMIN',
  Content = 'CONTENT',
  HackathonJudge = 'HACKATHON_JUDGE',
  Organization = 'ORGANIZATION',
  User = 'USER'
}

export type ScoreMember = {
  __typename?: 'ScoreMember';
  /** 用户头像 */
  avatar?: Maybe<Scalars['String']['output']>;
  /** 用户昵称 */
  name?: Maybe<Scalars['String']['output']>;
  /** 评判分数 */
  score?: Maybe<Scalars['Int']['output']>;
};

export type ScoreVote = {
  __typename?: 'ScoreVote';
  finalScore?: Maybe<Scalars['Float']['output']>;
  /** 是否增长 */
  isIncrease?: Maybe<Scalars['Boolean']['output']>;
  /** 排名 */
  rank?: Maybe<Scalars['Int']['output']>;
  /** 参与评分的人info */
  scoresMember?: Maybe<Array<ScoreMember>>;
};

export type Section = {
  __typename?: 'Section';
  /** 课程 */
  courses: Array<SectionCourse>;
  name: Scalars['String']['output'];
};

export type SectionCourse = {
  __typename?: 'SectionCourse';
  _count: CourseCount;
  alias?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTime']['output'];
  creatorId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documentationId?: Maybe<Scalars['String']['output']>;
  duration: Scalars['Int']['output'];
  ecosystem?: Maybe<Array<Scalars['String']['output']>>;
  id: Scalars['String']['output'];
  image?: Maybe<Scalars['String']['output']>;
  intendedLearners?: Maybe<Scalars['JSON']['output']>;
  knowledgeGain?: Maybe<Scalars['JSON']['output']>;
  lang: Scalars['String']['output'];
  language?: Maybe<Language>;
  level?: Maybe<CourseLevel>;
  optional: Scalars['JSON']['output'];
  pages?: Maybe<Array<Page>>;
  peopleJoined: Scalars['Int']['output'];
  /** 课程进度 */
  progress?: Maybe<Scalars['Float']['output']>;
  status: Scalars['String']['output'];
  subTitle?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  track?: Maybe<Scalars['String']['output']>;
  type: CourseType;
  units?: Maybe<Array<Unit>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type SendMessageInput = {
  content: Scalars['String']['input'];
  exampleNum?: InputMaybe<Scalars['Int']['input']>;
  pageId: Scalars['String']['input'];
  quizNum?: InputMaybe<Scalars['Int']['input']>;
  type: MessageType;
};

export type SendNotificationInput = {
  content: Scalars['JSON']['input'];
  type: NotificationType;
};

export type SendNotificationWhere = {
  /** If you want to send it to a user, you can pass this parameter,user id */
  id?: InputMaybe<Scalars['String']['input']>;
  /** If it is to notify specific roles, pass this parameter */
  voteRole?: InputMaybe<VoteRole>;
};

export type SendSuggestInput = {
  content: Scalars['String']['input'];
  lessonId?: InputMaybe<Scalars['String']['input']>;
  link: Scalars['String']['input'];
  tags: Array<Scalars['String']['input']>;
};

export enum SortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export type SortOrderInput = {
  nulls?: InputMaybe<NullsOrder>;
  sort: SortOrder;
};

export type StringFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['String']['input']>;
};

export type StringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableListFilter = {
  equals?: InputMaybe<Array<Scalars['String']['input']>>;
  has?: InputMaybe<Scalars['String']['input']>;
  hasEvery?: InputMaybe<Array<Scalars['String']['input']>>;
  hasSome?: InputMaybe<Array<Scalars['String']['input']>>;
  isEmpty?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StringNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type Template = {
  __typename?: 'Template';
  disable?: Maybe<Scalars['Boolean']['output']>;
  /** 接收人数 */
  receivers?: Maybe<Scalars['Int']['output']>;
  /** 模板主题 */
  subject?: Maybe<Scalars['String']['output']>;
  /** 模板内容 */
  template?: Maybe<Scalars['String']['output']>;
  /** 模板类型 */
  type?: Maybe<Scalars['String']['output']>;
};

export enum TemplateType {
  Approved = 'APPROVED',
  Deadline = 'DEADLINE',
  Decline = 'DECLINE',
  NoReward = 'NO_REWARD',
  Reward = 'REWARD',
  Submit = 'SUBMIT',
  Success = 'SUCCESS',
  VotingEnd = 'VOTING_END',
  VotingStart = 'VOTING_START',
  Waitlist = 'WAITLIST'
}

export type ThirdUser = {
  __typename?: 'ThirdUser';
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  info: Scalars['JSON']['output'];
  thirdPartyName: Scalars['String']['output'];
  thirdUserId: Scalars['String']['output'];
  thirdUsername?: Maybe<Scalars['String']['output']>;
  user: User;
  userId: Scalars['String']['output'];
};

export type ThirdUserCountAggregate = {
  __typename?: 'ThirdUserCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  info: Scalars['Int']['output'];
  thirdPartyName: Scalars['Int']['output'];
  thirdUserId: Scalars['Int']['output'];
  thirdUsername: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type ThirdUserCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  info?: InputMaybe<Scalars['Boolean']['input']>;
  thirdPartyName?: InputMaybe<Scalars['Boolean']['input']>;
  thirdUserId?: InputMaybe<Scalars['Boolean']['input']>;
  thirdUsername?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ThirdUserCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrder>;
  thirdPartyName?: InputMaybe<SortOrder>;
  thirdUserId?: InputMaybe<SortOrder>;
  thirdUsername?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type ThirdUserCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName: Scalars['String']['input'];
  thirdUserId: Scalars['String']['input'];
  thirdUsername?: InputMaybe<Scalars['String']['input']>;
  user: UserCreateNestedOneWithoutThirdUserInput;
};

export type ThirdUserCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName: Scalars['String']['input'];
  thirdUserId: Scalars['String']['input'];
  thirdUsername?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['String']['input'];
};

export type ThirdUserCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName: Scalars['String']['input'];
  thirdUserId: Scalars['String']['input'];
  thirdUsername?: InputMaybe<Scalars['String']['input']>;
};

export type ThirdUserCreateManyUserInputEnvelope = {
  data: Array<ThirdUserCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ThirdUserCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<ThirdUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ThirdUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ThirdUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<ThirdUserCreateManyUserInputEnvelope>;
};

export type ThirdUserCreateOrConnectWithoutUserInput = {
  create: ThirdUserCreateWithoutUserInput;
  where: ThirdUserWhereUniqueInput;
};

export type ThirdUserCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName: Scalars['String']['input'];
  thirdUserId: Scalars['String']['input'];
  thirdUsername?: InputMaybe<Scalars['String']['input']>;
};

export type ThirdUserGroupBy = {
  __typename?: 'ThirdUserGroupBy';
  _count?: Maybe<ThirdUserCountAggregate>;
  _max?: Maybe<ThirdUserMaxAggregate>;
  _min?: Maybe<ThirdUserMinAggregate>;
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  info: Scalars['JSON']['output'];
  thirdPartyName: Scalars['String']['output'];
  thirdUserId: Scalars['String']['output'];
  thirdUsername?: Maybe<Scalars['String']['output']>;
  userId: Scalars['String']['output'];
};

export type ThirdUserListPaginated = {
  __typename?: 'ThirdUserListPaginated';
  data?: Maybe<Array<ThirdUser>>;
  total: Scalars['Int']['output'];
};

export type ThirdUserListRelationFilter = {
  every?: InputMaybe<ThirdUserWhereInput>;
  none?: InputMaybe<ThirdUserWhereInput>;
  some?: InputMaybe<ThirdUserWhereInput>;
};

export type ThirdUserMaxAggregate = {
  __typename?: 'ThirdUserMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  thirdPartyName?: Maybe<Scalars['String']['output']>;
  thirdUserId?: Maybe<Scalars['String']['output']>;
  thirdUsername?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ThirdUserMaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  thirdPartyName?: InputMaybe<Scalars['Boolean']['input']>;
  thirdUserId?: InputMaybe<Scalars['Boolean']['input']>;
  thirdUsername?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ThirdUserMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  thirdPartyName?: InputMaybe<SortOrder>;
  thirdUserId?: InputMaybe<SortOrder>;
  thirdUsername?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type ThirdUserMinAggregate = {
  __typename?: 'ThirdUserMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  thirdPartyName?: Maybe<Scalars['String']['output']>;
  thirdUserId?: Maybe<Scalars['String']['output']>;
  thirdUsername?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type ThirdUserMinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  thirdPartyName?: InputMaybe<Scalars['Boolean']['input']>;
  thirdUserId?: InputMaybe<Scalars['Boolean']['input']>;
  thirdUsername?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ThirdUserMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  thirdPartyName?: InputMaybe<SortOrder>;
  thirdUserId?: InputMaybe<SortOrder>;
  thirdUsername?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type ThirdUserOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ThirdUserOrderByWithAggregationInput = {
  _count?: InputMaybe<ThirdUserCountOrderByAggregateInput>;
  _max?: InputMaybe<ThirdUserMaxOrderByAggregateInput>;
  _min?: InputMaybe<ThirdUserMinOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrder>;
  thirdPartyName?: InputMaybe<SortOrder>;
  thirdUserId?: InputMaybe<SortOrder>;
  thirdUsername?: InputMaybe<SortOrderInput>;
  userId?: InputMaybe<SortOrder>;
};

export type ThirdUserOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrder>;
  thirdPartyName?: InputMaybe<SortOrder>;
  thirdUserId?: InputMaybe<SortOrder>;
  thirdUsername?: InputMaybe<SortOrderInput>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userId?: InputMaybe<SortOrder>;
};

export enum ThirdUserScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Info = 'info',
  ThirdPartyName = 'thirdPartyName',
  ThirdUserId = 'thirdUserId',
  ThirdUsername = 'thirdUsername',
  UserId = 'userId'
}

export type ThirdUserScalarWhereInput = {
  AND?: InputMaybe<Array<ThirdUserScalarWhereInput>>;
  NOT?: InputMaybe<Array<ThirdUserScalarWhereInput>>;
  OR?: InputMaybe<Array<ThirdUserScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<JsonFilter>;
  thirdPartyName?: InputMaybe<StringFilter>;
  thirdUserId?: InputMaybe<StringFilter>;
  thirdUsername?: InputMaybe<StringNullableFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type ThirdUserScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ThirdUserScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ThirdUserScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ThirdUserScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  info?: InputMaybe<JsonWithAggregatesFilter>;
  thirdPartyName?: InputMaybe<StringWithAggregatesFilter>;
  thirdUserId?: InputMaybe<StringWithAggregatesFilter>;
  thirdUsername?: InputMaybe<StringNullableWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
};

export type ThirdUserUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  thirdUserId?: InputMaybe<StringFieldUpdateOperationsInput>;
  thirdUsername?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutThirdUserNestedInput>;
};

export type ThirdUserUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  thirdUserId?: InputMaybe<StringFieldUpdateOperationsInput>;
  thirdUsername?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ThirdUserUpdateManyWithWhereWithoutUserInput = {
  data: ThirdUserUpdateManyMutationInput;
  where: ThirdUserScalarWhereInput;
};

export type ThirdUserUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ThirdUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ThirdUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ThirdUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<ThirdUserCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ThirdUserWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ThirdUserScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ThirdUserWhereUniqueInput>>;
  set?: InputMaybe<Array<ThirdUserWhereUniqueInput>>;
  update?: InputMaybe<Array<ThirdUserUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ThirdUserUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ThirdUserUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ThirdUserUpdateWithWhereUniqueWithoutUserInput = {
  data: ThirdUserUpdateWithoutUserInput;
  where: ThirdUserWhereUniqueInput;
};

export type ThirdUserUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  thirdPartyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  thirdUserId?: InputMaybe<StringFieldUpdateOperationsInput>;
  thirdUsername?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ThirdUserUpsertWithWhereUniqueWithoutUserInput = {
  create: ThirdUserCreateWithoutUserInput;
  update: ThirdUserUpdateWithoutUserInput;
  where: ThirdUserWhereUniqueInput;
};

export type ThirdUserUserIdThirdPartyNameCompoundUniqueInput = {
  thirdPartyName: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type ThirdUserWhereInput = {
  AND?: InputMaybe<Array<ThirdUserWhereInput>>;
  NOT?: InputMaybe<Array<ThirdUserWhereInput>>;
  OR?: InputMaybe<Array<ThirdUserWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  info?: InputMaybe<JsonFilter>;
  thirdPartyName?: InputMaybe<StringFilter>;
  thirdUserId?: InputMaybe<StringFilter>;
  thirdUsername?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type ThirdUserWhereUniqueInput = {
  AND?: InputMaybe<Array<ThirdUserWhereInput>>;
  NOT?: InputMaybe<Array<ThirdUserWhereInput>>;
  OR?: InputMaybe<Array<ThirdUserWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  info?: InputMaybe<JsonFilter>;
  thirdPartyName?: InputMaybe<StringFilter>;
  thirdUserId?: InputMaybe<StringFilter>;
  thirdUsername?: InputMaybe<StringNullableFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
  userId_thirdPartyName?: InputMaybe<ThirdUserUserIdThirdPartyNameCompoundUniqueInput>;
};

export type Treasure = {
  __typename?: 'Treasure';
  coin: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  exp: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  source: Scalars['String']['output'];
  status: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user: User;
  userId: Scalars['String']['output'];
};

export type TreasureAvgAggregate = {
  __typename?: 'TreasureAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
  exp?: Maybe<Scalars['Float']['output']>;
};

export type TreasureAvgAggregateInput = {
  coin?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TreasureAvgOrderByAggregateInput = {
  coin?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
};

export type TreasureCountAggregate = {
  __typename?: 'TreasureCountAggregate';
  _all: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  source: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type TreasureCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  coin?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  source?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TreasureCountOrderByAggregateInput = {
  coin?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  source?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type TreasureCreateInput = {
  coin?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  exp?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  source?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  user: UserCreateNestedOneWithoutTreasuresInput;
};

export type TreasureCreateManyInput = {
  coin?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  exp?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  source?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type TreasureCreateManyUserInput = {
  coin?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  exp?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  source?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type TreasureCreateManyUserInputEnvelope = {
  data: Array<TreasureCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TreasureCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<TreasureWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TreasureCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<TreasureCreateWithoutUserInput>>;
  createMany?: InputMaybe<TreasureCreateManyUserInputEnvelope>;
};

export type TreasureCreateOrConnectWithoutUserInput = {
  create: TreasureCreateWithoutUserInput;
  where: TreasureWhereUniqueInput;
};

export type TreasureCreateWithoutUserInput = {
  coin?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  exp?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  source?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type TreasureGroupBy = {
  __typename?: 'TreasureGroupBy';
  _avg?: Maybe<TreasureAvgAggregate>;
  _count?: Maybe<TreasureCountAggregate>;
  _max?: Maybe<TreasureMaxAggregate>;
  _min?: Maybe<TreasureMinAggregate>;
  _sum?: Maybe<TreasureSumAggregate>;
  coin: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  exp: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  source: Scalars['String']['output'];
  status: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type TreasureListPaginated = {
  __typename?: 'TreasureListPaginated';
  data?: Maybe<Array<Treasure>>;
  total: Scalars['Int']['output'];
};

export type TreasureListRelationFilter = {
  every?: InputMaybe<TreasureWhereInput>;
  none?: InputMaybe<TreasureWhereInput>;
  some?: InputMaybe<TreasureWhereInput>;
};

export type TreasureMaxAggregate = {
  __typename?: 'TreasureMaxAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type TreasureMaxAggregateInput = {
  coin?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  source?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TreasureMaxOrderByAggregateInput = {
  coin?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  source?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type TreasureMinAggregate = {
  __typename?: 'TreasureMinAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type TreasureMinAggregateInput = {
  coin?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  source?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TreasureMinOrderByAggregateInput = {
  coin?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  source?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type TreasureOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type TreasureOrderByWithAggregationInput = {
  _avg?: InputMaybe<TreasureAvgOrderByAggregateInput>;
  _count?: InputMaybe<TreasureCountOrderByAggregateInput>;
  _max?: InputMaybe<TreasureMaxOrderByAggregateInput>;
  _min?: InputMaybe<TreasureMinOrderByAggregateInput>;
  _sum?: InputMaybe<TreasureSumOrderByAggregateInput>;
  coin?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  source?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type TreasureOrderByWithRelationInput = {
  coin?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  source?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userId?: InputMaybe<SortOrder>;
};

export enum TreasureScalarFieldEnum {
  Coin = 'coin',
  CreatedAt = 'createdAt',
  Exp = 'exp',
  Id = 'id',
  Source = 'source',
  Status = 'status',
  UpdatedAt = 'updatedAt',
  UserId = 'userId'
}

export type TreasureScalarWhereInput = {
  AND?: InputMaybe<Array<TreasureScalarWhereInput>>;
  NOT?: InputMaybe<Array<TreasureScalarWhereInput>>;
  OR?: InputMaybe<Array<TreasureScalarWhereInput>>;
  coin?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  exp?: InputMaybe<IntFilter>;
  id?: InputMaybe<UuidFilter>;
  source?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type TreasureScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<TreasureScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<TreasureScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<TreasureScalarWhereWithAggregatesInput>>;
  coin?: InputMaybe<IntWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  exp?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  source?: InputMaybe<StringWithAggregatesFilter>;
  status?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
};

export type TreasureSumAggregate = {
  __typename?: 'TreasureSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
};

export type TreasureSumAggregateInput = {
  coin?: InputMaybe<Scalars['Boolean']['input']>;
  exp?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TreasureSumOrderByAggregateInput = {
  coin?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
};

export type TreasureUpdateInput = {
  coin?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  source?: InputMaybe<StringFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutTreasuresNestedInput>;
};

export type TreasureUpdateManyMutationInput = {
  coin?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  source?: InputMaybe<StringFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TreasureUpdateManyWithWhereWithoutUserInput = {
  data: TreasureUpdateManyMutationInput;
  where: TreasureScalarWhereInput;
};

export type TreasureUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<TreasureWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TreasureCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<TreasureCreateWithoutUserInput>>;
  createMany?: InputMaybe<TreasureCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<TreasureWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<TreasureScalarWhereInput>>;
  disconnect?: InputMaybe<Array<TreasureWhereUniqueInput>>;
  set?: InputMaybe<Array<TreasureWhereUniqueInput>>;
  update?: InputMaybe<Array<TreasureUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<TreasureUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<TreasureUpsertWithWhereUniqueWithoutUserInput>>;
};

export type TreasureUpdateWithWhereUniqueWithoutUserInput = {
  data: TreasureUpdateWithoutUserInput;
  where: TreasureWhereUniqueInput;
};

export type TreasureUpdateWithoutUserInput = {
  coin?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  source?: InputMaybe<StringFieldUpdateOperationsInput>;
  status?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TreasureUpsertWithWhereUniqueWithoutUserInput = {
  create: TreasureCreateWithoutUserInput;
  update: TreasureUpdateWithoutUserInput;
  where: TreasureWhereUniqueInput;
};

export type TreasureWhereInput = {
  AND?: InputMaybe<Array<TreasureWhereInput>>;
  NOT?: InputMaybe<Array<TreasureWhereInput>>;
  OR?: InputMaybe<Array<TreasureWhereInput>>;
  coin?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  exp?: InputMaybe<IntFilter>;
  id?: InputMaybe<UuidFilter>;
  source?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type TreasureWhereUniqueInput = {
  AND?: InputMaybe<Array<TreasureWhereInput>>;
  NOT?: InputMaybe<Array<TreasureWhereInput>>;
  OR?: InputMaybe<Array<TreasureWhereInput>>;
  coin?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  exp?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  source?: InputMaybe<StringFilter>;
  status?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type Unit = {
  __typename?: 'Unit';
  _count: UnitCount;
  course: Course;
  courseId: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  pages?: Maybe<Array<Page>>;
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type UnitAvgAggregate = {
  __typename?: 'UnitAvgAggregate';
  sequence?: Maybe<Scalars['Float']['output']>;
};

export type UnitCount = {
  __typename?: 'UnitCount';
  pages: Scalars['Int']['output'];
};

export type UnitCountAggregate = {
  __typename?: 'UnitCountAggregate';
  _all: Scalars['Int']['output'];
  courseId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type UnitExtend = {
  __typename?: 'UnitExtend';
  _count: UnitV2Count;
  courseUnits?: Maybe<Array<CourseUnit>>;
  createdAt: Scalars['DateTime']['output'];
  /** 当前unit完成进度的位置 */
  currentPageId?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  nextPageId?: Maybe<Scalars['String']['output']>;
  pages?: Maybe<Array<PageExtend>>;
  progress?: Maybe<Scalars['Float']['output']>;
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  unitPages?: Maybe<Array<UnitPage>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type UnitListPaginated = {
  __typename?: 'UnitListPaginated';
  data?: Maybe<Array<UnitV2>>;
  total: Scalars['Int']['output'];
};

export type UnitMaxAggregate = {
  __typename?: 'UnitMaxAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UnitMinAggregate = {
  __typename?: 'UnitMinAggregate';
  courseId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UnitPage = {
  __typename?: 'UnitPage';
  id: Scalars['String']['output'];
  page: PageV2;
  pageId: Scalars['String']['output'];
  unit: UnitV2;
  unitId: Scalars['String']['output'];
};

export type UnitPageCountAggregate = {
  __typename?: 'UnitPageCountAggregate';
  _all: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  pageId: Scalars['Int']['output'];
  unitId: Scalars['Int']['output'];
};

export type UnitPageCreateManyUnitInput = {
  id?: InputMaybe<Scalars['String']['input']>;
  pageId: Scalars['String']['input'];
};

export type UnitPageCreateManyUnitInputEnvelope = {
  data: Array<UnitPageCreateManyUnitInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UnitPageCreateNestedManyWithoutUnitInput = {
  connect?: InputMaybe<Array<UnitPageWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UnitPageCreateOrConnectWithoutUnitInput>>;
  create?: InputMaybe<Array<UnitPageCreateWithoutUnitInput>>;
  createMany?: InputMaybe<UnitPageCreateManyUnitInputEnvelope>;
};

export type UnitPageCreateOrConnectWithoutUnitInput = {
  create: UnitPageCreateWithoutUnitInput;
  where: UnitPageWhereUniqueInput;
};

export type UnitPageCreateWithoutUnitInput = {
  id?: InputMaybe<Scalars['String']['input']>;
  page: PageV2CreateNestedOneWithoutUnitPageInput;
};

export type UnitPageListRelationFilter = {
  every?: InputMaybe<UnitPageWhereInput>;
  none?: InputMaybe<UnitPageWhereInput>;
  some?: InputMaybe<UnitPageWhereInput>;
};

export type UnitPageMaxAggregate = {
  __typename?: 'UnitPageMaxAggregate';
  id?: Maybe<Scalars['String']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
  unitId?: Maybe<Scalars['String']['output']>;
};

export type UnitPageMinAggregate = {
  __typename?: 'UnitPageMinAggregate';
  id?: Maybe<Scalars['String']['output']>;
  pageId?: Maybe<Scalars['String']['output']>;
  unitId?: Maybe<Scalars['String']['output']>;
};

export type UnitPageOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UnitPageScalarWhereInput = {
  AND?: InputMaybe<Array<UnitPageScalarWhereInput>>;
  NOT?: InputMaybe<Array<UnitPageScalarWhereInput>>;
  OR?: InputMaybe<Array<UnitPageScalarWhereInput>>;
  id?: InputMaybe<UuidFilter>;
  pageId?: InputMaybe<UuidFilter>;
  unitId?: InputMaybe<UuidFilter>;
};

export type UnitPageUnitIdPageIdCompoundUniqueInput = {
  pageId: Scalars['String']['input'];
  unitId: Scalars['String']['input'];
};

export type UnitPageUpdateManyMutationInput = {
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UnitPageUpdateManyWithWhereWithoutUnitInput = {
  data: UnitPageUpdateManyMutationInput;
  where: UnitPageScalarWhereInput;
};

export type UnitPageUpdateManyWithoutUnitNestedInput = {
  connect?: InputMaybe<Array<UnitPageWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UnitPageCreateOrConnectWithoutUnitInput>>;
  create?: InputMaybe<Array<UnitPageCreateWithoutUnitInput>>;
  createMany?: InputMaybe<UnitPageCreateManyUnitInputEnvelope>;
  delete?: InputMaybe<Array<UnitPageWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UnitPageScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UnitPageWhereUniqueInput>>;
  set?: InputMaybe<Array<UnitPageWhereUniqueInput>>;
  update?: InputMaybe<Array<UnitPageUpdateWithWhereUniqueWithoutUnitInput>>;
  updateMany?: InputMaybe<Array<UnitPageUpdateManyWithWhereWithoutUnitInput>>;
  upsert?: InputMaybe<Array<UnitPageUpsertWithWhereUniqueWithoutUnitInput>>;
};

export type UnitPageUpdateWithWhereUniqueWithoutUnitInput = {
  data: UnitPageUpdateWithoutUnitInput;
  where: UnitPageWhereUniqueInput;
};

export type UnitPageUpdateWithoutUnitInput = {
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  page?: InputMaybe<PageV2UpdateOneRequiredWithoutUnitPageNestedInput>;
};

export type UnitPageUpsertWithWhereUniqueWithoutUnitInput = {
  create: UnitPageCreateWithoutUnitInput;
  update: UnitPageUpdateWithoutUnitInput;
  where: UnitPageWhereUniqueInput;
};

export type UnitPageWhereInput = {
  AND?: InputMaybe<Array<UnitPageWhereInput>>;
  NOT?: InputMaybe<Array<UnitPageWhereInput>>;
  OR?: InputMaybe<Array<UnitPageWhereInput>>;
  id?: InputMaybe<UuidFilter>;
  page?: InputMaybe<PageV2RelationFilter>;
  pageId?: InputMaybe<UuidFilter>;
  unit?: InputMaybe<UnitV2RelationFilter>;
  unitId?: InputMaybe<UuidFilter>;
};

export type UnitPageWhereUniqueInput = {
  AND?: InputMaybe<Array<UnitPageWhereInput>>;
  NOT?: InputMaybe<Array<UnitPageWhereInput>>;
  OR?: InputMaybe<Array<UnitPageWhereInput>>;
  id?: InputMaybe<Scalars['String']['input']>;
  page?: InputMaybe<PageV2RelationFilter>;
  pageId?: InputMaybe<UuidFilter>;
  unit?: InputMaybe<UnitV2RelationFilter>;
  unitId?: InputMaybe<UuidFilter>;
  unitId_pageId?: InputMaybe<UnitPageUnitIdPageIdCompoundUniqueInput>;
};

export type UnitSumAggregate = {
  __typename?: 'UnitSumAggregate';
  sequence?: Maybe<Scalars['Int']['output']>;
};

export type UnitV2 = {
  __typename?: 'UnitV2';
  _count: UnitV2Count;
  courseUnits?: Maybe<Array<CourseUnit>>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  unitPages?: Maybe<Array<UnitPage>>;
  updatedAt: Scalars['DateTime']['output'];
};

export type UnitV2AvgAggregate = {
  __typename?: 'UnitV2AvgAggregate';
  sequence?: Maybe<Scalars['Float']['output']>;
};

export type UnitV2AvgAggregateInput = {
  sequence?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UnitV2AvgOrderByAggregateInput = {
  sequence?: InputMaybe<SortOrder>;
};

export type UnitV2Count = {
  __typename?: 'UnitV2Count';
  courseUnits: Scalars['Int']['output'];
  unitPages: Scalars['Int']['output'];
};

export type UnitV2CountAggregate = {
  __typename?: 'UnitV2CountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type UnitV2CountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  sequence?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UnitV2CountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type UnitV2CreateInput = {
  courseUnits?: InputMaybe<CourseUnitCreateNestedManyWithoutUnitInput>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  sequence: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  unitPages?: InputMaybe<UnitPageCreateNestedManyWithoutUnitInput>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UnitV2CreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  sequence: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UnitV2GroupBy = {
  __typename?: 'UnitV2GroupBy';
  _avg?: Maybe<UnitV2AvgAggregate>;
  _count?: Maybe<UnitV2CountAggregate>;
  _max?: Maybe<UnitV2MaxAggregate>;
  _min?: Maybe<UnitV2MinAggregate>;
  _sum?: Maybe<UnitV2SumAggregate>;
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  sequence: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type UnitV2MaxAggregate = {
  __typename?: 'UnitV2MaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UnitV2MaxAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  sequence?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UnitV2MaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type UnitV2MinAggregate = {
  __typename?: 'UnitV2MinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  sequence?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UnitV2MinAggregateInput = {
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  sequence?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UnitV2MinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type UnitV2OrderByWithAggregationInput = {
  _avg?: InputMaybe<UnitV2AvgOrderByAggregateInput>;
  _count?: InputMaybe<UnitV2CountOrderByAggregateInput>;
  _max?: InputMaybe<UnitV2MaxOrderByAggregateInput>;
  _min?: InputMaybe<UnitV2MinOrderByAggregateInput>;
  _sum?: InputMaybe<UnitV2SumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type UnitV2OrderByWithRelationInput = {
  courseUnits?: InputMaybe<CourseUnitOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  sequence?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  unitPages?: InputMaybe<UnitPageOrderByRelationAggregateInput>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type UnitV2RelationFilter = {
  is?: InputMaybe<UnitV2WhereInput>;
  isNot?: InputMaybe<UnitV2WhereInput>;
};

export enum UnitV2ScalarFieldEnum {
  CreatedAt = 'createdAt',
  Description = 'description',
  Id = 'id',
  Sequence = 'sequence',
  Title = 'title',
  UpdatedAt = 'updatedAt'
}

export type UnitV2ScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UnitV2ScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UnitV2ScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UnitV2ScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  description?: InputMaybe<StringNullableWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  sequence?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type UnitV2SumAggregate = {
  __typename?: 'UnitV2SumAggregate';
  sequence?: Maybe<Scalars['Int']['output']>;
};

export type UnitV2SumAggregateInput = {
  sequence?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UnitV2SumOrderByAggregateInput = {
  sequence?: InputMaybe<SortOrder>;
};

export type UnitV2UpdateInput = {
  courseUnits?: InputMaybe<CourseUnitUpdateManyWithoutUnitNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  unitPages?: InputMaybe<UnitPageUpdateManyWithoutUnitNestedInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UnitV2UpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  sequence?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UnitV2WhereInput = {
  AND?: InputMaybe<Array<UnitV2WhereInput>>;
  NOT?: InputMaybe<Array<UnitV2WhereInput>>;
  OR?: InputMaybe<Array<UnitV2WhereInput>>;
  courseUnits?: InputMaybe<CourseUnitListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<UuidFilter>;
  sequence?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  unitPages?: InputMaybe<UnitPageListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type UnitV2WhereUniqueInput = {
  AND?: InputMaybe<Array<UnitV2WhereInput>>;
  NOT?: InputMaybe<Array<UnitV2WhereInput>>;
  OR?: InputMaybe<Array<UnitV2WhereInput>>;
  courseUnits?: InputMaybe<CourseUnitListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  sequence?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  unitPages?: InputMaybe<UnitPageListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type UpdateUserLeaningPhaseInput = {
  ecosystemId: Scalars['String']['input'];
  lang: Scalars['String']['input'];
  phaseId: Scalars['String']['input'];
};

export type User = {
  __typename?: 'User';
  _count: UserCount;
  avatar: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  email?: Maybe<Scalars['String']['output']>;
  hackCoin?: Maybe<UserHackCoin>;
  id: Scalars['String']['output'];
  ideaBank?: Maybe<Array<IdeaBank>>;
  inviteCode: Scalars['String']['output'];
  invitedBy?: Maybe<Scalars['String']['output']>;
  levelInfo?: Maybe<UserLevel>;
  name?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  registerType: Scalars['String']['output'];
  role: Role;
  settings?: Maybe<UserSettings>;
  status: UserStatus;
  thirdUser?: Maybe<Array<ThirdUser>>;
  treasures?: Maybe<Array<Treasure>>;
  uid: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userCampaign?: Maybe<Array<UserCampaign>>;
  userCampaignTarget?: Maybe<Array<UserCampaignTarget>>;
  userProfile?: Maybe<UserProfile>;
  userResume?: Maybe<Array<UserResume>>;
  username?: Maybe<Scalars['String']['output']>;
  voteRole: VoteRole;
};

export type UserAvgAggregate = {
  __typename?: 'UserAvgAggregate';
  uid?: Maybe<Scalars['Float']['output']>;
};

export type UserAvgAggregateInput = {
  uid?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserAvgOrderByAggregateInput = {
  uid?: InputMaybe<SortOrder>;
};

export type UserCampaign = {
  __typename?: 'UserCampaign';
  campaign: Campaign;
  campaignId: Scalars['String']['output'];
  claimed: Scalars['Boolean']['output'];
  completed: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  target: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user: User;
  userId: Scalars['String']['output'];
};

export type UserCampaignAvgAggregate = {
  __typename?: 'UserCampaignAvgAggregate';
  target?: Maybe<Scalars['Float']['output']>;
};

export type UserCampaignCountAggregate = {
  __typename?: 'UserCampaignCountAggregate';
  _all: Scalars['Int']['output'];
  campaignId: Scalars['Int']['output'];
  claimed: Scalars['Int']['output'];
  completed: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserCampaignCreateManyCampaignInput = {
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type UserCampaignCreateManyCampaignInputEnvelope = {
  data: Array<UserCampaignCreateManyCampaignInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCampaignCreateManyUserInput = {
  campaignId: Scalars['String']['input'];
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UserCampaignCreateManyUserInputEnvelope = {
  data: Array<UserCampaignCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCampaignCreateNestedManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<UserCampaignCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<UserCampaignCreateManyCampaignInputEnvelope>;
};

export type UserCampaignCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserCampaignCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserCampaignCreateManyUserInputEnvelope>;
};

export type UserCampaignCreateOrConnectWithoutCampaignInput = {
  create: UserCampaignCreateWithoutCampaignInput;
  where: UserCampaignWhereUniqueInput;
};

export type UserCampaignCreateOrConnectWithoutUserInput = {
  create: UserCampaignCreateWithoutUserInput;
  where: UserCampaignWhereUniqueInput;
};

export type UserCampaignCreateWithoutCampaignInput = {
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  user: UserCreateNestedOneWithoutUserCampaignInput;
};

export type UserCampaignCreateWithoutUserInput = {
  campaign: CampaignCreateNestedOneWithoutUserCampaignsInput;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UserCampaignListRelationFilter = {
  every?: InputMaybe<UserCampaignWhereInput>;
  none?: InputMaybe<UserCampaignWhereInput>;
  some?: InputMaybe<UserCampaignWhereInput>;
};

export type UserCampaignMaxAggregate = {
  __typename?: 'UserCampaignMaxAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  claimed?: Maybe<Scalars['Boolean']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserCampaignMinAggregate = {
  __typename?: 'UserCampaignMinAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  claimed?: Maybe<Scalars['Boolean']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserCampaignOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserCampaignScalarWhereInput = {
  AND?: InputMaybe<Array<UserCampaignScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserCampaignScalarWhereInput>>;
  OR?: InputMaybe<Array<UserCampaignScalarWhereInput>>;
  campaignId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  target?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserCampaignSumAggregate = {
  __typename?: 'UserCampaignSumAggregate';
  target?: Maybe<Scalars['Int']['output']>;
};

export type UserCampaignTarget = {
  __typename?: 'UserCampaignTarget';
  campaign: Campaign;
  campaignId: Scalars['String']['output'];
  campaignTarget: CampaignTarget;
  campaignTargetId: Scalars['String']['output'];
  claimed: Scalars['Boolean']['output'];
  completed: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  progress?: Maybe<Array<Scalars['Int']['output']>>;
  type: CampaignType;
  updatedAt: Scalars['DateTime']['output'];
  user: User;
  userId: Scalars['String']['output'];
};

export type UserCampaignTargetAvgAggregate = {
  __typename?: 'UserCampaignTargetAvgAggregate';
  progress?: Maybe<Scalars['Float']['output']>;
};

export type UserCampaignTargetCountAggregate = {
  __typename?: 'UserCampaignTargetCountAggregate';
  _all: Scalars['Int']['output'];
  campaignId: Scalars['Int']['output'];
  campaignTargetId: Scalars['Int']['output'];
  claimed: Scalars['Int']['output'];
  completed: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserCampaignTargetCreateManyCampaignInput = {
  campaignTargetId: Scalars['String']['input'];
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<UserCampaignTargetCreateprogressInput>;
  type: CampaignType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type UserCampaignTargetCreateManyCampaignInputEnvelope = {
  data: Array<UserCampaignTargetCreateManyCampaignInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCampaignTargetCreateManyCampaignTargetInput = {
  campaignId: Scalars['String']['input'];
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<UserCampaignTargetCreateprogressInput>;
  type: CampaignType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type UserCampaignTargetCreateManyCampaignTargetInputEnvelope = {
  data: Array<UserCampaignTargetCreateManyCampaignTargetInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCampaignTargetCreateManyUserInput = {
  campaignId: Scalars['String']['input'];
  campaignTargetId: Scalars['String']['input'];
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<UserCampaignTargetCreateprogressInput>;
  type: CampaignType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UserCampaignTargetCreateManyUserInputEnvelope = {
  data: Array<UserCampaignTargetCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCampaignTargetCreateNestedManyWithoutCampaignInput = {
  connect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignTargetCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<UserCampaignTargetCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<UserCampaignTargetCreateManyCampaignInputEnvelope>;
};

export type UserCampaignTargetCreateNestedManyWithoutCampaignTargetInput = {
  connect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignTargetCreateOrConnectWithoutCampaignTargetInput>>;
  create?: InputMaybe<Array<UserCampaignTargetCreateWithoutCampaignTargetInput>>;
  createMany?: InputMaybe<UserCampaignTargetCreateManyCampaignTargetInputEnvelope>;
};

export type UserCampaignTargetCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignTargetCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserCampaignTargetCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserCampaignTargetCreateManyUserInputEnvelope>;
};

export type UserCampaignTargetCreateOrConnectWithoutCampaignInput = {
  create: UserCampaignTargetCreateWithoutCampaignInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetCreateOrConnectWithoutCampaignTargetInput = {
  create: UserCampaignTargetCreateWithoutCampaignTargetInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetCreateOrConnectWithoutUserInput = {
  create: UserCampaignTargetCreateWithoutUserInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetCreateWithoutCampaignInput = {
  campaignTarget: CampaignTargetCreateNestedOneWithoutUserCampaignTargetInput;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<UserCampaignTargetCreateprogressInput>;
  type: CampaignType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  user: UserCreateNestedOneWithoutUserCampaignTargetInput;
};

export type UserCampaignTargetCreateWithoutCampaignTargetInput = {
  campaign: CampaignCreateNestedOneWithoutUserCampaignTargetsInput;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<UserCampaignTargetCreateprogressInput>;
  type: CampaignType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  user: UserCreateNestedOneWithoutUserCampaignTargetInput;
};

export type UserCampaignTargetCreateWithoutUserInput = {
  campaign: CampaignCreateNestedOneWithoutUserCampaignTargetsInput;
  campaignTarget: CampaignTargetCreateNestedOneWithoutUserCampaignTargetInput;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  completed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<UserCampaignTargetCreateprogressInput>;
  type: CampaignType;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UserCampaignTargetCreateprogressInput = {
  set: Array<Scalars['Int']['input']>;
};

export type UserCampaignTargetListRelationFilter = {
  every?: InputMaybe<UserCampaignTargetWhereInput>;
  none?: InputMaybe<UserCampaignTargetWhereInput>;
  some?: InputMaybe<UserCampaignTargetWhereInput>;
};

export type UserCampaignTargetMaxAggregate = {
  __typename?: 'UserCampaignTargetMaxAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  campaignTargetId?: Maybe<Scalars['String']['output']>;
  claimed?: Maybe<Scalars['Boolean']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CampaignType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserCampaignTargetMinAggregate = {
  __typename?: 'UserCampaignTargetMinAggregate';
  campaignId?: Maybe<Scalars['String']['output']>;
  campaignTargetId?: Maybe<Scalars['String']['output']>;
  claimed?: Maybe<Scalars['Boolean']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  type?: Maybe<CampaignType>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserCampaignTargetOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserCampaignTargetScalarWhereInput = {
  AND?: InputMaybe<Array<UserCampaignTargetScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserCampaignTargetScalarWhereInput>>;
  OR?: InputMaybe<Array<UserCampaignTargetScalarWhereInput>>;
  campaignId?: InputMaybe<UuidFilter>;
  campaignTargetId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  progress?: InputMaybe<IntNullableListFilter>;
  type?: InputMaybe<EnumCampaignTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserCampaignTargetSumAggregate = {
  __typename?: 'UserCampaignTargetSumAggregate';
  progress?: Maybe<Array<Scalars['Int']['output']>>;
};

export type UserCampaignTargetUpdateManyMutationInput = {
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  progress?: InputMaybe<UserCampaignTargetUpdateprogressInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UserCampaignTargetUpdateManyWithWhereWithoutCampaignInput = {
  data: UserCampaignTargetUpdateManyMutationInput;
  where: UserCampaignTargetScalarWhereInput;
};

export type UserCampaignTargetUpdateManyWithWhereWithoutCampaignTargetInput = {
  data: UserCampaignTargetUpdateManyMutationInput;
  where: UserCampaignTargetScalarWhereInput;
};

export type UserCampaignTargetUpdateManyWithWhereWithoutUserInput = {
  data: UserCampaignTargetUpdateManyMutationInput;
  where: UserCampaignTargetScalarWhereInput;
};

export type UserCampaignTargetUpdateManyWithoutCampaignNestedInput = {
  connect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignTargetCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<UserCampaignTargetCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<UserCampaignTargetCreateManyCampaignInputEnvelope>;
  delete?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCampaignTargetScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCampaignTargetUpdateWithWhereUniqueWithoutCampaignInput>>;
  updateMany?: InputMaybe<Array<UserCampaignTargetUpdateManyWithWhereWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<UserCampaignTargetUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type UserCampaignTargetUpdateManyWithoutCampaignTargetNestedInput = {
  connect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignTargetCreateOrConnectWithoutCampaignTargetInput>>;
  create?: InputMaybe<Array<UserCampaignTargetCreateWithoutCampaignTargetInput>>;
  createMany?: InputMaybe<UserCampaignTargetCreateManyCampaignTargetInputEnvelope>;
  delete?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCampaignTargetScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCampaignTargetUpdateWithWhereUniqueWithoutCampaignTargetInput>>;
  updateMany?: InputMaybe<Array<UserCampaignTargetUpdateManyWithWhereWithoutCampaignTargetInput>>;
  upsert?: InputMaybe<Array<UserCampaignTargetUpsertWithWhereUniqueWithoutCampaignTargetInput>>;
};

export type UserCampaignTargetUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignTargetCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserCampaignTargetCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserCampaignTargetCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCampaignTargetScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCampaignTargetWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCampaignTargetUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserCampaignTargetUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserCampaignTargetUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserCampaignTargetUpdateWithWhereUniqueWithoutCampaignInput = {
  data: UserCampaignTargetUpdateWithoutCampaignInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetUpdateWithWhereUniqueWithoutCampaignTargetInput = {
  data: UserCampaignTargetUpdateWithoutCampaignTargetInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetUpdateWithWhereUniqueWithoutUserInput = {
  data: UserCampaignTargetUpdateWithoutUserInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetUpdateWithoutCampaignInput = {
  campaignTarget?: InputMaybe<CampaignTargetUpdateOneRequiredWithoutUserCampaignTargetNestedInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  progress?: InputMaybe<UserCampaignTargetUpdateprogressInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserCampaignTargetNestedInput>;
};

export type UserCampaignTargetUpdateWithoutCampaignTargetInput = {
  campaign?: InputMaybe<CampaignUpdateOneRequiredWithoutUserCampaignTargetsNestedInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  progress?: InputMaybe<UserCampaignTargetUpdateprogressInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserCampaignTargetNestedInput>;
};

export type UserCampaignTargetUpdateWithoutUserInput = {
  campaign?: InputMaybe<CampaignUpdateOneRequiredWithoutUserCampaignTargetsNestedInput>;
  campaignTarget?: InputMaybe<CampaignTargetUpdateOneRequiredWithoutUserCampaignTargetNestedInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  progress?: InputMaybe<UserCampaignTargetUpdateprogressInput>;
  type?: InputMaybe<EnumCampaignTypeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UserCampaignTargetUpdateprogressInput = {
  push?: InputMaybe<Array<Scalars['Int']['input']>>;
  set?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type UserCampaignTargetUpsertWithWhereUniqueWithoutCampaignInput = {
  create: UserCampaignTargetCreateWithoutCampaignInput;
  update: UserCampaignTargetUpdateWithoutCampaignInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetUpsertWithWhereUniqueWithoutCampaignTargetInput = {
  create: UserCampaignTargetCreateWithoutCampaignTargetInput;
  update: UserCampaignTargetUpdateWithoutCampaignTargetInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetUpsertWithWhereUniqueWithoutUserInput = {
  create: UserCampaignTargetCreateWithoutUserInput;
  update: UserCampaignTargetUpdateWithoutUserInput;
  where: UserCampaignTargetWhereUniqueInput;
};

export type UserCampaignTargetUserIdCampaignTargetIdCompoundUniqueInput = {
  campaignTargetId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type UserCampaignTargetWhereInput = {
  AND?: InputMaybe<Array<UserCampaignTargetWhereInput>>;
  NOT?: InputMaybe<Array<UserCampaignTargetWhereInput>>;
  OR?: InputMaybe<Array<UserCampaignTargetWhereInput>>;
  campaign?: InputMaybe<CampaignRelationFilter>;
  campaignId?: InputMaybe<UuidFilter>;
  campaignTarget?: InputMaybe<CampaignTargetRelationFilter>;
  campaignTargetId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  progress?: InputMaybe<IntNullableListFilter>;
  type?: InputMaybe<EnumCampaignTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserCampaignTargetWhereUniqueInput = {
  AND?: InputMaybe<Array<UserCampaignTargetWhereInput>>;
  NOT?: InputMaybe<Array<UserCampaignTargetWhereInput>>;
  OR?: InputMaybe<Array<UserCampaignTargetWhereInput>>;
  campaign?: InputMaybe<CampaignRelationFilter>;
  campaignId?: InputMaybe<UuidFilter>;
  campaignTarget?: InputMaybe<CampaignTargetRelationFilter>;
  campaignTargetId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  progress?: InputMaybe<IntNullableListFilter>;
  type?: InputMaybe<EnumCampaignTypeFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
  userId_campaignTargetId?: InputMaybe<UserCampaignTargetUserIdCampaignTargetIdCompoundUniqueInput>;
};

export type UserCampaignUpdateManyMutationInput = {
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UserCampaignUpdateManyWithWhereWithoutCampaignInput = {
  data: UserCampaignUpdateManyMutationInput;
  where: UserCampaignScalarWhereInput;
};

export type UserCampaignUpdateManyWithWhereWithoutUserInput = {
  data: UserCampaignUpdateManyMutationInput;
  where: UserCampaignScalarWhereInput;
};

export type UserCampaignUpdateManyWithoutCampaignNestedInput = {
  connect?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignCreateOrConnectWithoutCampaignInput>>;
  create?: InputMaybe<Array<UserCampaignCreateWithoutCampaignInput>>;
  createMany?: InputMaybe<UserCampaignCreateManyCampaignInputEnvelope>;
  delete?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCampaignScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCampaignUpdateWithWhereUniqueWithoutCampaignInput>>;
  updateMany?: InputMaybe<Array<UserCampaignUpdateManyWithWhereWithoutCampaignInput>>;
  upsert?: InputMaybe<Array<UserCampaignUpsertWithWhereUniqueWithoutCampaignInput>>;
};

export type UserCampaignUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCampaignCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserCampaignCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserCampaignCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCampaignScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCampaignWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCampaignUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserCampaignUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserCampaignUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserCampaignUpdateWithWhereUniqueWithoutCampaignInput = {
  data: UserCampaignUpdateWithoutCampaignInput;
  where: UserCampaignWhereUniqueInput;
};

export type UserCampaignUpdateWithWhereUniqueWithoutUserInput = {
  data: UserCampaignUpdateWithoutUserInput;
  where: UserCampaignWhereUniqueInput;
};

export type UserCampaignUpdateWithoutCampaignInput = {
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserCampaignNestedInput>;
};

export type UserCampaignUpdateWithoutUserInput = {
  campaign?: InputMaybe<CampaignUpdateOneRequiredWithoutUserCampaignsNestedInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  completed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UserCampaignUpsertWithWhereUniqueWithoutCampaignInput = {
  create: UserCampaignCreateWithoutCampaignInput;
  update: UserCampaignUpdateWithoutCampaignInput;
  where: UserCampaignWhereUniqueInput;
};

export type UserCampaignUpsertWithWhereUniqueWithoutUserInput = {
  create: UserCampaignCreateWithoutUserInput;
  update: UserCampaignUpdateWithoutUserInput;
  where: UserCampaignWhereUniqueInput;
};

export type UserCampaignUserIdCampaignIdCompoundUniqueInput = {
  campaignId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type UserCampaignWhereInput = {
  AND?: InputMaybe<Array<UserCampaignWhereInput>>;
  NOT?: InputMaybe<Array<UserCampaignWhereInput>>;
  OR?: InputMaybe<Array<UserCampaignWhereInput>>;
  campaign?: InputMaybe<CampaignRelationFilter>;
  campaignId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  target?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserCampaignWhereUniqueInput = {
  AND?: InputMaybe<Array<UserCampaignWhereInput>>;
  NOT?: InputMaybe<Array<UserCampaignWhereInput>>;
  OR?: InputMaybe<Array<UserCampaignWhereInput>>;
  campaign?: InputMaybe<CampaignRelationFilter>;
  campaignId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  completed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  target?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
  userId_campaignId?: InputMaybe<UserCampaignUserIdCampaignIdCompoundUniqueInput>;
};

export type UserCertification = {
  __typename?: 'UserCertification';
  certificateId?: Maybe<Scalars['Int']['output']>;
  certificateImage?: Maybe<Scalars['String']['output']>;
  certificateTime?: Maybe<Scalars['DateTime']['output']>;
  certification: Certification;
  certificationId: Scalars['String']['output'];
  claimed: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  mint: Scalars['Boolean']['output'];
  txId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  userProfile: UserProfile;
  username?: Maybe<Scalars['String']['output']>;
};

export type UserCertificationAvgAggregate = {
  __typename?: 'UserCertificationAvgAggregate';
  certificateId?: Maybe<Scalars['Float']['output']>;
};

export type UserCertificationCountAggregate = {
  __typename?: 'UserCertificationCountAggregate';
  _all: Scalars['Int']['output'];
  certificateId: Scalars['Int']['output'];
  certificateImage: Scalars['Int']['output'];
  certificateTime: Scalars['Int']['output'];
  certificationId: Scalars['Int']['output'];
  claimed: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  mint: Scalars['Int']['output'];
  txId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
  username: Scalars['Int']['output'];
};

export type UserCertificationCreateManyCertificationInput = {
  certificateId?: InputMaybe<Scalars['Int']['input']>;
  certificateImage?: InputMaybe<Scalars['String']['input']>;
  certificateTime?: InputMaybe<Scalars['DateTime']['input']>;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  mint?: InputMaybe<Scalars['Boolean']['input']>;
  txId?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
  username?: InputMaybe<Scalars['String']['input']>;
};

export type UserCertificationCreateManyCertificationInputEnvelope = {
  data: Array<UserCertificationCreateManyCertificationInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCertificationCreateManyUserProfileInput = {
  certificateId?: InputMaybe<Scalars['Int']['input']>;
  certificateImage?: InputMaybe<Scalars['String']['input']>;
  certificateTime?: InputMaybe<Scalars['DateTime']['input']>;
  certificationId: Scalars['String']['input'];
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  mint?: InputMaybe<Scalars['Boolean']['input']>;
  txId?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type UserCertificationCreateManyUserProfileInputEnvelope = {
  data: Array<UserCertificationCreateManyUserProfileInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCertificationCreateNestedManyWithoutCertificationInput = {
  connect?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCertificationCreateOrConnectWithoutCertificationInput>>;
  create?: InputMaybe<Array<UserCertificationCreateWithoutCertificationInput>>;
  createMany?: InputMaybe<UserCertificationCreateManyCertificationInputEnvelope>;
};

export type UserCertificationCreateNestedManyWithoutUserProfileInput = {
  connect?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCertificationCreateOrConnectWithoutUserProfileInput>>;
  create?: InputMaybe<Array<UserCertificationCreateWithoutUserProfileInput>>;
  createMany?: InputMaybe<UserCertificationCreateManyUserProfileInputEnvelope>;
};

export type UserCertificationCreateOrConnectWithoutCertificationInput = {
  create: UserCertificationCreateWithoutCertificationInput;
  where: UserCertificationWhereUniqueInput;
};

export type UserCertificationCreateOrConnectWithoutUserProfileInput = {
  create: UserCertificationCreateWithoutUserProfileInput;
  where: UserCertificationWhereUniqueInput;
};

export type UserCertificationCreateWithoutCertificationInput = {
  certificateId?: InputMaybe<Scalars['Int']['input']>;
  certificateImage?: InputMaybe<Scalars['String']['input']>;
  certificateTime?: InputMaybe<Scalars['DateTime']['input']>;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  mint?: InputMaybe<Scalars['Boolean']['input']>;
  txId?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userProfile: UserProfileCreateNestedOneWithoutUserCertificationsInput;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type UserCertificationCreateWithoutUserProfileInput = {
  certificateId?: InputMaybe<Scalars['Int']['input']>;
  certificateImage?: InputMaybe<Scalars['String']['input']>;
  certificateTime?: InputMaybe<Scalars['DateTime']['input']>;
  certification: CertificationCreateNestedOneWithoutUserCertificationInput;
  claimed?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  mint?: InputMaybe<Scalars['Boolean']['input']>;
  txId?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
};

export type UserCertificationExtend = {
  __typename?: 'UserCertificationExtend';
  certificateId?: Maybe<Scalars['Int']['output']>;
  certificateImage?: Maybe<Scalars['String']['output']>;
  certificateTime?: Maybe<Scalars['DateTime']['output']>;
  certification: Certification;
  certificationId: Scalars['String']['output'];
  claimed: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  mint: Scalars['Boolean']['output'];
  signatureId: Scalars['String']['output'];
  template: Scalars['String']['output'];
  txId?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  userProfile: UserProfile;
  username?: Maybe<Scalars['String']['output']>;
};

export type UserCertificationListRelationFilter = {
  every?: InputMaybe<UserCertificationWhereInput>;
  none?: InputMaybe<UserCertificationWhereInput>;
  some?: InputMaybe<UserCertificationWhereInput>;
};

export type UserCertificationMaxAggregate = {
  __typename?: 'UserCertificationMaxAggregate';
  certificateId?: Maybe<Scalars['Int']['output']>;
  certificateImage?: Maybe<Scalars['String']['output']>;
  certificateTime?: Maybe<Scalars['DateTime']['output']>;
  certificationId?: Maybe<Scalars['String']['output']>;
  claimed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  mint?: Maybe<Scalars['Boolean']['output']>;
  txId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  username?: Maybe<Scalars['String']['output']>;
};

export type UserCertificationMinAggregate = {
  __typename?: 'UserCertificationMinAggregate';
  certificateId?: Maybe<Scalars['Int']['output']>;
  certificateImage?: Maybe<Scalars['String']['output']>;
  certificateTime?: Maybe<Scalars['DateTime']['output']>;
  certificationId?: Maybe<Scalars['String']['output']>;
  claimed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  mint?: Maybe<Scalars['Boolean']['output']>;
  txId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
  username?: Maybe<Scalars['String']['output']>;
};

export type UserCertificationOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserCertificationScalarWhereInput = {
  AND?: InputMaybe<Array<UserCertificationScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserCertificationScalarWhereInput>>;
  OR?: InputMaybe<Array<UserCertificationScalarWhereInput>>;
  certificateId?: InputMaybe<IntNullableFilter>;
  certificateImage?: InputMaybe<StringNullableFilter>;
  certificateTime?: InputMaybe<DateTimeNullableFilter>;
  certificationId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  mint?: InputMaybe<BoolFilter>;
  txId?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  username?: InputMaybe<StringNullableFilter>;
};

export type UserCertificationSumAggregate = {
  __typename?: 'UserCertificationSumAggregate';
  certificateId?: Maybe<Scalars['Int']['output']>;
};

export type UserCertificationUpdateManyMutationInput = {
  certificateId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  certificateImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  certificateTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  mint?: InputMaybe<BoolFieldUpdateOperationsInput>;
  txId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type UserCertificationUpdateManyWithWhereWithoutCertificationInput = {
  data: UserCertificationUpdateManyMutationInput;
  where: UserCertificationScalarWhereInput;
};

export type UserCertificationUpdateManyWithWhereWithoutUserProfileInput = {
  data: UserCertificationUpdateManyMutationInput;
  where: UserCertificationScalarWhereInput;
};

export type UserCertificationUpdateManyWithoutCertificationNestedInput = {
  connect?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCertificationCreateOrConnectWithoutCertificationInput>>;
  create?: InputMaybe<Array<UserCertificationCreateWithoutCertificationInput>>;
  createMany?: InputMaybe<UserCertificationCreateManyCertificationInputEnvelope>;
  delete?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCertificationScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCertificationUpdateWithWhereUniqueWithoutCertificationInput>>;
  updateMany?: InputMaybe<Array<UserCertificationUpdateManyWithWhereWithoutCertificationInput>>;
  upsert?: InputMaybe<Array<UserCertificationUpsertWithWhereUniqueWithoutCertificationInput>>;
};

export type UserCertificationUpdateManyWithoutUserProfileNestedInput = {
  connect?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserCertificationCreateOrConnectWithoutUserProfileInput>>;
  create?: InputMaybe<Array<UserCertificationCreateWithoutUserProfileInput>>;
  createMany?: InputMaybe<UserCertificationCreateManyUserProfileInputEnvelope>;
  delete?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserCertificationScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  set?: InputMaybe<Array<UserCertificationWhereUniqueInput>>;
  update?: InputMaybe<Array<UserCertificationUpdateWithWhereUniqueWithoutUserProfileInput>>;
  updateMany?: InputMaybe<Array<UserCertificationUpdateManyWithWhereWithoutUserProfileInput>>;
  upsert?: InputMaybe<Array<UserCertificationUpsertWithWhereUniqueWithoutUserProfileInput>>;
};

export type UserCertificationUpdateWithWhereUniqueWithoutCertificationInput = {
  data: UserCertificationUpdateWithoutCertificationInput;
  where: UserCertificationWhereUniqueInput;
};

export type UserCertificationUpdateWithWhereUniqueWithoutUserProfileInput = {
  data: UserCertificationUpdateWithoutUserProfileInput;
  where: UserCertificationWhereUniqueInput;
};

export type UserCertificationUpdateWithoutCertificationInput = {
  certificateId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  certificateImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  certificateTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  mint?: InputMaybe<BoolFieldUpdateOperationsInput>;
  txId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneRequiredWithoutUserCertificationsNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type UserCertificationUpdateWithoutUserProfileInput = {
  certificateId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  certificateImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  certificateTime?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  certification?: InputMaybe<CertificationUpdateOneRequiredWithoutUserCertificationNestedInput>;
  claimed?: InputMaybe<BoolFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  mint?: InputMaybe<BoolFieldUpdateOperationsInput>;
  txId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type UserCertificationUpsertWithWhereUniqueWithoutCertificationInput = {
  create: UserCertificationCreateWithoutCertificationInput;
  update: UserCertificationUpdateWithoutCertificationInput;
  where: UserCertificationWhereUniqueInput;
};

export type UserCertificationUpsertWithWhereUniqueWithoutUserProfileInput = {
  create: UserCertificationCreateWithoutUserProfileInput;
  update: UserCertificationUpdateWithoutUserProfileInput;
  where: UserCertificationWhereUniqueInput;
};

export type UserCertificationUserIdCertificationIdCompoundUniqueInput = {
  certificationId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type UserCertificationWhereInput = {
  AND?: InputMaybe<Array<UserCertificationWhereInput>>;
  NOT?: InputMaybe<Array<UserCertificationWhereInput>>;
  OR?: InputMaybe<Array<UserCertificationWhereInput>>;
  certificateId?: InputMaybe<IntNullableFilter>;
  certificateImage?: InputMaybe<StringNullableFilter>;
  certificateTime?: InputMaybe<DateTimeNullableFilter>;
  certification?: InputMaybe<CertificationRelationFilter>;
  certificationId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  mint?: InputMaybe<BoolFilter>;
  txId?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  userProfile?: InputMaybe<UserProfileRelationFilter>;
  username?: InputMaybe<StringNullableFilter>;
};

export type UserCertificationWhereUniqueInput = {
  AND?: InputMaybe<Array<UserCertificationWhereInput>>;
  NOT?: InputMaybe<Array<UserCertificationWhereInput>>;
  OR?: InputMaybe<Array<UserCertificationWhereInput>>;
  certificateId?: InputMaybe<Scalars['Int']['input']>;
  certificateImage?: InputMaybe<StringNullableFilter>;
  certificateTime?: InputMaybe<DateTimeNullableFilter>;
  certification?: InputMaybe<CertificationRelationFilter>;
  certificationId?: InputMaybe<UuidFilter>;
  claimed?: InputMaybe<BoolFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  mint?: InputMaybe<BoolFilter>;
  txId?: InputMaybe<StringNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  userId_certificationId?: InputMaybe<UserCertificationUserIdCertificationIdCompoundUniqueInput>;
  userProfile?: InputMaybe<UserProfileRelationFilter>;
  username?: InputMaybe<StringNullableFilter>;
};

export type UserClaimFaucetRecord = {
  __typename?: 'UserClaimFaucetRecord';
  amount: Scalars['Decimal']['output'];
  claimTime: Scalars['DateTime']['output'];
  exportUrl: Scalars['String']['output'];
  faucetId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  userId: Scalars['String']['output'];
};

export type UserClaimFaucetRecordAvgAggregate = {
  __typename?: 'UserClaimFaucetRecordAvgAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
};

export type UserClaimFaucetRecordAvgAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserClaimFaucetRecordAvgOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
};

export type UserClaimFaucetRecordCountAggregate = {
  __typename?: 'UserClaimFaucetRecordCountAggregate';
  _all: Scalars['Int']['output'];
  amount: Scalars['Int']['output'];
  claimTime: Scalars['Int']['output'];
  exportUrl: Scalars['Int']['output'];
  faucetId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserClaimFaucetRecordCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  claimTime?: InputMaybe<Scalars['Boolean']['input']>;
  exportUrl?: InputMaybe<Scalars['Boolean']['input']>;
  faucetId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserClaimFaucetRecordCountOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  claimTime?: InputMaybe<SortOrder>;
  exportUrl?: InputMaybe<SortOrder>;
  faucetId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type UserClaimFaucetRecordCreateInput = {
  amount: Scalars['Decimal']['input'];
  claimTime?: InputMaybe<Scalars['DateTime']['input']>;
  exportUrl: Scalars['String']['input'];
  faucetId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['String']['input'];
};

export type UserClaimFaucetRecordCreateManyInput = {
  amount: Scalars['Decimal']['input'];
  claimTime?: InputMaybe<Scalars['DateTime']['input']>;
  exportUrl: Scalars['String']['input'];
  faucetId: Scalars['String']['input'];
  id?: InputMaybe<Scalars['String']['input']>;
  userId: Scalars['String']['input'];
};

export type UserClaimFaucetRecordGroupBy = {
  __typename?: 'UserClaimFaucetRecordGroupBy';
  _avg?: Maybe<UserClaimFaucetRecordAvgAggregate>;
  _count?: Maybe<UserClaimFaucetRecordCountAggregate>;
  _max?: Maybe<UserClaimFaucetRecordMaxAggregate>;
  _min?: Maybe<UserClaimFaucetRecordMinAggregate>;
  _sum?: Maybe<UserClaimFaucetRecordSumAggregate>;
  amount: Scalars['Decimal']['output'];
  claimTime: Scalars['DateTime']['output'];
  exportUrl: Scalars['String']['output'];
  faucetId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  userId: Scalars['String']['output'];
};

export type UserClaimFaucetRecordListPaginated = {
  __typename?: 'UserClaimFaucetRecordListPaginated';
  data?: Maybe<Array<UserClaimFaucetRecord>>;
  total: Scalars['Int']['output'];
};

export type UserClaimFaucetRecordMaxAggregate = {
  __typename?: 'UserClaimFaucetRecordMaxAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
  claimTime?: Maybe<Scalars['DateTime']['output']>;
  exportUrl?: Maybe<Scalars['String']['output']>;
  faucetId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserClaimFaucetRecordMaxAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  claimTime?: InputMaybe<Scalars['Boolean']['input']>;
  exportUrl?: InputMaybe<Scalars['Boolean']['input']>;
  faucetId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserClaimFaucetRecordMaxOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  claimTime?: InputMaybe<SortOrder>;
  exportUrl?: InputMaybe<SortOrder>;
  faucetId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type UserClaimFaucetRecordMinAggregate = {
  __typename?: 'UserClaimFaucetRecordMinAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
  claimTime?: Maybe<Scalars['DateTime']['output']>;
  exportUrl?: Maybe<Scalars['String']['output']>;
  faucetId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserClaimFaucetRecordMinAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
  claimTime?: InputMaybe<Scalars['Boolean']['input']>;
  exportUrl?: InputMaybe<Scalars['Boolean']['input']>;
  faucetId?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  userId?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserClaimFaucetRecordMinOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
  claimTime?: InputMaybe<SortOrder>;
  exportUrl?: InputMaybe<SortOrder>;
  faucetId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type UserClaimFaucetRecordOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserClaimFaucetRecordAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserClaimFaucetRecordCountOrderByAggregateInput>;
  _max?: InputMaybe<UserClaimFaucetRecordMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserClaimFaucetRecordMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserClaimFaucetRecordSumOrderByAggregateInput>;
  amount?: InputMaybe<SortOrder>;
  claimTime?: InputMaybe<SortOrder>;
  exportUrl?: InputMaybe<SortOrder>;
  faucetId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export type UserClaimFaucetRecordOrderByWithRelationInput = {
  amount?: InputMaybe<SortOrder>;
  claimTime?: InputMaybe<SortOrder>;
  exportUrl?: InputMaybe<SortOrder>;
  faucetId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userId?: InputMaybe<SortOrder>;
};

export enum UserClaimFaucetRecordScalarFieldEnum {
  Amount = 'amount',
  ClaimTime = 'claimTime',
  ExportUrl = 'exportUrl',
  FaucetId = 'faucetId',
  Id = 'id',
  UserId = 'userId'
}

export type UserClaimFaucetRecordScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserClaimFaucetRecordScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserClaimFaucetRecordScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserClaimFaucetRecordScalarWhereWithAggregatesInput>>;
  amount?: InputMaybe<DecimalWithAggregatesFilter>;
  claimTime?: InputMaybe<DateTimeWithAggregatesFilter>;
  exportUrl?: InputMaybe<StringWithAggregatesFilter>;
  faucetId?: InputMaybe<UuidWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  userId?: InputMaybe<UuidWithAggregatesFilter>;
};

export type UserClaimFaucetRecordSumAggregate = {
  __typename?: 'UserClaimFaucetRecordSumAggregate';
  amount?: Maybe<Scalars['Decimal']['output']>;
};

export type UserClaimFaucetRecordSumAggregateInput = {
  amount?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserClaimFaucetRecordSumOrderByAggregateInput = {
  amount?: InputMaybe<SortOrder>;
};

export type UserClaimFaucetRecordUpdateInput = {
  amount?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  claimTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  exportUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  faucetId?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserClaimFaucetRecordUpdateManyMutationInput = {
  amount?: InputMaybe<DecimalFieldUpdateOperationsInput>;
  claimTime?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  exportUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  faucetId?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserClaimFaucetRecordWhereInput = {
  AND?: InputMaybe<Array<UserClaimFaucetRecordWhereInput>>;
  NOT?: InputMaybe<Array<UserClaimFaucetRecordWhereInput>>;
  OR?: InputMaybe<Array<UserClaimFaucetRecordWhereInput>>;
  amount?: InputMaybe<DecimalFilter>;
  claimTime?: InputMaybe<DateTimeFilter>;
  exportUrl?: InputMaybe<StringFilter>;
  faucetId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<UuidFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserClaimFaucetRecordWhereUniqueInput = {
  AND?: InputMaybe<Array<UserClaimFaucetRecordWhereInput>>;
  NOT?: InputMaybe<Array<UserClaimFaucetRecordWhereInput>>;
  OR?: InputMaybe<Array<UserClaimFaucetRecordWhereInput>>;
  amount?: InputMaybe<DecimalFilter>;
  claimTime?: InputMaybe<DateTimeFilter>;
  exportUrl?: InputMaybe<StringFilter>;
  faucetId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserCount = {
  __typename?: 'UserCount';
  ideaBank: Scalars['Int']['output'];
  thirdUser: Scalars['Int']['output'];
  treasures: Scalars['Int']['output'];
  userCampaign: Scalars['Int']['output'];
  userCampaignTarget: Scalars['Int']['output'];
  userResume: Scalars['Int']['output'];
};

export type UserCountAggregate = {
  __typename?: 'UserCountAggregate';
  _all: Scalars['Int']['output'];
  avatar: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  email: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  inviteCode: Scalars['Int']['output'];
  invitedBy: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  nickname: Scalars['Int']['output'];
  organizationId: Scalars['Int']['output'];
  registerType: Scalars['Int']['output'];
  role: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  uid: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  username: Scalars['Int']['output'];
  voteRole: Scalars['Int']['output'];
};

export type UserCountAggregateInput = {
  _all?: InputMaybe<Scalars['Boolean']['input']>;
  avatar?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  inviteCode?: InputMaybe<Scalars['Boolean']['input']>;
  invitedBy?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  nickname?: InputMaybe<Scalars['Boolean']['input']>;
  organizationId?: InputMaybe<Scalars['Boolean']['input']>;
  password?: InputMaybe<Scalars['Boolean']['input']>;
  registerType?: InputMaybe<Scalars['Boolean']['input']>;
  role?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  uid?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['Boolean']['input']>;
  voteRole?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserCountOrderByAggregateInput = {
  avatar?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  inviteCode?: InputMaybe<SortOrder>;
  invitedBy?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickname?: InputMaybe<SortOrder>;
  organizationId?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  registerType?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  uid?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  username?: InputMaybe<SortOrder>;
  voteRole?: InputMaybe<SortOrder>;
};

export type UserCreateManyInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  status?: InputMaybe<UserStatus>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserCreateNestedOneWithoutIdeaBankInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutIdeaBankInput>;
  create?: InputMaybe<UserCreateWithoutIdeaBankInput>;
};

export type UserCreateNestedOneWithoutThirdUserInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutThirdUserInput>;
  create?: InputMaybe<UserCreateWithoutThirdUserInput>;
};

export type UserCreateNestedOneWithoutTreasuresInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutTreasuresInput>;
  create?: InputMaybe<UserCreateWithoutTreasuresInput>;
};

export type UserCreateNestedOneWithoutUserCampaignInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserCampaignInput>;
  create?: InputMaybe<UserCreateWithoutUserCampaignInput>;
};

export type UserCreateNestedOneWithoutUserCampaignTargetInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserCampaignTargetInput>;
  create?: InputMaybe<UserCreateWithoutUserCampaignTargetInput>;
};

export type UserCreateNestedOneWithoutUserProfileInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserProfileInput>;
  create?: InputMaybe<UserCreateWithoutUserProfileInput>;
};

export type UserCreateOrConnectWithoutIdeaBankInput = {
  create: UserCreateWithoutIdeaBankInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutThirdUserInput = {
  create: UserCreateWithoutThirdUserInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutTreasuresInput = {
  create: UserCreateWithoutTreasuresInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserCampaignInput = {
  create: UserCreateWithoutUserCampaignInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserCampaignTargetInput = {
  create: UserCreateWithoutUserCampaignTargetInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserProfileInput = {
  create: UserCreateWithoutUserProfileInput;
  where: UserWhereUniqueInput;
};

export type UserCreateWithoutIdeaBankInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinCreateNestedOneWithoutUserInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  levelInfo?: InputMaybe<UserLevelCreateNestedOneWithoutUserInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  settings?: InputMaybe<UserSettingsCreateNestedOneWithoutUserInput>;
  status?: InputMaybe<UserStatus>;
  thirdUser?: InputMaybe<ThirdUserCreateNestedManyWithoutUserInput>;
  treasures?: InputMaybe<TreasureCreateNestedManyWithoutUserInput>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCampaign?: InputMaybe<UserCampaignCreateNestedManyWithoutUserInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutUserInput>;
  userProfile?: InputMaybe<UserProfileCreateNestedOneWithoutUserInput>;
  userResume?: InputMaybe<UserResumeCreateNestedManyWithoutUserInput>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserCreateWithoutThirdUserInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinCreateNestedOneWithoutUserInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankCreateNestedManyWithoutUserInput>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  levelInfo?: InputMaybe<UserLevelCreateNestedOneWithoutUserInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  settings?: InputMaybe<UserSettingsCreateNestedOneWithoutUserInput>;
  status?: InputMaybe<UserStatus>;
  treasures?: InputMaybe<TreasureCreateNestedManyWithoutUserInput>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCampaign?: InputMaybe<UserCampaignCreateNestedManyWithoutUserInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutUserInput>;
  userProfile?: InputMaybe<UserProfileCreateNestedOneWithoutUserInput>;
  userResume?: InputMaybe<UserResumeCreateNestedManyWithoutUserInput>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserCreateWithoutTreasuresInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinCreateNestedOneWithoutUserInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankCreateNestedManyWithoutUserInput>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  levelInfo?: InputMaybe<UserLevelCreateNestedOneWithoutUserInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  settings?: InputMaybe<UserSettingsCreateNestedOneWithoutUserInput>;
  status?: InputMaybe<UserStatus>;
  thirdUser?: InputMaybe<ThirdUserCreateNestedManyWithoutUserInput>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCampaign?: InputMaybe<UserCampaignCreateNestedManyWithoutUserInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutUserInput>;
  userProfile?: InputMaybe<UserProfileCreateNestedOneWithoutUserInput>;
  userResume?: InputMaybe<UserResumeCreateNestedManyWithoutUserInput>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserCreateWithoutUserCampaignInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinCreateNestedOneWithoutUserInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankCreateNestedManyWithoutUserInput>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  levelInfo?: InputMaybe<UserLevelCreateNestedOneWithoutUserInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  settings?: InputMaybe<UserSettingsCreateNestedOneWithoutUserInput>;
  status?: InputMaybe<UserStatus>;
  thirdUser?: InputMaybe<ThirdUserCreateNestedManyWithoutUserInput>;
  treasures?: InputMaybe<TreasureCreateNestedManyWithoutUserInput>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutUserInput>;
  userProfile?: InputMaybe<UserProfileCreateNestedOneWithoutUserInput>;
  userResume?: InputMaybe<UserResumeCreateNestedManyWithoutUserInput>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserCreateWithoutUserCampaignTargetInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinCreateNestedOneWithoutUserInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankCreateNestedManyWithoutUserInput>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  levelInfo?: InputMaybe<UserLevelCreateNestedOneWithoutUserInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  settings?: InputMaybe<UserSettingsCreateNestedOneWithoutUserInput>;
  status?: InputMaybe<UserStatus>;
  thirdUser?: InputMaybe<ThirdUserCreateNestedManyWithoutUserInput>;
  treasures?: InputMaybe<TreasureCreateNestedManyWithoutUserInput>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCampaign?: InputMaybe<UserCampaignCreateNestedManyWithoutUserInput>;
  userProfile?: InputMaybe<UserProfileCreateNestedOneWithoutUserInput>;
  userResume?: InputMaybe<UserResumeCreateNestedManyWithoutUserInput>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserCreateWithoutUserProfileInput = {
  avatar: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinCreateNestedOneWithoutUserInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankCreateNestedManyWithoutUserInput>;
  inviteCode?: InputMaybe<Scalars['String']['input']>;
  invitedBy?: InputMaybe<Scalars['String']['input']>;
  levelInfo?: InputMaybe<UserLevelCreateNestedOneWithoutUserInput>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<Scalars['String']['input']>;
  organizationId?: InputMaybe<Scalars['String']['input']>;
  password: Scalars['String']['input'];
  registerType?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Role>;
  settings?: InputMaybe<UserSettingsCreateNestedOneWithoutUserInput>;
  status?: InputMaybe<UserStatus>;
  thirdUser?: InputMaybe<ThirdUserCreateNestedManyWithoutUserInput>;
  treasures?: InputMaybe<TreasureCreateNestedManyWithoutUserInput>;
  uid?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userCampaign?: InputMaybe<UserCampaignCreateNestedManyWithoutUserInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetCreateNestedManyWithoutUserInput>;
  userResume?: InputMaybe<UserResumeCreateNestedManyWithoutUserInput>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<VoteRole>;
};

export type UserEcosystemCountAggregate = {
  __typename?: 'UserEcosystemCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserEcosystemLevel = {
  __typename?: 'UserEcosystemLevel';
  basic: EcosystemLevel;
  createdAt: Scalars['DateTime']['output'];
  ecosystemId: Scalars['String']['output'];
  exp: Scalars['Int']['output'];
  levelId: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type UserEcosystemLevelAvgAggregate = {
  __typename?: 'UserEcosystemLevelAvgAggregate';
  exp?: Maybe<Scalars['Float']['output']>;
};

export type UserEcosystemLevelCountAggregate = {
  __typename?: 'UserEcosystemLevelCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  levelId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserEcosystemLevelMaxAggregate = {
  __typename?: 'UserEcosystemLevelMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  levelId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemLevelMinAggregate = {
  __typename?: 'UserEcosystemLevelMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  levelId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemLevelSumAggregate = {
  __typename?: 'UserEcosystemLevelSumAggregate';
  exp?: Maybe<Scalars['Int']['output']>;
};

export type UserEcosystemMaxAggregate = {
  __typename?: 'UserEcosystemMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  status?: Maybe<EcosystemStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemMinAggregate = {
  __typename?: 'UserEcosystemMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  status?: Maybe<EcosystemStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemPhaseCountAggregate = {
  __typename?: 'UserEcosystemPhaseCountAggregate';
  _all: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  lang: Scalars['Int']['output'];
  phaseId: Scalars['Int']['output'];
  phaseName: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserEcosystemPhaseMaxAggregate = {
  __typename?: 'UserEcosystemPhaseMaxAggregate';
  ecosystemId?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  phaseName?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemPhaseMinAggregate = {
  __typename?: 'UserEcosystemPhaseMinAggregate';
  ecosystemId?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  phaseName?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemTaskAvgAggregate = {
  __typename?: 'UserEcosystemTaskAvgAggregate';
  progress?: Maybe<Scalars['Float']['output']>;
};

export type UserEcosystemTaskCountAggregate = {
  __typename?: 'UserEcosystemTaskCountAggregate';
  _all: Scalars['Int']['output'];
  claimed: Scalars['Int']['output'];
  completed: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  ecosystemId: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  taskId: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserEcosystemTaskMaxAggregate = {
  __typename?: 'UserEcosystemTaskMaxAggregate';
  claimed?: Maybe<Scalars['Boolean']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  taskId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemTaskMinAggregate = {
  __typename?: 'UserEcosystemTaskMinAggregate';
  claimed?: Maybe<Scalars['Boolean']['output']>;
  completed?: Maybe<Scalars['Boolean']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  ecosystemId?: Maybe<Scalars['String']['output']>;
  taskId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserEcosystemTaskSumAggregate = {
  __typename?: 'UserEcosystemTaskSumAggregate';
  progress?: Maybe<Array<Scalars['Int']['output']>>;
};

export type UserExpLogAvgAggregate = {
  __typename?: 'UserExpLogAvgAggregate';
  exp?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type UserExpLogCountAggregate = {
  __typename?: 'UserExpLogCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  source: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserExpLogMaxAggregate = {
  __typename?: 'UserExpLogMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserExpLogMinAggregate = {
  __typename?: 'UserExpLogMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserExpLogSumAggregate = {
  __typename?: 'UserExpLogSumAggregate';
  exp?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type UserGroupBy = {
  __typename?: 'UserGroupBy';
  _avg?: Maybe<UserAvgAggregate>;
  _count?: Maybe<UserCountAggregate>;
  _max?: Maybe<UserMaxAggregate>;
  _min?: Maybe<UserMinAggregate>;
  _sum?: Maybe<UserSumAggregate>;
  avatar: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  email?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  inviteCode: Scalars['String']['output'];
  invitedBy?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  registerType: Scalars['String']['output'];
  role: Role;
  status: UserStatus;
  uid: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
  username?: Maybe<Scalars['String']['output']>;
  voteRole: VoteRole;
};

export type UserHackCoin = {
  __typename?: 'UserHackCoin';
  coin: Scalars['Int']['output'];
  createdAt: Scalars['DateTime']['output'];
  id: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user: User;
};

export type UserHackCoinAvgAggregate = {
  __typename?: 'UserHackCoinAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
};

export type UserHackCoinCountAggregate = {
  __typename?: 'UserHackCoinCountAggregate';
  _all: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type UserHackCoinCreateNestedOneWithoutUserInput = {
  connect?: InputMaybe<UserHackCoinWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserHackCoinCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserHackCoinCreateWithoutUserInput>;
};

export type UserHackCoinCreateOrConnectWithoutUserInput = {
  create: UserHackCoinCreateWithoutUserInput;
  where: UserHackCoinWhereUniqueInput;
};

export type UserHackCoinCreateWithoutUserInput = {
  coin?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UserHackCoinLogAvgAggregate = {
  __typename?: 'UserHackCoinLogAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type UserHackCoinLogCountAggregate = {
  __typename?: 'UserHackCoinLogCountAggregate';
  _all: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  source: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserHackCoinLogMaxAggregate = {
  __typename?: 'UserHackCoinLogMaxAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserHackCoinLogMinAggregate = {
  __typename?: 'UserHackCoinLogMinAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  source?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserHackCoinLogSumAggregate = {
  __typename?: 'UserHackCoinLogSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type UserHackCoinMaxAggregate = {
  __typename?: 'UserHackCoinMaxAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UserHackCoinMinAggregate = {
  __typename?: 'UserHackCoinMinAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UserHackCoinNullableRelationFilter = {
  is?: InputMaybe<UserHackCoinWhereInput>;
  isNot?: InputMaybe<UserHackCoinWhereInput>;
};

export type UserHackCoinOrderByWithRelationInput = {
  coin?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export type UserHackCoinSumAggregate = {
  __typename?: 'UserHackCoinSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
};

export type UserHackCoinUpdateOneWithoutUserNestedInput = {
  connect?: InputMaybe<UserHackCoinWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserHackCoinCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserHackCoinCreateWithoutUserInput>;
  delete?: InputMaybe<UserHackCoinWhereInput>;
  disconnect?: InputMaybe<UserHackCoinWhereInput>;
  update?: InputMaybe<UserHackCoinUpdateToOneWithWhereWithoutUserInput>;
  upsert?: InputMaybe<UserHackCoinUpsertWithoutUserInput>;
};

export type UserHackCoinUpdateToOneWithWhereWithoutUserInput = {
  data: UserHackCoinUpdateWithoutUserInput;
  where?: InputMaybe<UserHackCoinWhereInput>;
};

export type UserHackCoinUpdateWithoutUserInput = {
  coin?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UserHackCoinUpsertWithoutUserInput = {
  create: UserHackCoinCreateWithoutUserInput;
  update: UserHackCoinUpdateWithoutUserInput;
  where?: InputMaybe<UserHackCoinWhereInput>;
};

export type UserHackCoinWhereInput = {
  AND?: InputMaybe<Array<UserHackCoinWhereInput>>;
  NOT?: InputMaybe<Array<UserHackCoinWhereInput>>;
  OR?: InputMaybe<Array<UserHackCoinWhereInput>>;
  coin?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<UuidFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type UserHackCoinWhereUniqueInput = {
  AND?: InputMaybe<Array<UserHackCoinWhereInput>>;
  NOT?: InputMaybe<Array<UserHackCoinWhereInput>>;
  OR?: InputMaybe<Array<UserHackCoinWhereInput>>;
  coin?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type UserHackathonTodo = {
  __typename?: 'UserHackathonTodo';
  createdAt: Scalars['DateTime']['output'];
  hackathonTodo: HackathonTodo;
  hackathonTodoId: Scalars['String']['output'];
  id: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
};

export type UserHackathonTodoCountAggregate = {
  __typename?: 'UserHackathonTodoCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  hackathonTodoId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserHackathonTodoCreateManyHackathonTodoInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type UserHackathonTodoCreateManyHackathonTodoInputEnvelope = {
  data: Array<UserHackathonTodoCreateManyHackathonTodoInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserHackathonTodoCreateNestedManyWithoutHackathonTodoInput = {
  connect?: InputMaybe<Array<UserHackathonTodoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserHackathonTodoCreateOrConnectWithoutHackathonTodoInput>>;
  create?: InputMaybe<Array<UserHackathonTodoCreateWithoutHackathonTodoInput>>;
  createMany?: InputMaybe<UserHackathonTodoCreateManyHackathonTodoInputEnvelope>;
};

export type UserHackathonTodoCreateOrConnectWithoutHackathonTodoInput = {
  create: UserHackathonTodoCreateWithoutHackathonTodoInput;
  where: UserHackathonTodoWhereUniqueInput;
};

export type UserHackathonTodoCreateWithoutHackathonTodoInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
  userId: Scalars['String']['input'];
};

export type UserHackathonTodoListRelationFilter = {
  every?: InputMaybe<UserHackathonTodoWhereInput>;
  none?: InputMaybe<UserHackathonTodoWhereInput>;
  some?: InputMaybe<UserHackathonTodoWhereInput>;
};

export type UserHackathonTodoMaxAggregate = {
  __typename?: 'UserHackathonTodoMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonTodoId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserHackathonTodoMinAggregate = {
  __typename?: 'UserHackathonTodoMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  hackathonTodoId?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserHackathonTodoScalarWhereInput = {
  AND?: InputMaybe<Array<UserHackathonTodoScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserHackathonTodoScalarWhereInput>>;
  OR?: InputMaybe<Array<UserHackathonTodoScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonTodoId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<UuidFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserHackathonTodoUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserHackathonTodoUpdateManyWithWhereWithoutHackathonTodoInput = {
  data: UserHackathonTodoUpdateManyMutationInput;
  where: UserHackathonTodoScalarWhereInput;
};

export type UserHackathonTodoUpdateManyWithoutHackathonTodoNestedInput = {
  connect?: InputMaybe<Array<UserHackathonTodoWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserHackathonTodoCreateOrConnectWithoutHackathonTodoInput>>;
  create?: InputMaybe<Array<UserHackathonTodoCreateWithoutHackathonTodoInput>>;
  createMany?: InputMaybe<UserHackathonTodoCreateManyHackathonTodoInputEnvelope>;
  delete?: InputMaybe<Array<UserHackathonTodoWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserHackathonTodoScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserHackathonTodoWhereUniqueInput>>;
  set?: InputMaybe<Array<UserHackathonTodoWhereUniqueInput>>;
  update?: InputMaybe<Array<UserHackathonTodoUpdateWithWhereUniqueWithoutHackathonTodoInput>>;
  updateMany?: InputMaybe<Array<UserHackathonTodoUpdateManyWithWhereWithoutHackathonTodoInput>>;
  upsert?: InputMaybe<Array<UserHackathonTodoUpsertWithWhereUniqueWithoutHackathonTodoInput>>;
};

export type UserHackathonTodoUpdateWithWhereUniqueWithoutHackathonTodoInput = {
  data: UserHackathonTodoUpdateWithoutHackathonTodoInput;
  where: UserHackathonTodoWhereUniqueInput;
};

export type UserHackathonTodoUpdateWithoutHackathonTodoInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserHackathonTodoUpsertWithWhereUniqueWithoutHackathonTodoInput = {
  create: UserHackathonTodoCreateWithoutHackathonTodoInput;
  update: UserHackathonTodoUpdateWithoutHackathonTodoInput;
  where: UserHackathonTodoWhereUniqueInput;
};

export type UserHackathonTodoWhereInput = {
  AND?: InputMaybe<Array<UserHackathonTodoWhereInput>>;
  NOT?: InputMaybe<Array<UserHackathonTodoWhereInput>>;
  OR?: InputMaybe<Array<UserHackathonTodoWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonTodo?: InputMaybe<HackathonTodoRelationFilter>;
  hackathonTodoId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<UuidFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserHackathonTodoWhereUniqueInput = {
  AND?: InputMaybe<Array<UserHackathonTodoWhereInput>>;
  NOT?: InputMaybe<Array<UserHackathonTodoWhereInput>>;
  OR?: InputMaybe<Array<UserHackathonTodoWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  hackathonTodo?: InputMaybe<HackathonTodoRelationFilter>;
  hackathonTodoId?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export enum UserJudgeType {
  Builder = 'Builder',
  EvmDeveloper = 'EVM_Developer',
  HackathoneWinner = 'Hackathone_Winner',
  MantleDeveloper = 'Mantle_Developer',
  SeniorTeamLeader = 'Senior_Team_Leader',
  SeniorUsers = 'Senior_Users',
  SonalaDeveloper = 'Sonala_Developer',
  SuiDeveloper = 'Sui_Developer',
  VaraDevelope = 'Vara_Develope'
}

export type UserLearningTrackCountAggregate = {
  __typename?: 'UserLearningTrackCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  learningTrackId: Scalars['Int']['output'];
  sections: Scalars['Int']['output'];
  status: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserLearningTrackMaxAggregate = {
  __typename?: 'UserLearningTrackMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  learningTrackId?: Maybe<Scalars['String']['output']>;
  status?: Maybe<LearningTrackStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserLearningTrackMinAggregate = {
  __typename?: 'UserLearningTrackMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  learningTrackId?: Maybe<Scalars['String']['output']>;
  status?: Maybe<LearningTrackStatus>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserLevel = {
  __typename?: 'UserLevel';
  createdAt: Scalars['DateTime']['output'];
  exp: Scalars['Int']['output'];
  expNextLevel: Scalars['Int']['output'];
  id: Scalars['String']['output'];
  level: Scalars['Int']['output'];
  updatedAt: Scalars['DateTime']['output'];
  user: User;
};

export type UserLevelAvgAggregate = {
  __typename?: 'UserLevelAvgAggregate';
  exp?: Maybe<Scalars['Float']['output']>;
  expNextLevel?: Maybe<Scalars['Float']['output']>;
  level?: Maybe<Scalars['Float']['output']>;
};

export type UserLevelCountAggregate = {
  __typename?: 'UserLevelCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  exp: Scalars['Int']['output'];
  expNextLevel: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  level: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type UserLevelCreateNestedOneWithoutUserInput = {
  connect?: InputMaybe<UserLevelWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserLevelCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserLevelCreateWithoutUserInput>;
};

export type UserLevelCreateOrConnectWithoutUserInput = {
  create: UserLevelCreateWithoutUserInput;
  where: UserLevelWhereUniqueInput;
};

export type UserLevelCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  exp?: InputMaybe<Scalars['Int']['input']>;
  expNextLevel?: InputMaybe<Scalars['Int']['input']>;
  level?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type UserLevelMaxAggregate = {
  __typename?: 'UserLevelMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  expNextLevel?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UserLevelMinAggregate = {
  __typename?: 'UserLevelMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  exp?: Maybe<Scalars['Int']['output']>;
  expNextLevel?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
};

export type UserLevelNullableRelationFilter = {
  is?: InputMaybe<UserLevelWhereInput>;
  isNot?: InputMaybe<UserLevelWhereInput>;
};

export type UserLevelOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  exp?: InputMaybe<SortOrder>;
  expNextLevel?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  level?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export type UserLevelSumAggregate = {
  __typename?: 'UserLevelSumAggregate';
  exp?: Maybe<Scalars['Int']['output']>;
  expNextLevel?: Maybe<Scalars['Int']['output']>;
  level?: Maybe<Scalars['Int']['output']>;
};

export type UserLevelUpdateOneWithoutUserNestedInput = {
  connect?: InputMaybe<UserLevelWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserLevelCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserLevelCreateWithoutUserInput>;
  delete?: InputMaybe<UserLevelWhereInput>;
  disconnect?: InputMaybe<UserLevelWhereInput>;
  update?: InputMaybe<UserLevelUpdateToOneWithWhereWithoutUserInput>;
  upsert?: InputMaybe<UserLevelUpsertWithoutUserInput>;
};

export type UserLevelUpdateToOneWithWhereWithoutUserInput = {
  data: UserLevelUpdateWithoutUserInput;
  where?: InputMaybe<UserLevelWhereInput>;
};

export type UserLevelUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  exp?: InputMaybe<IntFieldUpdateOperationsInput>;
  expNextLevel?: InputMaybe<IntFieldUpdateOperationsInput>;
  level?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type UserLevelUpsertWithoutUserInput = {
  create: UserLevelCreateWithoutUserInput;
  update: UserLevelUpdateWithoutUserInput;
  where?: InputMaybe<UserLevelWhereInput>;
};

export type UserLevelWhereInput = {
  AND?: InputMaybe<Array<UserLevelWhereInput>>;
  NOT?: InputMaybe<Array<UserLevelWhereInput>>;
  OR?: InputMaybe<Array<UserLevelWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  exp?: InputMaybe<IntFilter>;
  expNextLevel?: InputMaybe<IntFilter>;
  id?: InputMaybe<UuidFilter>;
  level?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type UserLevelWhereUniqueInput = {
  AND?: InputMaybe<Array<UserLevelWhereInput>>;
  NOT?: InputMaybe<Array<UserLevelWhereInput>>;
  OR?: InputMaybe<Array<UserLevelWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  exp?: InputMaybe<IntFilter>;
  expNextLevel?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  level?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type UserMaxAggregate = {
  __typename?: 'UserMaxAggregate';
  avatar?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  inviteCode?: Maybe<Scalars['String']['output']>;
  invitedBy?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  registerType?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Role>;
  status?: Maybe<UserStatus>;
  uid?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  username?: Maybe<Scalars['String']['output']>;
  voteRole?: Maybe<VoteRole>;
};

export type UserMaxAggregateInput = {
  avatar?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  inviteCode?: InputMaybe<Scalars['Boolean']['input']>;
  invitedBy?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  nickname?: InputMaybe<Scalars['Boolean']['input']>;
  organizationId?: InputMaybe<Scalars['Boolean']['input']>;
  password?: InputMaybe<Scalars['Boolean']['input']>;
  registerType?: InputMaybe<Scalars['Boolean']['input']>;
  role?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  uid?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['Boolean']['input']>;
  voteRole?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserMaxOrderByAggregateInput = {
  avatar?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  inviteCode?: InputMaybe<SortOrder>;
  invitedBy?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickname?: InputMaybe<SortOrder>;
  organizationId?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  registerType?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  uid?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  username?: InputMaybe<SortOrder>;
  voteRole?: InputMaybe<SortOrder>;
};

export type UserMinAggregate = {
  __typename?: 'UserMinAggregate';
  avatar?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  inviteCode?: Maybe<Scalars['String']['output']>;
  invitedBy?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  nickname?: Maybe<Scalars['String']['output']>;
  organizationId?: Maybe<Scalars['String']['output']>;
  registerType?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Role>;
  status?: Maybe<UserStatus>;
  uid?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  username?: Maybe<Scalars['String']['output']>;
  voteRole?: Maybe<VoteRole>;
};

export type UserMinAggregateInput = {
  avatar?: InputMaybe<Scalars['Boolean']['input']>;
  createdAt?: InputMaybe<Scalars['Boolean']['input']>;
  email?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Boolean']['input']>;
  inviteCode?: InputMaybe<Scalars['Boolean']['input']>;
  invitedBy?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['Boolean']['input']>;
  nickname?: InputMaybe<Scalars['Boolean']['input']>;
  organizationId?: InputMaybe<Scalars['Boolean']['input']>;
  password?: InputMaybe<Scalars['Boolean']['input']>;
  registerType?: InputMaybe<Scalars['Boolean']['input']>;
  role?: InputMaybe<Scalars['Boolean']['input']>;
  status?: InputMaybe<Scalars['Boolean']['input']>;
  uid?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['Boolean']['input']>;
  username?: InputMaybe<Scalars['Boolean']['input']>;
  voteRole?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserMinOrderByAggregateInput = {
  avatar?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  inviteCode?: InputMaybe<SortOrder>;
  invitedBy?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickname?: InputMaybe<SortOrder>;
  organizationId?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  registerType?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  uid?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  username?: InputMaybe<SortOrder>;
  voteRole?: InputMaybe<SortOrder>;
};

export type UserNullableRelationFilter = {
  is?: InputMaybe<UserWhereInput>;
  isNot?: InputMaybe<UserWhereInput>;
};

export type UserOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserCountOrderByAggregateInput>;
  _max?: InputMaybe<UserMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserSumOrderByAggregateInput>;
  avatar?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  inviteCode?: InputMaybe<SortOrder>;
  invitedBy?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrderInput>;
  nickname?: InputMaybe<SortOrderInput>;
  organizationId?: InputMaybe<SortOrderInput>;
  password?: InputMaybe<SortOrder>;
  registerType?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  status?: InputMaybe<SortOrder>;
  uid?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  username?: InputMaybe<SortOrderInput>;
  voteRole?: InputMaybe<SortOrder>;
};

export type UserOrderByWithRelationInput = {
  avatar?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrderInput>;
  hackCoin?: InputMaybe<UserHackCoinOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  ideaBank?: InputMaybe<IdeaBankOrderByRelationAggregateInput>;
  inviteCode?: InputMaybe<SortOrder>;
  invitedBy?: InputMaybe<SortOrderInput>;
  levelInfo?: InputMaybe<UserLevelOrderByWithRelationInput>;
  name?: InputMaybe<SortOrderInput>;
  nickname?: InputMaybe<SortOrderInput>;
  organizationId?: InputMaybe<SortOrderInput>;
  password?: InputMaybe<SortOrder>;
  registerType?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  settings?: InputMaybe<UserSettingsOrderByWithRelationInput>;
  status?: InputMaybe<SortOrder>;
  thirdUser?: InputMaybe<ThirdUserOrderByRelationAggregateInput>;
  treasures?: InputMaybe<TreasureOrderByRelationAggregateInput>;
  uid?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userCampaign?: InputMaybe<UserCampaignOrderByRelationAggregateInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetOrderByRelationAggregateInput>;
  userProfile?: InputMaybe<UserProfileOrderByWithRelationInput>;
  userResume?: InputMaybe<UserResumeOrderByRelationAggregateInput>;
  username?: InputMaybe<SortOrderInput>;
  voteRole?: InputMaybe<SortOrder>;
};

export type UserPhaseQuizProgressCountAggregate = {
  __typename?: 'UserPhaseQuizProgressCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  phaseId: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  quizId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserPhaseQuizProgressMaxAggregate = {
  __typename?: 'UserPhaseQuizProgressMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  quizId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserPhaseQuizProgressMinAggregate = {
  __typename?: 'UserPhaseQuizProgressMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  quizId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserPhaseRewardClaimRecordAvgAggregate = {
  __typename?: 'UserPhaseRewardClaimRecordAvgAggregate';
  coin?: Maybe<Scalars['Float']['output']>;
};

export type UserPhaseRewardClaimRecordCountAggregate = {
  __typename?: 'UserPhaseRewardClaimRecordCountAggregate';
  _all: Scalars['Int']['output'];
  claimed: Scalars['Int']['output'];
  coin: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  phaseId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserPhaseRewardClaimRecordMaxAggregate = {
  __typename?: 'UserPhaseRewardClaimRecordMaxAggregate';
  claimed?: Maybe<Scalars['Boolean']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserPhaseRewardClaimRecordMinAggregate = {
  __typename?: 'UserPhaseRewardClaimRecordMinAggregate';
  claimed?: Maybe<Scalars['Boolean']['output']>;
  coin?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  phaseId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserPhaseRewardClaimRecordSumAggregate = {
  __typename?: 'UserPhaseRewardClaimRecordSumAggregate';
  coin?: Maybe<Scalars['Int']['output']>;
};

export type UserProfile = {
  __typename?: 'UserProfile';
  HackathonMember?: Maybe<Array<HackathonMember>>;
  _count: UserProfileCount;
  backgroundImage?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  coLearningMember?: Maybe<Array<CoLearningMember>>;
  experience: Scalars['Int']['output'];
  githubActivity: Scalars['JSON']['output'];
  hackathonExperiences?: Maybe<Array<HackathonExperience>>;
  id: Scalars['String']['output'];
  location: Scalars['String']['output'];
  onChainActivity: Scalars['JSON']['output'];
  personalLinks: Scalars['JSON']['output'];
  progress?: Maybe<Array<Scalars['Int']['output']>>;
  techStack: Scalars['JSON']['output'];
  user: User;
  userCertifications?: Maybe<Array<UserCertification>>;
  workExperiences?: Maybe<Array<WorkExperience>>;
};

export type UserProfileAvgAggregate = {
  __typename?: 'UserProfileAvgAggregate';
  experience?: Maybe<Scalars['Float']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
};

export type UserProfileCount = {
  __typename?: 'UserProfileCount';
  HackathonMember: Scalars['Int']['output'];
  coLearningMember: Scalars['Int']['output'];
  hackathonExperiences: Scalars['Int']['output'];
  userCertifications: Scalars['Int']['output'];
  workExperiences: Scalars['Int']['output'];
};

export type UserProfileCountAggregate = {
  __typename?: 'UserProfileCountAggregate';
  _all: Scalars['Int']['output'];
  backgroundImage: Scalars['Int']['output'];
  bio: Scalars['Int']['output'];
  experience: Scalars['Int']['output'];
  githubActivity: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  onChainActivity: Scalars['Int']['output'];
  personalLinks: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  techStack: Scalars['Int']['output'];
};

export type UserProfileCreateNestedOneWithoutCoLearningMemberInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutCoLearningMemberInput>;
  create?: InputMaybe<UserProfileCreateWithoutCoLearningMemberInput>;
};

export type UserProfileCreateNestedOneWithoutHackathonMemberInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutHackathonMemberInput>;
  create?: InputMaybe<UserProfileCreateWithoutHackathonMemberInput>;
};

export type UserProfileCreateNestedOneWithoutUserCertificationsInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutUserCertificationsInput>;
  create?: InputMaybe<UserProfileCreateWithoutUserCertificationsInput>;
};

export type UserProfileCreateNestedOneWithoutUserInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserProfileCreateWithoutUserInput>;
};

export type UserProfileCreateOrConnectWithoutCoLearningMemberInput = {
  create: UserProfileCreateWithoutCoLearningMemberInput;
  where: UserProfileWhereUniqueInput;
};

export type UserProfileCreateOrConnectWithoutHackathonMemberInput = {
  create: UserProfileCreateWithoutHackathonMemberInput;
  where: UserProfileWhereUniqueInput;
};

export type UserProfileCreateOrConnectWithoutUserCertificationsInput = {
  create: UserProfileCreateWithoutUserCertificationsInput;
  where: UserProfileWhereUniqueInput;
};

export type UserProfileCreateOrConnectWithoutUserInput = {
  create: UserProfileCreateWithoutUserInput;
  where: UserProfileWhereUniqueInput;
};

export type UserProfileCreateOrConnectWithoutWorkExperiencesInput = {
  create: UserProfileCreateWithoutWorkExperiencesInput;
  where: UserProfileWhereUniqueInput;
};

export type UserProfileCreateWithoutCoLearningMemberInput = {
  HackathonMember?: InputMaybe<HackathonMemberCreateNestedManyWithoutProfileInput>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  experience: Scalars['Int']['input'];
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceCreateNestedManyWithoutUserProfileInput>;
  location: Scalars['String']['input'];
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileCreateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user: UserCreateNestedOneWithoutUserProfileInput;
  userCertifications?: InputMaybe<UserCertificationCreateNestedManyWithoutUserProfileInput>;
  workExperiences?: InputMaybe<WorkExperienceCreateNestedManyWithoutUserProfileInput>;
};

export type UserProfileCreateWithoutHackathonMemberInput = {
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  coLearningMember?: InputMaybe<CoLearningMemberCreateNestedManyWithoutProfileInput>;
  experience: Scalars['Int']['input'];
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceCreateNestedManyWithoutUserProfileInput>;
  location: Scalars['String']['input'];
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileCreateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user: UserCreateNestedOneWithoutUserProfileInput;
  userCertifications?: InputMaybe<UserCertificationCreateNestedManyWithoutUserProfileInput>;
  workExperiences?: InputMaybe<WorkExperienceCreateNestedManyWithoutUserProfileInput>;
};

export type UserProfileCreateWithoutUserCertificationsInput = {
  HackathonMember?: InputMaybe<HackathonMemberCreateNestedManyWithoutProfileInput>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  coLearningMember?: InputMaybe<CoLearningMemberCreateNestedManyWithoutProfileInput>;
  experience: Scalars['Int']['input'];
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceCreateNestedManyWithoutUserProfileInput>;
  location: Scalars['String']['input'];
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileCreateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user: UserCreateNestedOneWithoutUserProfileInput;
  workExperiences?: InputMaybe<WorkExperienceCreateNestedManyWithoutUserProfileInput>;
};

export type UserProfileCreateWithoutUserInput = {
  HackathonMember?: InputMaybe<HackathonMemberCreateNestedManyWithoutProfileInput>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  coLearningMember?: InputMaybe<CoLearningMemberCreateNestedManyWithoutProfileInput>;
  experience: Scalars['Int']['input'];
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceCreateNestedManyWithoutUserProfileInput>;
  location: Scalars['String']['input'];
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileCreateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  userCertifications?: InputMaybe<UserCertificationCreateNestedManyWithoutUserProfileInput>;
  workExperiences?: InputMaybe<WorkExperienceCreateNestedManyWithoutUserProfileInput>;
};

export type UserProfileCreateWithoutWorkExperiencesInput = {
  HackathonMember?: InputMaybe<HackathonMemberCreateNestedManyWithoutProfileInput>;
  backgroundImage?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  coLearningMember?: InputMaybe<CoLearningMemberCreateNestedManyWithoutProfileInput>;
  experience: Scalars['Int']['input'];
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceCreateNestedManyWithoutUserProfileInput>;
  location: Scalars['String']['input'];
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileCreateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user: UserCreateNestedOneWithoutUserProfileInput;
  userCertifications?: InputMaybe<UserCertificationCreateNestedManyWithoutUserProfileInput>;
};

export type UserProfileCreateprogressInput = {
  set: Array<Scalars['Int']['input']>;
};

export type UserProfileExtend = {
  __typename?: 'UserProfileExtend';
  HackathonMember?: Maybe<Array<HackathonMember>>;
  _count: UserProfileCount;
  backgroundImage?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  coLearningMember?: Maybe<Array<CoLearningMember>>;
  experience: Scalars['Int']['output'];
  githubActivity: Scalars['JSON']['output'];
  hackathonExperiences?: Maybe<Array<HackathonExperience>>;
  id: Scalars['String']['output'];
  location: Scalars['String']['output'];
  onChainActivity: Scalars['JSON']['output'];
  personalLinks: Scalars['JSON']['output'];
  progress?: Maybe<Array<Scalars['Int']['output']>>;
  techStack: Scalars['JSON']['output'];
  user: User;
  userCertifications?: Maybe<Array<UserCertification>>;
  web3Score?: Maybe<Array<UserWeb3Score>>;
  workExperiences?: Maybe<Array<WorkExperience>>;
};

export type UserProfileMaxAggregate = {
  __typename?: 'UserProfileMaxAggregate';
  backgroundImage?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  experience?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
};

export type UserProfileMinAggregate = {
  __typename?: 'UserProfileMinAggregate';
  backgroundImage?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  experience?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  location?: Maybe<Scalars['String']['output']>;
};

export type UserProfileNullableRelationFilter = {
  is?: InputMaybe<UserProfileWhereInput>;
  isNot?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileOrderByWithRelationInput = {
  HackathonMember?: InputMaybe<HackathonMemberOrderByRelationAggregateInput>;
  backgroundImage?: InputMaybe<SortOrderInput>;
  bio?: InputMaybe<SortOrderInput>;
  coLearningMember?: InputMaybe<CoLearningMemberOrderByRelationAggregateInput>;
  experience?: InputMaybe<SortOrder>;
  githubActivity?: InputMaybe<SortOrder>;
  hackathonExperiences?: InputMaybe<HackathonExperienceOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  location?: InputMaybe<SortOrder>;
  onChainActivity?: InputMaybe<SortOrder>;
  personalLinks?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  techStack?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userCertifications?: InputMaybe<UserCertificationOrderByRelationAggregateInput>;
  workExperiences?: InputMaybe<WorkExperienceOrderByRelationAggregateInput>;
};

export type UserProfileRelationFilter = {
  is?: InputMaybe<UserProfileWhereInput>;
  isNot?: InputMaybe<UserProfileWhereInput>;
};

export enum UserProfileScalarFieldEnum {
  BackgroundImage = 'backgroundImage',
  Bio = 'bio',
  Experience = 'experience',
  GithubActivity = 'githubActivity',
  Id = 'id',
  Location = 'location',
  OnChainActivity = 'onChainActivity',
  PersonalLinks = 'personalLinks',
  Progress = 'progress',
  TechStack = 'techStack'
}

export type UserProfileSumAggregate = {
  __typename?: 'UserProfileSumAggregate';
  experience?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Array<Scalars['Int']['output']>>;
};

export type UserProfileUpdateInput = {
  HackathonMember?: InputMaybe<HackathonMemberUpdateManyWithoutProfileNestedInput>;
  backgroundImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  bio?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  coLearningMember?: InputMaybe<CoLearningMemberUpdateManyWithoutProfileNestedInput>;
  experience?: InputMaybe<IntFieldUpdateOperationsInput>;
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceUpdateManyWithoutUserProfileNestedInput>;
  location?: InputMaybe<StringFieldUpdateOperationsInput>;
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileUpdateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserProfileNestedInput>;
  userCertifications?: InputMaybe<UserCertificationUpdateManyWithoutUserProfileNestedInput>;
  workExperiences?: InputMaybe<WorkExperienceUpdateManyWithoutUserProfileNestedInput>;
};

export type UserProfileUpdateOneRequiredWithoutUserCertificationsNestedInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutUserCertificationsInput>;
  create?: InputMaybe<UserProfileCreateWithoutUserCertificationsInput>;
  update?: InputMaybe<UserProfileUpdateToOneWithWhereWithoutUserCertificationsInput>;
  upsert?: InputMaybe<UserProfileUpsertWithoutUserCertificationsInput>;
};

export type UserProfileUpdateOneRequiredWithoutWorkExperiencesNestedInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutWorkExperiencesInput>;
  create?: InputMaybe<UserProfileCreateWithoutWorkExperiencesInput>;
  update?: InputMaybe<UserProfileUpdateToOneWithWhereWithoutWorkExperiencesInput>;
  upsert?: InputMaybe<UserProfileUpsertWithoutWorkExperiencesInput>;
};

export type UserProfileUpdateOneWithoutHackathonMemberNestedInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutHackathonMemberInput>;
  create?: InputMaybe<UserProfileCreateWithoutHackathonMemberInput>;
  delete?: InputMaybe<UserProfileWhereInput>;
  disconnect?: InputMaybe<UserProfileWhereInput>;
  update?: InputMaybe<UserProfileUpdateToOneWithWhereWithoutHackathonMemberInput>;
  upsert?: InputMaybe<UserProfileUpsertWithoutHackathonMemberInput>;
};

export type UserProfileUpdateOneWithoutUserNestedInput = {
  connect?: InputMaybe<UserProfileWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserProfileCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserProfileCreateWithoutUserInput>;
  delete?: InputMaybe<UserProfileWhereInput>;
  disconnect?: InputMaybe<UserProfileWhereInput>;
  update?: InputMaybe<UserProfileUpdateToOneWithWhereWithoutUserInput>;
  upsert?: InputMaybe<UserProfileUpsertWithoutUserInput>;
};

export type UserProfileUpdateToOneWithWhereWithoutHackathonMemberInput = {
  data: UserProfileUpdateWithoutHackathonMemberInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpdateToOneWithWhereWithoutUserCertificationsInput = {
  data: UserProfileUpdateWithoutUserCertificationsInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
  data: UserProfileUpdateWithoutUserInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpdateToOneWithWhereWithoutWorkExperiencesInput = {
  data: UserProfileUpdateWithoutWorkExperiencesInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpdateWithoutHackathonMemberInput = {
  backgroundImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  bio?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  coLearningMember?: InputMaybe<CoLearningMemberUpdateManyWithoutProfileNestedInput>;
  experience?: InputMaybe<IntFieldUpdateOperationsInput>;
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceUpdateManyWithoutUserProfileNestedInput>;
  location?: InputMaybe<StringFieldUpdateOperationsInput>;
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileUpdateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserProfileNestedInput>;
  userCertifications?: InputMaybe<UserCertificationUpdateManyWithoutUserProfileNestedInput>;
  workExperiences?: InputMaybe<WorkExperienceUpdateManyWithoutUserProfileNestedInput>;
};

export type UserProfileUpdateWithoutUserCertificationsInput = {
  HackathonMember?: InputMaybe<HackathonMemberUpdateManyWithoutProfileNestedInput>;
  backgroundImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  bio?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  coLearningMember?: InputMaybe<CoLearningMemberUpdateManyWithoutProfileNestedInput>;
  experience?: InputMaybe<IntFieldUpdateOperationsInput>;
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceUpdateManyWithoutUserProfileNestedInput>;
  location?: InputMaybe<StringFieldUpdateOperationsInput>;
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileUpdateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserProfileNestedInput>;
  workExperiences?: InputMaybe<WorkExperienceUpdateManyWithoutUserProfileNestedInput>;
};

export type UserProfileUpdateWithoutUserInput = {
  HackathonMember?: InputMaybe<HackathonMemberUpdateManyWithoutProfileNestedInput>;
  backgroundImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  bio?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  coLearningMember?: InputMaybe<CoLearningMemberUpdateManyWithoutProfileNestedInput>;
  experience?: InputMaybe<IntFieldUpdateOperationsInput>;
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceUpdateManyWithoutUserProfileNestedInput>;
  location?: InputMaybe<StringFieldUpdateOperationsInput>;
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileUpdateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  userCertifications?: InputMaybe<UserCertificationUpdateManyWithoutUserProfileNestedInput>;
  workExperiences?: InputMaybe<WorkExperienceUpdateManyWithoutUserProfileNestedInput>;
};

export type UserProfileUpdateWithoutWorkExperiencesInput = {
  HackathonMember?: InputMaybe<HackathonMemberUpdateManyWithoutProfileNestedInput>;
  backgroundImage?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  bio?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  coLearningMember?: InputMaybe<CoLearningMemberUpdateManyWithoutProfileNestedInput>;
  experience?: InputMaybe<IntFieldUpdateOperationsInput>;
  githubActivity?: InputMaybe<Scalars['JSON']['input']>;
  hackathonExperiences?: InputMaybe<HackathonExperienceUpdateManyWithoutUserProfileNestedInput>;
  location?: InputMaybe<StringFieldUpdateOperationsInput>;
  onChainActivity?: InputMaybe<Scalars['JSON']['input']>;
  personalLinks?: InputMaybe<Scalars['JSON']['input']>;
  progress?: InputMaybe<UserProfileUpdateprogressInput>;
  techStack?: InputMaybe<Scalars['JSON']['input']>;
  user?: InputMaybe<UserUpdateOneRequiredWithoutUserProfileNestedInput>;
  userCertifications?: InputMaybe<UserCertificationUpdateManyWithoutUserProfileNestedInput>;
};

export type UserProfileUpdateprogressInput = {
  push?: InputMaybe<Array<Scalars['Int']['input']>>;
  set?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type UserProfileUpsertWithoutHackathonMemberInput = {
  create: UserProfileCreateWithoutHackathonMemberInput;
  update: UserProfileUpdateWithoutHackathonMemberInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpsertWithoutUserCertificationsInput = {
  create: UserProfileCreateWithoutUserCertificationsInput;
  update: UserProfileUpdateWithoutUserCertificationsInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpsertWithoutUserInput = {
  create: UserProfileCreateWithoutUserInput;
  update: UserProfileUpdateWithoutUserInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileUpsertWithoutWorkExperiencesInput = {
  create: UserProfileCreateWithoutWorkExperiencesInput;
  update: UserProfileUpdateWithoutWorkExperiencesInput;
  where?: InputMaybe<UserProfileWhereInput>;
};

export type UserProfileWhereInput = {
  AND?: InputMaybe<Array<UserProfileWhereInput>>;
  HackathonMember?: InputMaybe<HackathonMemberListRelationFilter>;
  NOT?: InputMaybe<Array<UserProfileWhereInput>>;
  OR?: InputMaybe<Array<UserProfileWhereInput>>;
  backgroundImage?: InputMaybe<StringNullableFilter>;
  bio?: InputMaybe<StringNullableFilter>;
  coLearningMember?: InputMaybe<CoLearningMemberListRelationFilter>;
  experience?: InputMaybe<IntFilter>;
  githubActivity?: InputMaybe<JsonFilter>;
  hackathonExperiences?: InputMaybe<HackathonExperienceListRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  location?: InputMaybe<StringFilter>;
  onChainActivity?: InputMaybe<JsonFilter>;
  personalLinks?: InputMaybe<JsonFilter>;
  progress?: InputMaybe<IntNullableListFilter>;
  techStack?: InputMaybe<JsonFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userCertifications?: InputMaybe<UserCertificationListRelationFilter>;
  workExperiences?: InputMaybe<WorkExperienceListRelationFilter>;
};

export type UserProfileWhereUniqueInput = {
  AND?: InputMaybe<Array<UserProfileWhereInput>>;
  HackathonMember?: InputMaybe<HackathonMemberListRelationFilter>;
  NOT?: InputMaybe<Array<UserProfileWhereInput>>;
  OR?: InputMaybe<Array<UserProfileWhereInput>>;
  backgroundImage?: InputMaybe<StringNullableFilter>;
  bio?: InputMaybe<StringNullableFilter>;
  coLearningMember?: InputMaybe<CoLearningMemberListRelationFilter>;
  experience?: InputMaybe<IntFilter>;
  githubActivity?: InputMaybe<JsonFilter>;
  hackathonExperiences?: InputMaybe<HackathonExperienceListRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<StringFilter>;
  onChainActivity?: InputMaybe<JsonFilter>;
  personalLinks?: InputMaybe<JsonFilter>;
  progress?: InputMaybe<IntNullableListFilter>;
  techStack?: InputMaybe<JsonFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userCertifications?: InputMaybe<UserCertificationListRelationFilter>;
  workExperiences?: InputMaybe<WorkExperienceListRelationFilter>;
};

export type UserRelationFilter = {
  is?: InputMaybe<UserWhereInput>;
  isNot?: InputMaybe<UserWhereInput>;
};

export type UserRemainingVotes = {
  __typename?: 'UserRemainingVotes';
  canVote?: Maybe<Scalars['Boolean']['output']>;
  remainingVotes?: Maybe<Scalars['Float']['output']>;
  totalVotes?: Maybe<Scalars['Float']['output']>;
};

export type UserResume = {
  __typename?: 'UserResume';
  createdAt: Scalars['DateTime']['output'];
  file: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  user: User;
  userId: Scalars['String']['output'];
};

export type UserResumeAvgAggregate = {
  __typename?: 'UserResumeAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type UserResumeCountAggregate = {
  __typename?: 'UserResumeCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  file: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserResumeCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  file: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
};

export type UserResumeCreateManyUserInputEnvelope = {
  data: Array<UserResumeCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserResumeCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserResumeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserResumeCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserResumeCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserResumeCreateManyUserInputEnvelope>;
};

export type UserResumeCreateOrConnectWithoutUserInput = {
  create: UserResumeCreateWithoutUserInput;
  where: UserResumeWhereUniqueInput;
};

export type UserResumeCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  file: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type UserResumeListRelationFilter = {
  every?: InputMaybe<UserResumeWhereInput>;
  none?: InputMaybe<UserResumeWhereInput>;
  some?: InputMaybe<UserResumeWhereInput>;
};

export type UserResumeMaxAggregate = {
  __typename?: 'UserResumeMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  file?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserResumeMinAggregate = {
  __typename?: 'UserResumeMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  file?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserResumeOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserResumeScalarWhereInput = {
  AND?: InputMaybe<Array<UserResumeScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserResumeScalarWhereInput>>;
  OR?: InputMaybe<Array<UserResumeScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  file?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserResumeSumAggregate = {
  __typename?: 'UserResumeSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type UserResumeUpdateManyMutationInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  file?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserResumeUpdateManyWithWhereWithoutUserInput = {
  data: UserResumeUpdateManyMutationInput;
  where: UserResumeScalarWhereInput;
};

export type UserResumeUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserResumeWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserResumeCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserResumeCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserResumeCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserResumeWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserResumeScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserResumeWhereUniqueInput>>;
  set?: InputMaybe<Array<UserResumeWhereUniqueInput>>;
  update?: InputMaybe<Array<UserResumeUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserResumeUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserResumeUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserResumeUpdateWithWhereUniqueWithoutUserInput = {
  data: UserResumeUpdateWithoutUserInput;
  where: UserResumeWhereUniqueInput;
};

export type UserResumeUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  file?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserResumeUpsertWithWhereUniqueWithoutUserInput = {
  create: UserResumeCreateWithoutUserInput;
  update: UserResumeUpdateWithoutUserInput;
  where: UserResumeWhereUniqueInput;
};

export type UserResumeWhereInput = {
  AND?: InputMaybe<Array<UserResumeWhereInput>>;
  NOT?: InputMaybe<Array<UserResumeWhereInput>>;
  OR?: InputMaybe<Array<UserResumeWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  file?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type UserResumeWhereUniqueInput = {
  AND?: InputMaybe<Array<UserResumeWhereInput>>;
  NOT?: InputMaybe<Array<UserResumeWhereInput>>;
  OR?: InputMaybe<Array<UserResumeWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  file?: InputMaybe<StringFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export enum UserScalarFieldEnum {
  Avatar = 'avatar',
  CreatedAt = 'createdAt',
  Email = 'email',
  Id = 'id',
  InviteCode = 'inviteCode',
  InvitedBy = 'invitedBy',
  Name = 'name',
  Nickname = 'nickname',
  OrganizationId = 'organizationId',
  Password = 'password',
  RegisterType = 'registerType',
  Role = 'role',
  Status = 'status',
  Uid = 'uid',
  UpdatedAt = 'updatedAt',
  Username = 'username',
  VoteRole = 'voteRole'
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserScalarWhereWithAggregatesInput>>;
  avatar?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  email?: InputMaybe<StringNullableWithAggregatesFilter>;
  id?: InputMaybe<UuidWithAggregatesFilter>;
  inviteCode?: InputMaybe<StringWithAggregatesFilter>;
  invitedBy?: InputMaybe<StringNullableWithAggregatesFilter>;
  name?: InputMaybe<StringNullableWithAggregatesFilter>;
  nickname?: InputMaybe<StringNullableWithAggregatesFilter>;
  organizationId?: InputMaybe<UuidNullableWithAggregatesFilter>;
  password?: InputMaybe<StringWithAggregatesFilter>;
  registerType?: InputMaybe<StringWithAggregatesFilter>;
  role?: InputMaybe<EnumRoleWithAggregatesFilter>;
  status?: InputMaybe<EnumUserStatusWithAggregatesFilter>;
  uid?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  username?: InputMaybe<StringNullableWithAggregatesFilter>;
  voteRole?: InputMaybe<EnumVoteRoleWithAggregatesFilter>;
};

export type UserSettings = {
  __typename?: 'UserSettings';
  hackathonUpdates: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  newReleases: Scalars['Boolean']['output'];
  newsletter: Scalars['Boolean']['output'];
  refuseReceiveMarketingEmails: Scalars['Boolean']['output'];
  user?: Maybe<User>;
};

export type UserSettingsCountAggregate = {
  __typename?: 'UserSettingsCountAggregate';
  _all: Scalars['Int']['output'];
  hackathonUpdates: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  newReleases: Scalars['Int']['output'];
  newsletter: Scalars['Int']['output'];
  refuseReceiveMarketingEmails: Scalars['Int']['output'];
};

export type UserSettingsCreateNestedOneWithoutUserInput = {
  connect?: InputMaybe<UserSettingsWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserSettingsCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserSettingsCreateWithoutUserInput>;
};

export type UserSettingsCreateOrConnectWithoutUserInput = {
  create: UserSettingsCreateWithoutUserInput;
  where: UserSettingsWhereUniqueInput;
};

export type UserSettingsCreateWithoutUserInput = {
  hackathonUpdates?: InputMaybe<Scalars['Boolean']['input']>;
  newReleases?: InputMaybe<Scalars['Boolean']['input']>;
  newsletter?: InputMaybe<Scalars['Boolean']['input']>;
  refuseReceiveMarketingEmails?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserSettingsMaxAggregate = {
  __typename?: 'UserSettingsMaxAggregate';
  hackathonUpdates?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  newReleases?: Maybe<Scalars['Boolean']['output']>;
  newsletter?: Maybe<Scalars['Boolean']['output']>;
  refuseReceiveMarketingEmails?: Maybe<Scalars['Boolean']['output']>;
};

export type UserSettingsMinAggregate = {
  __typename?: 'UserSettingsMinAggregate';
  hackathonUpdates?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  newReleases?: Maybe<Scalars['Boolean']['output']>;
  newsletter?: Maybe<Scalars['Boolean']['output']>;
  refuseReceiveMarketingEmails?: Maybe<Scalars['Boolean']['output']>;
};

export type UserSettingsNullableRelationFilter = {
  is?: InputMaybe<UserSettingsWhereInput>;
  isNot?: InputMaybe<UserSettingsWhereInput>;
};

export type UserSettingsOrderByWithRelationInput = {
  hackathonUpdates?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  newReleases?: InputMaybe<SortOrder>;
  newsletter?: InputMaybe<SortOrder>;
  refuseReceiveMarketingEmails?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export type UserSettingsUpdateOneWithoutUserNestedInput = {
  connect?: InputMaybe<UserSettingsWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserSettingsCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<UserSettingsCreateWithoutUserInput>;
  delete?: InputMaybe<UserSettingsWhereInput>;
  disconnect?: InputMaybe<UserSettingsWhereInput>;
  update?: InputMaybe<UserSettingsUpdateToOneWithWhereWithoutUserInput>;
  upsert?: InputMaybe<UserSettingsUpsertWithoutUserInput>;
};

export type UserSettingsUpdateToOneWithWhereWithoutUserInput = {
  data: UserSettingsUpdateWithoutUserInput;
  where?: InputMaybe<UserSettingsWhereInput>;
};

export type UserSettingsUpdateWithoutUserInput = {
  hackathonUpdates?: InputMaybe<BoolFieldUpdateOperationsInput>;
  newReleases?: InputMaybe<BoolFieldUpdateOperationsInput>;
  newsletter?: InputMaybe<BoolFieldUpdateOperationsInput>;
  refuseReceiveMarketingEmails?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type UserSettingsUpsertWithoutUserInput = {
  create: UserSettingsCreateWithoutUserInput;
  update: UserSettingsUpdateWithoutUserInput;
  where?: InputMaybe<UserSettingsWhereInput>;
};

export type UserSettingsWhereInput = {
  AND?: InputMaybe<Array<UserSettingsWhereInput>>;
  NOT?: InputMaybe<Array<UserSettingsWhereInput>>;
  OR?: InputMaybe<Array<UserSettingsWhereInput>>;
  hackathonUpdates?: InputMaybe<BoolFilter>;
  id?: InputMaybe<UuidFilter>;
  newReleases?: InputMaybe<BoolFilter>;
  newsletter?: InputMaybe<BoolFilter>;
  refuseReceiveMarketingEmails?: InputMaybe<BoolFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type UserSettingsWhereUniqueInput = {
  AND?: InputMaybe<Array<UserSettingsWhereInput>>;
  NOT?: InputMaybe<Array<UserSettingsWhereInput>>;
  OR?: InputMaybe<Array<UserSettingsWhereInput>>;
  hackathonUpdates?: InputMaybe<BoolFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  newReleases?: InputMaybe<BoolFilter>;
  newsletter?: InputMaybe<BoolFilter>;
  refuseReceiveMarketingEmails?: InputMaybe<BoolFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export enum UserStatus {
  Activated = 'ACTIVATED',
  Unactivated = 'UNACTIVATED'
}

export type UserSumAggregate = {
  __typename?: 'UserSumAggregate';
  uid?: Maybe<Scalars['Int']['output']>;
};

export type UserSumAggregateInput = {
  uid?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserSumOrderByAggregateInput = {
  uid?: InputMaybe<SortOrder>;
};

export type UserUpdateInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  ideaBank?: InputMaybe<IdeaBankUpdateManyWithoutUserNestedInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  thirdUser?: InputMaybe<ThirdUserUpdateManyWithoutUserNestedInput>;
  treasures?: InputMaybe<TreasureUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaign?: InputMaybe<UserCampaignUpdateManyWithoutUserNestedInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutUserNestedInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateManyMutationInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateOneRequiredWithoutIdeaBankNestedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutIdeaBankInput>;
  create?: InputMaybe<UserCreateWithoutIdeaBankInput>;
  update?: InputMaybe<UserUpdateToOneWithWhereWithoutIdeaBankInput>;
  upsert?: InputMaybe<UserUpsertWithoutIdeaBankInput>;
};

export type UserUpdateOneRequiredWithoutThirdUserNestedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutThirdUserInput>;
  create?: InputMaybe<UserCreateWithoutThirdUserInput>;
  update?: InputMaybe<UserUpdateToOneWithWhereWithoutThirdUserInput>;
  upsert?: InputMaybe<UserUpsertWithoutThirdUserInput>;
};

export type UserUpdateOneRequiredWithoutTreasuresNestedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutTreasuresInput>;
  create?: InputMaybe<UserCreateWithoutTreasuresInput>;
  update?: InputMaybe<UserUpdateToOneWithWhereWithoutTreasuresInput>;
  upsert?: InputMaybe<UserUpsertWithoutTreasuresInput>;
};

export type UserUpdateOneRequiredWithoutUserCampaignNestedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserCampaignInput>;
  create?: InputMaybe<UserCreateWithoutUserCampaignInput>;
  update?: InputMaybe<UserUpdateToOneWithWhereWithoutUserCampaignInput>;
  upsert?: InputMaybe<UserUpsertWithoutUserCampaignInput>;
};

export type UserUpdateOneRequiredWithoutUserCampaignTargetNestedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserCampaignTargetInput>;
  create?: InputMaybe<UserCreateWithoutUserCampaignTargetInput>;
  update?: InputMaybe<UserUpdateToOneWithWhereWithoutUserCampaignTargetInput>;
  upsert?: InputMaybe<UserUpsertWithoutUserCampaignTargetInput>;
};

export type UserUpdateOneRequiredWithoutUserProfileNestedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserProfileInput>;
  create?: InputMaybe<UserCreateWithoutUserProfileInput>;
  update?: InputMaybe<UserUpdateToOneWithWhereWithoutUserProfileInput>;
  upsert?: InputMaybe<UserUpsertWithoutUserProfileInput>;
};

export type UserUpdateToOneWithWhereWithoutIdeaBankInput = {
  data: UserUpdateWithoutIdeaBankInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpdateToOneWithWhereWithoutThirdUserInput = {
  data: UserUpdateWithoutThirdUserInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpdateToOneWithWhereWithoutTreasuresInput = {
  data: UserUpdateWithoutTreasuresInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpdateToOneWithWhereWithoutUserCampaignInput = {
  data: UserUpdateWithoutUserCampaignInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpdateToOneWithWhereWithoutUserCampaignTargetInput = {
  data: UserUpdateWithoutUserCampaignTargetInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpdateToOneWithWhereWithoutUserProfileInput = {
  data: UserUpdateWithoutUserProfileInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpdateWithoutIdeaBankInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  thirdUser?: InputMaybe<ThirdUserUpdateManyWithoutUserNestedInput>;
  treasures?: InputMaybe<TreasureUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaign?: InputMaybe<UserCampaignUpdateManyWithoutUserNestedInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutUserNestedInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateWithoutThirdUserInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  ideaBank?: InputMaybe<IdeaBankUpdateManyWithoutUserNestedInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  treasures?: InputMaybe<TreasureUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaign?: InputMaybe<UserCampaignUpdateManyWithoutUserNestedInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutUserNestedInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateWithoutTreasuresInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  ideaBank?: InputMaybe<IdeaBankUpdateManyWithoutUserNestedInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  thirdUser?: InputMaybe<ThirdUserUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaign?: InputMaybe<UserCampaignUpdateManyWithoutUserNestedInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutUserNestedInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateWithoutUserCampaignInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  ideaBank?: InputMaybe<IdeaBankUpdateManyWithoutUserNestedInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  thirdUser?: InputMaybe<ThirdUserUpdateManyWithoutUserNestedInput>;
  treasures?: InputMaybe<TreasureUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutUserNestedInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateWithoutUserCampaignTargetInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  ideaBank?: InputMaybe<IdeaBankUpdateManyWithoutUserNestedInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  thirdUser?: InputMaybe<ThirdUserUpdateManyWithoutUserNestedInput>;
  treasures?: InputMaybe<TreasureUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaign?: InputMaybe<UserCampaignUpdateManyWithoutUserNestedInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpdateWithoutUserProfileInput = {
  avatar?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  hackCoin?: InputMaybe<UserHackCoinUpdateOneWithoutUserNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  ideaBank?: InputMaybe<IdeaBankUpdateManyWithoutUserNestedInput>;
  inviteCode?: InputMaybe<StringFieldUpdateOperationsInput>;
  invitedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  levelInfo?: InputMaybe<UserLevelUpdateOneWithoutUserNestedInput>;
  name?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  nickname?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  organizationId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  registerType?: InputMaybe<StringFieldUpdateOperationsInput>;
  role?: InputMaybe<EnumRoleFieldUpdateOperationsInput>;
  settings?: InputMaybe<UserSettingsUpdateOneWithoutUserNestedInput>;
  status?: InputMaybe<EnumUserStatusFieldUpdateOperationsInput>;
  thirdUser?: InputMaybe<ThirdUserUpdateManyWithoutUserNestedInput>;
  treasures?: InputMaybe<TreasureUpdateManyWithoutUserNestedInput>;
  uid?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userCampaign?: InputMaybe<UserCampaignUpdateManyWithoutUserNestedInput>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetUpdateManyWithoutUserNestedInput>;
  userResume?: InputMaybe<UserResumeUpdateManyWithoutUserNestedInput>;
  username?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  voteRole?: InputMaybe<EnumVoteRoleFieldUpdateOperationsInput>;
};

export type UserUpsertWithoutIdeaBankInput = {
  create: UserCreateWithoutIdeaBankInput;
  update: UserUpdateWithoutIdeaBankInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpsertWithoutThirdUserInput = {
  create: UserCreateWithoutThirdUserInput;
  update: UserUpdateWithoutThirdUserInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpsertWithoutTreasuresInput = {
  create: UserCreateWithoutTreasuresInput;
  update: UserUpdateWithoutTreasuresInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpsertWithoutUserCampaignInput = {
  create: UserCreateWithoutUserCampaignInput;
  update: UserUpdateWithoutUserCampaignInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpsertWithoutUserCampaignTargetInput = {
  create: UserCreateWithoutUserCampaignTargetInput;
  update: UserUpdateWithoutUserCampaignTargetInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserUpsertWithoutUserProfileInput = {
  create: UserCreateWithoutUserProfileInput;
  update: UserUpdateWithoutUserProfileInput;
  where?: InputMaybe<UserWhereInput>;
};

export type UserWeb3Score = {
  __typename?: 'UserWeb3Score';
  latitude: Scalars['String']['output'];
  score: Scalars['Float']['output'];
};

export type UserWeb3ScoreLogAvgAggregate = {
  __typename?: 'UserWeb3ScoreLogAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
};

export type UserWeb3ScoreLogCountAggregate = {
  __typename?: 'UserWeb3ScoreLogCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  latitude: Scalars['Int']['output'];
  score: Scalars['Int']['output'];
  sourceId: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type UserWeb3ScoreLogMaxAggregate = {
  __typename?: 'UserWeb3ScoreLogMaxAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  latitude?: Maybe<Scalars['String']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
  sourceId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserWeb3ScoreLogMinAggregate = {
  __typename?: 'UserWeb3ScoreLogMinAggregate';
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  latitude?: Maybe<Scalars['String']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
  sourceId?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type UserWeb3ScoreLogSumAggregate = {
  __typename?: 'UserWeb3ScoreLogSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  score?: Maybe<Scalars['Float']['output']>;
};

export type UserWhereInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  avatar?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  email?: InputMaybe<StringNullableFilter>;
  hackCoin?: InputMaybe<UserHackCoinNullableRelationFilter>;
  id?: InputMaybe<UuidFilter>;
  ideaBank?: InputMaybe<IdeaBankListRelationFilter>;
  inviteCode?: InputMaybe<StringFilter>;
  invitedBy?: InputMaybe<StringNullableFilter>;
  levelInfo?: InputMaybe<UserLevelNullableRelationFilter>;
  name?: InputMaybe<StringNullableFilter>;
  nickname?: InputMaybe<StringNullableFilter>;
  organizationId?: InputMaybe<UuidNullableFilter>;
  password?: InputMaybe<StringFilter>;
  registerType?: InputMaybe<StringFilter>;
  role?: InputMaybe<EnumRoleFilter>;
  settings?: InputMaybe<UserSettingsNullableRelationFilter>;
  status?: InputMaybe<EnumUserStatusFilter>;
  thirdUser?: InputMaybe<ThirdUserListRelationFilter>;
  treasures?: InputMaybe<TreasureListRelationFilter>;
  uid?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userCampaign?: InputMaybe<UserCampaignListRelationFilter>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetListRelationFilter>;
  userProfile?: InputMaybe<UserProfileNullableRelationFilter>;
  userResume?: InputMaybe<UserResumeListRelationFilter>;
  username?: InputMaybe<StringNullableFilter>;
  voteRole?: InputMaybe<EnumVoteRoleFilter>;
};

export type UserWhereUniqueInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  avatar?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  email?: InputMaybe<Scalars['String']['input']>;
  hackCoin?: InputMaybe<UserHackCoinNullableRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  ideaBank?: InputMaybe<IdeaBankListRelationFilter>;
  inviteCode?: InputMaybe<StringFilter>;
  invitedBy?: InputMaybe<StringNullableFilter>;
  levelInfo?: InputMaybe<UserLevelNullableRelationFilter>;
  name?: InputMaybe<Scalars['String']['input']>;
  nickname?: InputMaybe<StringNullableFilter>;
  organizationId?: InputMaybe<UuidNullableFilter>;
  password?: InputMaybe<StringFilter>;
  registerType?: InputMaybe<StringFilter>;
  role?: InputMaybe<EnumRoleFilter>;
  settings?: InputMaybe<UserSettingsNullableRelationFilter>;
  status?: InputMaybe<EnumUserStatusFilter>;
  thirdUser?: InputMaybe<ThirdUserListRelationFilter>;
  treasures?: InputMaybe<TreasureListRelationFilter>;
  uid?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userCampaign?: InputMaybe<UserCampaignListRelationFilter>;
  userCampaignTarget?: InputMaybe<UserCampaignTargetListRelationFilter>;
  userProfile?: InputMaybe<UserProfileNullableRelationFilter>;
  userResume?: InputMaybe<UserResumeListRelationFilter>;
  username?: InputMaybe<Scalars['String']['input']>;
  voteRole?: InputMaybe<EnumVoteRoleFilter>;
};

export type UuidFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UuidNullableFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UuidNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UuidWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ValidateProject = {
  __typename?: 'ValidateProject';
  id: Scalars['String']['output'];
  isSubmit: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
};

export enum VoteRole {
  Advocate = 'ADVOCATE',
  Judge = 'JUDGE',
  User = 'USER'
}

export type WhitelistCountAggregate = {
  __typename?: 'WhitelistCountAggregate';
  _all: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
};

export type WhitelistMaxAggregate = {
  __typename?: 'WhitelistMaxAggregate';
  name?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type WhitelistMinAggregate = {
  __typename?: 'WhitelistMinAggregate';
  name?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
};

export type WorkExperience = {
  __typename?: 'WorkExperience';
  companyName: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  description?: Maybe<Scalars['String']['output']>;
  employmentType: WorkType;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['String']['output'];
  isCurrentWork?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  startDate: Scalars['DateTime']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  userId: Scalars['String']['output'];
  userProfile: UserProfile;
};

export type WorkExperienceCountAggregate = {
  __typename?: 'WorkExperienceCountAggregate';
  _all: Scalars['Int']['output'];
  companyName: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  employmentType: Scalars['Int']['output'];
  endDate: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isCurrentWork: Scalars['Int']['output'];
  location: Scalars['Int']['output'];
  startDate: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userId: Scalars['Int']['output'];
};

export type WorkExperienceCreateManyUserProfileInput = {
  companyName: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  employmentType: WorkType;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isCurrentWork?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  startDate: Scalars['DateTime']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type WorkExperienceCreateManyUserProfileInputEnvelope = {
  data: Array<WorkExperienceCreateManyUserProfileInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type WorkExperienceCreateNestedManyWithoutUserProfileInput = {
  connect?: InputMaybe<Array<WorkExperienceWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<WorkExperienceCreateOrConnectWithoutUserProfileInput>>;
  create?: InputMaybe<Array<WorkExperienceCreateWithoutUserProfileInput>>;
  createMany?: InputMaybe<WorkExperienceCreateManyUserProfileInputEnvelope>;
};

export type WorkExperienceCreateOrConnectWithoutUserProfileInput = {
  create: WorkExperienceCreateWithoutUserProfileInput;
  where: WorkExperienceWhereUniqueInput;
};

export type WorkExperienceCreateWithoutUserProfileInput = {
  companyName: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTime']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  employmentType: WorkType;
  endDate?: InputMaybe<Scalars['DateTime']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isCurrentWork?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  startDate: Scalars['DateTime']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTime']['input']>;
};

export type WorkExperienceListRelationFilter = {
  every?: InputMaybe<WorkExperienceWhereInput>;
  none?: InputMaybe<WorkExperienceWhereInput>;
  some?: InputMaybe<WorkExperienceWhereInput>;
};

export type WorkExperienceMaxAggregate = {
  __typename?: 'WorkExperienceMaxAggregate';
  companyName?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  employmentType?: Maybe<WorkType>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isCurrentWork?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type WorkExperienceMinAggregate = {
  __typename?: 'WorkExperienceMinAggregate';
  companyName?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  employmentType?: Maybe<WorkType>;
  endDate?: Maybe<Scalars['DateTime']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isCurrentWork?: Maybe<Scalars['Boolean']['output']>;
  location?: Maybe<Scalars['String']['output']>;
  startDate?: Maybe<Scalars['DateTime']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  userId?: Maybe<Scalars['String']['output']>;
};

export type WorkExperienceOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type WorkExperienceScalarWhereInput = {
  AND?: InputMaybe<Array<WorkExperienceScalarWhereInput>>;
  NOT?: InputMaybe<Array<WorkExperienceScalarWhereInput>>;
  OR?: InputMaybe<Array<WorkExperienceScalarWhereInput>>;
  companyName?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  employmentType?: InputMaybe<EnumWorkTypeFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<StringFilter>;
  isCurrentWork?: InputMaybe<BoolNullableFilter>;
  location?: InputMaybe<StringNullableFilter>;
  startDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
};

export type WorkExperienceUpdateInput = {
  companyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  employmentType?: InputMaybe<EnumWorkTypeFieldUpdateOperationsInput>;
  endDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isCurrentWork?: InputMaybe<NullableBoolFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userProfile?: InputMaybe<UserProfileUpdateOneRequiredWithoutWorkExperiencesNestedInput>;
};

export type WorkExperienceUpdateManyMutationInput = {
  companyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  employmentType?: InputMaybe<EnumWorkTypeFieldUpdateOperationsInput>;
  endDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isCurrentWork?: InputMaybe<NullableBoolFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type WorkExperienceUpdateManyWithWhereWithoutUserProfileInput = {
  data: WorkExperienceUpdateManyMutationInput;
  where: WorkExperienceScalarWhereInput;
};

export type WorkExperienceUpdateManyWithoutUserProfileNestedInput = {
  connect?: InputMaybe<Array<WorkExperienceWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<WorkExperienceCreateOrConnectWithoutUserProfileInput>>;
  create?: InputMaybe<Array<WorkExperienceCreateWithoutUserProfileInput>>;
  createMany?: InputMaybe<WorkExperienceCreateManyUserProfileInputEnvelope>;
  delete?: InputMaybe<Array<WorkExperienceWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<WorkExperienceScalarWhereInput>>;
  disconnect?: InputMaybe<Array<WorkExperienceWhereUniqueInput>>;
  set?: InputMaybe<Array<WorkExperienceWhereUniqueInput>>;
  update?: InputMaybe<Array<WorkExperienceUpdateWithWhereUniqueWithoutUserProfileInput>>;
  updateMany?: InputMaybe<Array<WorkExperienceUpdateManyWithWhereWithoutUserProfileInput>>;
  upsert?: InputMaybe<Array<WorkExperienceUpsertWithWhereUniqueWithoutUserProfileInput>>;
};

export type WorkExperienceUpdateWithWhereUniqueWithoutUserProfileInput = {
  data: WorkExperienceUpdateWithoutUserProfileInput;
  where: WorkExperienceWhereUniqueInput;
};

export type WorkExperienceUpdateWithoutUserProfileInput = {
  companyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  employmentType?: InputMaybe<EnumWorkTypeFieldUpdateOperationsInput>;
  endDate?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isCurrentWork?: InputMaybe<NullableBoolFieldUpdateOperationsInput>;
  location?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  startDate?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type WorkExperienceUpsertWithWhereUniqueWithoutUserProfileInput = {
  create: WorkExperienceCreateWithoutUserProfileInput;
  update: WorkExperienceUpdateWithoutUserProfileInput;
  where: WorkExperienceWhereUniqueInput;
};

export type WorkExperienceWhereInput = {
  AND?: InputMaybe<Array<WorkExperienceWhereInput>>;
  NOT?: InputMaybe<Array<WorkExperienceWhereInput>>;
  OR?: InputMaybe<Array<WorkExperienceWhereInput>>;
  companyName?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  employmentType?: InputMaybe<EnumWorkTypeFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<StringFilter>;
  isCurrentWork?: InputMaybe<BoolNullableFilter>;
  location?: InputMaybe<StringNullableFilter>;
  startDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  userProfile?: InputMaybe<UserProfileRelationFilter>;
};

export type WorkExperienceWhereUniqueInput = {
  AND?: InputMaybe<Array<WorkExperienceWhereInput>>;
  NOT?: InputMaybe<Array<WorkExperienceWhereInput>>;
  OR?: InputMaybe<Array<WorkExperienceWhereInput>>;
  companyName?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  description?: InputMaybe<StringNullableFilter>;
  employmentType?: InputMaybe<EnumWorkTypeFilter>;
  endDate?: InputMaybe<DateTimeNullableFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  isCurrentWork?: InputMaybe<BoolNullableFilter>;
  location?: InputMaybe<StringNullableFilter>;
  startDate?: InputMaybe<DateTimeFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userId?: InputMaybe<UuidFilter>;
  userProfile?: InputMaybe<UserProfileRelationFilter>;
};

export enum WorkMode {
  Onsite = 'ONSITE',
  Remote = 'REMOTE'
}

export enum WorkType {
  Contractor = 'CONTRACTOR',
  FullTime = 'FULL_TIME',
  Internship = 'INTERNSHIP',
  PartTime = 'PART_TIME'
}

export type Langchain_Chat_Histories = {
  __typename?: 'langchain_chat_histories';
  id: Scalars['Int']['output'];
  message: Scalars['JSON']['output'];
  session_id: Scalars['String']['output'];
};

export type CreateUserMutationVariables = Exact<{
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  inviteCode?: InputMaybe<Scalars['String']['input']>;
}>;


export type CreateUserMutation = { __typename?: 'Mutation', createUser?: { __typename?: 'User', id: string, email?: string | null } | null };

export type ActivateUserMutationVariables = Exact<{
  accessToken: Scalars['String']['input'];
}>;


export type ActivateUserMutation = { __typename?: 'Mutation', activateUser: { __typename?: 'LoginData', access_token?: string | null, status?: boolean | null, error?: string | null, user?: { __typename?: 'User', id: string, uid: number, name?: string | null, avatar: string, username?: string | null, nickname?: string | null, email?: string | null, role: Role, voteRole: VoteRole, status: UserStatus, inviteCode: string, invitedBy?: string | null, hackCoin?: { __typename?: 'UserHackCoin', coin: number } | null, levelInfo?: { __typename?: 'UserLevel', level: number, exp: number } | null } | null } };

export type EmailExistsMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type EmailExistsMutation = { __typename?: 'Mutation', emailExists: boolean };

export type LoginMutationVariables = Exact<{
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type LoginMutation = { __typename?: 'Mutation', data: { __typename?: 'LoginData', access_token?: string | null, user?: { __typename?: 'User', id: string, uid: number, name?: string | null, avatar: string, username?: string | null, nickname?: string | null, email?: string | null, role: Role, voteRole: VoteRole, status: UserStatus, inviteCode: string, invitedBy?: string | null, hackCoin?: { __typename?: 'UserHackCoin', coin: number } | null, levelInfo?: { __typename?: 'UserLevel', level: number, exp: number } | null } | null } };

export type ResendConfirmEmailMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type ResendConfirmEmailMutation = { __typename?: 'Mutation', resendConfirmEmail: boolean };

export type ResetPasswordEmailMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type ResetPasswordEmailMutation = { __typename?: 'Mutation', resetPasswordEmail: boolean };

export type ResetPasswordMutationVariables = Exact<{
  accessToken: Scalars['String']['input'];
  password: Scalars['String']['input'];
}>;


export type ResetPasswordMutation = { __typename?: 'Mutation', resetPassword: boolean };

export type ListBlogsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<BlogOrderByWithRelationInput> | BlogOrderByWithRelationInput>;
  where?: InputMaybe<BlogWhereInput>;
}>;


export type ListBlogsQuery = { __typename?: 'Query', listBlogs: { __typename?: 'BlogListPaginated', total: number, data?: Array<{ __typename?: 'Blog', id: string, title: string, alias?: string | null, description: string, image: string, categories?: Array<string> | null, creatorName: string, duration: number, top: number, publishDate: any, createdAt: any, updatedAt: any }> | null } };

export type FindUniqueBlogQueryVariables = Exact<{
  where: BlogWhereUniqueInput;
}>;


export type FindUniqueBlogQuery = { __typename?: 'Query', findUniqueBlog: { __typename?: 'Blog', id: string, title: string, alias?: string | null, description: string, image: string, categories?: Array<string> | null, content: any, creatorName: string, duration: number, top: number, publishDate: any, createdAt: any, updatedAt: any } };

export type FindUserCertificationQueryVariables = Exact<{
  certificateId: Scalars['Float']['input'];
}>;


export type FindUserCertificationQuery = { __typename?: 'Query', certification: { __typename?: 'UserCertificationExtend', certificateId?: number | null, certificateTime?: any | null, username?: string | null, template: string } };

export type GetCertificationSignatureMutationVariables = Exact<{
  certificationId: Scalars['String']['input'];
  address: Scalars['String']['input'];
}>;


export type GetCertificationSignatureMutation = { __typename?: 'Mutation', signature: { __typename?: 'CertificationSignature', msg: string, signature: string } };

export type ClaimCertificationMutationVariables = Exact<{
  ecosystemId: Scalars['String']['input'];
}>;


export type ClaimCertificationMutation = { __typename?: 'Mutation', claimCertification: boolean };

export type MintCertificationMutationVariables = Exact<{
  certificationId: Scalars['String']['input'];
  txId: Scalars['String']['input'];
}>;


export type MintCertificationMutation = { __typename?: 'Mutation', mintCertification: boolean };

export type CreateCoLearningMutationVariables = Exact<{
  data: CoLearningCreateInput;
}>;


export type CreateCoLearningMutation = { __typename?: 'Mutation', createCoLearning?: { __typename?: 'CoLearning', id: string } | null };

export type UpdateCoLearningMutationVariables = Exact<{
  id: Scalars['String']['input'];
  data: CoLearningUpdateInput;
}>;


export type UpdateCoLearningMutation = { __typename?: 'Mutation', updateCoLearning?: { __typename?: 'CoLearning', name?: string | null, intro?: string | null, reward?: any | null, ecosystem?: Array<string> | null, description?: string | null, communityType?: string | null, communityUrl?: string | null } | null };

export type ListCoLearningQueryVariables = Exact<{
  where?: InputMaybe<CoLearningCoustomWhereInput>;
}>;


export type ListCoLearningQuery = { __typename?: 'Query', listCoLearning: { __typename?: 'CoLearningListPaginated', total: number, data?: Array<{ __typename?: 'CoLearning', id: string, progress?: Array<string> | null, name?: string | null, intro?: string | null, reward?: any | null, ecosystem?: Array<string> | null, description?: string | null, communityType?: string | null, communityUrl?: string | null, qrImage?: string | null, application: any, todos?: Array<{ __typename?: 'CoLearningTodo', name: string, order: number, completed: boolean, url?: string | null, type: number, id: string }> | null, events?: Array<{ __typename?: 'CoLearningEvent', endTime?: any | null, startTime?: any | null, description?: string | null, url?: string | null, title?: string | null, id: string }> | null, timeline?: { __typename?: 'CoLearningTimeline', timezone?: string | null, startTime?: any | null, endTime?: any | null } | null }> | null } };

export type ListCoLearningTodoQueryVariables = Exact<{
  orderBy?: InputMaybe<Array<CoLearningTodoOrderByWithRelationInput> | CoLearningTodoOrderByWithRelationInput>;
  where?: InputMaybe<CoLearningTodoWhereInput>;
}>;


export type ListCoLearningTodoQuery = { __typename?: 'Query', listCoLearningTodo: { __typename?: 'CoLearningTodoListPaginated', data?: Array<{ __typename?: 'CoLearningTodo', type: number, order: number, url?: string | null, name: string, id: string }> | null } };

export type CreateCoLearningMemberMutationVariables = Exact<{
  data: CoLearningMemberCreateInput;
}>;


export type CreateCoLearningMemberMutation = { __typename?: 'Mutation', createCoLearningMember?: { __typename?: 'CoLearningMember', id: string } | null };

export type CreateCustomKeywordMutationVariables = Exact<{
  data: CustomKeywordCreateInput;
}>;


export type CreateCustomKeywordMutation = { __typename?: 'Mutation', createCustomKeyword?: { __typename?: 'CustomKeyword', keyword: string } | null };

export type FindTracksQueryVariables = Exact<{ [key: string]: never; }>;


export type FindTracksQuery = { __typename?: 'Query', tracks?: Array<string> | null };

export type GlobalSearchQueryVariables = Exact<{
  keyword: Scalars['String']['input'];
}>;


export type GlobalSearchQuery = { __typename?: 'Query', globalSearch: { __typename?: 'GlobalSearchResponse', ecosystem?: Array<{ __typename?: 'EcosystemInfo', ecosystemId: string, name: string, alias?: string | null, description: string, lang: string }> | null, course?: Array<{ __typename?: 'Course', id: string, title: string, alias?: string | null, description?: string | null, image?: string | null, language?: Language | null, level?: CourseLevel | null, status: string, track?: string | null, type: CourseType, ecosystem?: Array<string> | null }> | null, hackathon?: Array<{ __typename?: 'HackathonExtend', id: string, name: string, alias: string, language?: Language | null, progress?: Array<string> | null, status: string, info?: { __typename?: 'HackathonInfo', image?: string | null, intro?: string | null } | null, rewards?: Array<{ __typename?: 'HackathonRewards', totalRewards?: number | null, name: string }> | null, timeline?: { __typename?: 'HackathonTimeline', openReviewSame: boolean, registrationClose: any, registrationOpen: any, rewardTime: any, submissionOpen: any, timeZone: string } | null }> | null, blog?: Array<{ __typename?: 'Blog', id: string, title: string, alias?: string | null, image: string, description: string, categories?: Array<string> | null, creatorName: string, publishDate: any, duration: number }> | null, glossary?: Array<{ __typename?: 'Glossary', id: string, title: string, alias?: string | null, image: string, description: string, categories?: Array<string> | null, tracks?: Array<string> | null, publishDate: any, creatorName: string }> | null, event?: Array<{ __typename?: 'Events', id: string, name: string, endTime?: any | null, eventUrl?: string | null, description?: string | null, prUrl?: string | null, tags?: Array<string> | null, startTime: any }> | null, project?: Array<{ __typename?: 'ProjectExtend', id: string, name: string, alias: string, status: string, logo?: string | null, ecology?: Array<string> | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', avatar?: string | null, nickname?: string | null, username?: string | null } | null }> | null, job?: Array<{ __typename?: 'JobStation', id: string, name: string, description?: any | null, companyName: string, status: string, tags?: Array<string> | null, website?: string | null, createdAt: any, companyLogo: string, workMode: WorkMode, workType: WorkType, maxSalary?: number | null, minSalary?: number | null, location?: string | null, favorites?: Array<{ __typename?: 'JobFavorite', jobId: string }> | null }> | null } };

export type ListCoursesQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<CourseV2OrderByWithRelationInput> | CourseV2OrderByWithRelationInput>;
  where?: InputMaybe<CourseV2WhereInput>;
}>;


export type ListCoursesQuery = { __typename?: 'Query', listCourses: { __typename?: 'CourseListPaginated', total: number, data?: Array<{ __typename?: 'CourseV2', id: string, title: string, alias?: string | null, subTitle?: string | null, description?: string | null, image?: string | null, type: CourseType, optional: any, intendedLearners?: any | null, knowledgeGain?: any | null, level?: CourseLevel | null, language?: Language | null, track?: string | null, creatorId?: string | null, duration: number, peopleJoined: number, status: string, documentationId?: string | null, ecosystem?: Array<string> | null, lang: string, createdAt: any, updatedAt: any }> | null } };

export type FindCourseDetailQueryVariables = Exact<{
  where?: InputMaybe<CourseV2WhereInput>;
}>;


export type FindCourseDetailQuery = { __typename?: 'Query', findCourseDetail: { __typename?: 'CourseExtend', title: string, alias?: string | null, description?: string | null, language?: Language | null, duration: number, intendedLearners?: any | null, knowledgeGain?: any | null, image?: string | null, currentPageId?: string | null, progress?: number | null, units?: Array<{ __typename?: 'UnitExtend', id: string, title: string, progress?: number | null, nextPageId?: string | null, description?: string | null, pages?: Array<{ __typename?: 'PageExtend', id: string, title: string, isCompleted?: boolean | null }> | null }> | null, ecosystemInfoList?: Array<{ __typename?: 'EcosystemExtend', image: string, type?: string | null, language: Language }> | null } };

export type FindCourseUnitsQueryVariables = Exact<{
  where?: InputMaybe<CourseV2WhereInput>;
}>;


export type FindCourseUnitsQuery = { __typename?: 'Query', findCourseDetail: { __typename?: 'CourseExtend', currentPageId?: string | null, nextPageId?: string | null, units?: Array<{ __typename?: 'UnitExtend', title: string, description?: string | null, progress?: number | null, pages?: Array<{ __typename?: 'PageExtend', id: string, title: string, isCompleted?: boolean | null }> | null }> | null } };

export type FindUniquePageQueryVariables = Exact<{
  where: PageV2WhereUniqueInput;
}>;


export type FindUniquePageQuery = { __typename?: 'Query', findUniquePage: { __typename?: 'PageV2', id: string, title: string, content: any, type: PageType, unitPage?: Array<{ __typename?: 'UnitPage', pageId: string, unitId: string }> | null } };

export type ListEcosystemInfosQueryVariables = Exact<{
  where?: InputMaybe<EcosystemInfoWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ListEcosystemInfosQuery = { __typename?: 'Query', listEcosystemInfos: { __typename?: 'EcosystemInfoListPaginated', data?: Array<{ __typename?: 'EcosystemInfo', ecosystemId: string, lang: string, name: string, alias?: string | null, description: string, basic: { __typename?: 'Ecosystem', id: string, image: string, track: string, language: Language, type?: string | null, tags?: Array<string> | null, createdAt: any, updatedAt: any } }> | null } };

export type ListEcosystemsQueryVariables = Exact<{
  where?: InputMaybe<EcosystemWhereInput>;
}>;


export type ListEcosystemsQuery = { __typename?: 'Query', listEcosystems: { __typename?: 'EcosystemListPaginated', data?: Array<{ __typename?: 'Ecosystem', id: string, image: string, type?: string | null, language: Language, tags?: Array<string> | null, track: string, createdAt: any, updatedAt: any }> | null } };

export type FindEcosystemInfoQueryVariables = Exact<{
  where: EcosystemInfoWhereUniqueInput;
}>;


export type FindEcosystemInfoQuery = { __typename?: 'Query', ecosystem?: { __typename?: 'EcosystemInfoExtend', ecosystemId: string, name: string, description: string, progress?: number | null, basic: { __typename?: 'Ecosystem', type?: string | null, image: string }, phases?: Array<{ __typename?: 'EcosystemPhaseExtend', id: string, coin?: number | null, title: string, progress?: number | null, order: number, extra?: any | null, courses?: Array<{ __typename?: 'CourseExtend', id: string, alias?: string | null, type: CourseType, title: string, progress?: number | null, currentPageId?: string | null, units?: Array<{ __typename?: 'UnitExtend', id: string, currentPageId?: string | null, title: string, progress?: number | null }> | null }> | null, quizzes?: Array<{ __typename?: 'PhaseQuizExtend', id: string, order: number, progress?: number | null, description?: string | null, quizList?: Array<{ __typename?: 'DailyChallengeExtend', id: string }> | null }> | null }> | null, certifications?: Array<{ __typename?: 'CertificationExtend', id: string, name: string, description: string, image: string }> | null } | null };

export type ListActiveEcosystemInfosQueryVariables = Exact<{
  lang: Scalars['String']['input'];
}>;


export type ListActiveEcosystemInfosQuery = { __typename?: 'Query', ecosystems: Array<{ __typename?: 'EcosystemInfo', ecosystemId: string, basic: { __typename?: 'Ecosystem', image: string, type?: string | null } }> };

export type FindActiveEcosystemQueryVariables = Exact<{ [key: string]: never; }>;


export type FindActiveEcosystemQuery = { __typename?: 'Query', ecosystem?: string | null };

export type SwitchEcosystemMutationVariables = Exact<{
  ecosystemId?: InputMaybe<Scalars['String']['input']>;
}>;


export type SwitchEcosystemMutation = { __typename?: 'Mutation', switchEcosystem: boolean };

export type CertificateProgressQueryVariables = Exact<{
  where: EcosystemInfoWhereUniqueInput;
}>;


export type CertificateProgressQuery = { __typename?: 'Query', certificate?: { __typename?: 'CertificationProgress', id: string, name: string, description: string, image: string, progress?: number | null } | null };

export type ListEventsQueryVariables = Exact<{
  where?: InputMaybe<EventsWhereInput>;
  orderBy?: InputMaybe<Array<EventsOrderByWithRelationInput> | EventsOrderByWithRelationInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ListEventsQuery = { __typename?: 'Query', listEvents: { __typename?: 'EventsListPaginated', total: number, data?: Array<{ __typename?: 'Events', name: string, medias?: Array<string> | null, location?: string | null, description?: string | null, startTime: any, eventUrl?: string | null, prUrl?: string | null }> | null } };

export type GetAllFaucetsQueryVariables = Exact<{
  where?: InputMaybe<FaucetWhereInput>;
}>;


export type GetAllFaucetsQuery = { __typename?: 'Query', listFaucets: { __typename?: 'FaucetListPaginated', data?: Array<{ __typename?: 'Faucet', chainId: number, name: string, thumbnail: string, amount: any, symbol: string, balance: any }> | null } };

export type GetFaucetDetailByIdQueryVariables = Exact<{
  where?: InputMaybe<FaucetWhereInput>;
}>;


export type GetFaucetDetailByIdQuery = { __typename?: 'Query', findFirstFaucet: { __typename?: 'Faucet', chainId: number, name: string, thumbnail: string, amount: any, symbol: string, balance: any, owner: string } };

export type ListFaucetsClaimRecordByChainIdQueryVariables = Exact<{
  chainId: Scalars['String']['input'];
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ListFaucetsClaimRecordByChainIdQuery = { __typename?: 'Query', listFaucetsClaimRecordByChainId: { __typename?: 'UserClaimFaucetRecordListPaginated', total: number, data?: Array<{ __typename?: 'UserClaimFaucetRecord', exportUrl: string, claimTime: any }> | null } };

export type CreateFaucetClaimMutationVariables = Exact<{
  chainId: Scalars['Int']['input'];
  address: Scalars['String']['input'];
}>;


export type CreateFaucetClaimMutation = { __typename?: 'Mutation', createFaucetClaim?: { __typename?: 'FaucetClaimResponse', exportUrl: string } | null };

export type ListGlossarysQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ListGlossarysQuery = { __typename?: 'Query', listGlossarys: { __typename?: 'GlossaryListPaginated', data?: Array<{ __typename?: 'Glossary', alias?: string | null, categories?: Array<string> | null, id: string, title: string, description: string, image: string, tracks?: Array<string> | null, creatorName: string, duration: number, top: number, publishDate: any, createdAt: any, updatedAt: any }> | null } };

export type ListGlossarysTracksQueryVariables = Exact<{ [key: string]: never; }>;


export type ListGlossarysTracksQuery = { __typename?: 'Query', listGlossarysTracks: Array<string | null> };

export type FindUniqueGlossaryQueryVariables = Exact<{
  where: GlossaryWhereUniqueInput;
}>;


export type FindUniqueGlossaryQuery = { __typename?: 'Query', findUniqueGlossary: { __typename?: 'Glossary', id: string, title: string, alias?: string | null, description: string, image: string, categories?: Array<string> | null, tracks?: Array<string> | null, content: any, creatorName: string, duration: number, top: number, publishDate: any, createdAt: any, updatedAt: any } };

export type GetAllHackathonInfoQueryVariables = Exact<{
  where?: InputMaybe<HackathonWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonOrderByWithRelationInput> | HackathonOrderByWithRelationInput>;
  status?: InputMaybe<HackathonStatus>;
}>;


export type GetAllHackathonInfoQuery = { __typename?: 'Query', listHackathons: { __typename?: 'HackathonListPaginated', total: number, data?: Array<{ __typename?: 'HackathonExtend', id: string, name: string, participants: number, alias: string, status: string, projectCount?: number | null, priority: number, ecosystem?: Array<{ __typename?: 'EcosystemExtend', image: string, type?: string | null }> | null, members?: Array<{ __typename?: 'HackathonMemberExtend', avatar?: string | null }> | null, info?: { __typename?: 'HackathonInfo', host?: string | null, image?: string | null, intro?: string | null, levelTag?: string | null } | null, timeline?: { __typename?: 'HackathonTimeline', rewardTime: any, submissionClose: any, submissionOpen: any, registrationClose: any, registrationOpen: any, openReviewSame: boolean, timeZone: string } | null, rewards?: Array<{ __typename?: 'HackathonRewards', totalRewards?: number | null, currency: string }> | null }> | null } };

export type HighlightProjectQueryVariables = Exact<{
  where?: InputMaybe<ProjectWhereInput>;
}>;


export type HighlightProjectQuery = { __typename?: 'Query', highlightProject?: Array<{ __typename?: 'ProjectExtend', id: string, alias: string, logo?: string | null, name: string, ecology?: Array<string> | null, tracks?: Array<string> | null, teachStack?: Array<string> | null, winner?: Array<{ __typename?: 'HackathonWinnerExtend', name: string }> | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', avatar?: string | null, username?: string | null, nickname?: string | null } | null }> | null };

export type HighlightBuilderQueryVariables = Exact<{ [key: string]: never; }>;


export type HighlightBuilderQuery = { __typename?: 'Query', highlightBuilder: Array<{ __typename?: 'HackathonMemberExtend', avatar?: string | null, nickname?: string | null, username?: string | null, location?: string | null, bio?: string | null, profile?: { __typename?: 'UserProfile', techStack: any } | null }> };

export type ListHackathonsByOrganizerQueryVariables = Exact<{
  status: OrganizerHackathonStatus;
}>;


export type ListHackathonsByOrganizerQuery = { __typename?: 'Query', listHackathonsByOrganizer: { __typename?: 'HackathonListPaginated', data?: Array<{ __typename?: 'HackathonExtend', progress?: Array<string> | null, id: string, name: string, projectCount?: number | null, participants: number, alias: string, info?: { __typename?: 'HackathonInfo', intro?: string | null, image?: string | null } | null, timeline?: { __typename?: 'HackathonTimeline', submissionClose: any, submissionOpen: any, registrationClose: any, registrationOpen: any, rewardTime: any } | null, members?: Array<{ __typename?: 'HackathonMemberExtend', avatar?: string | null }> | null }> | null } };

export type FindOrganizerHackathonIncrecementInfoQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type FindOrganizerHackathonIncrecementInfoQuery = { __typename?: 'Query', findOrganizerHackathonIncrecementInfo?: { __typename?: 'OrganizerHackathonIncrecementInfo', application?: number | null, confirmation?: number | null, pageView?: number | null, submission?: number | null, todayApplication?: number | null, todayConfirmation?: number | null, todayPageView?: number | null, todaySubmission?: number | null, winner?: number | null } | null };

export type ListOrganizerApplicationQueryVariables = Exact<{
  where?: InputMaybe<HackathonMemberWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonMemberOrderByWithRelationInput> | HackathonMemberOrderByWithRelationInput>;
}>;


export type ListOrganizerApplicationQuery = { __typename?: 'Query', listOrganizerApplication: { __typename?: 'HackathonMemberExtendListPaginated', data?: Array<{ __typename?: 'HackathonMemberExtend', bio?: string | null, status: string, location?: string | null, username?: string | null, weChat?: string | null, info: any, avatar?: string | null, github?: string | null, email?: string | null, discord?: string | null, createdAt: any, linkedIn?: string | null, userId: string, twitter?: string | null, telegram?: string | null, id: string, isSubmitted?: boolean | null, isRegister: boolean, registerConfirm: boolean }> | null } };

export type ListOrganizerSubmissionProjectQueryVariables = Exact<{
  where?: InputMaybe<ProjectWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput> | ProjectOrderByWithRelationInput>;
}>;


export type ListOrganizerSubmissionProjectQuery = { __typename?: 'Query', listOrganizerSubmissionProject?: { __typename?: 'ProjectListPaginated', data?: Array<{ __typename?: 'ProjectExtend', name: string, id: string, createdAt: any, tracks?: Array<string> | null, demoVideo?: string | null, logo?: string | null, status: string, pitchVideo?: string | null, location?: string | null, prizeTrack?: string | null, teachStack?: Array<string> | null, wallet?: string | null, team?: { __typename?: 'HackathonTeamExtend', members?: Array<{ __typename?: 'HackathonMemberExtend', info: any, createdAt: any, username?: string | null, location?: string | null, avatar?: string | null, memberType?: string | null, bio?: string | null, nickname?: string | null }> | null } | null, detail?: { __typename?: 'ProjectDetail', detailedIntro?: string | null, oneLineIntro?: string | null } | null, addition?: { __typename?: 'ProjectAddition', contract?: string | null, githubLink?: string | null, isOpenSource: boolean } | null, ecosystem?: Array<{ __typename?: 'EcosystemExtend', image: string, id: string }> | null }> | null } | null };

export type ListOrganizerJudgeQueryVariables = Exact<{
  where?: InputMaybe<HackathonJudgeWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<HackathonJudgeOrderByWithRelationInput> | HackathonJudgeOrderByWithRelationInput>;
}>;


export type ListOrganizerJudgeQuery = { __typename?: 'Query', listOrganizerJudge?: { __typename?: 'OrganizerHackathonJudgePaginated', data?: Array<{ __typename?: 'HackathonJudgeExtend', criteria?: any | null, judgeTotalVote?: number | null, judgeProjectVote?: number | null, judgeMode?: string | null, rewardName: string, id: number, totalVote?: number | null, voteMode?: string | null, userTotalVotes: number, announce: boolean, hackathon: { __typename?: 'Hackathon', name: string, timeline?: { __typename?: 'HackathonTimeline', rewardTime: any, submissionClose: any } | null }, judgeAccountInfo?: Array<{ __typename?: 'JudgeAccountInfo', avatar?: string | null, nickname?: string | null }> | null, reward: { __typename?: 'HackathonRewards', name: string, rewards?: any | null, totalRewards?: number | null, order: number } }> | null } | null };

export type ListOrganizerJudgeProjectQueryVariables = Exact<{
  where?: InputMaybe<ProjectWhereInput>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput> | ProjectOrderByWithRelationInput>;
}>;


export type ListOrganizerJudgeProjectQuery = { __typename?: 'Query', listOrganizerJudgeProject?: { __typename?: 'JudgeProjectInfoList', projects?: Array<{ __typename?: 'ProjectInfo', name: string, id: string, hackathonId?: string | null, tracks?: Array<string> | null, logo?: string | null, vote: number, team?: { __typename?: 'HackathonTeamExtend', members?: Array<{ __typename?: 'HackathonMemberExtend', nickname?: string | null, memberType?: string | null, username?: string | null }> | null } | null, rewards?: Array<{ __typename?: 'ProjectVotingReward', name?: string | null, rank?: { __typename?: 'Rank', rank?: number | null } | null }> | null, fixOrSocreVote?: { __typename?: 'FixedVote', rank?: number | null, totalVotes?: number | null, userVotes?: number | null, judgeVotes?: number | null, isIncrease?: boolean | null } | { __typename?: 'ScoreVote', rank?: number | null, finalScore?: number | null, scoresMember?: Array<{ __typename?: 'ScoreMember', avatar?: string | null, name?: string | null, score?: number | null }> | null } | null }> | null, reward?: { __typename?: 'HackathonRewards', rewards?: any | null, mode: string, name: string, id: number } | null } | null };

export type FindListTemplateQueryVariables = Exact<{
  id: Scalars['String']['input'];
  mode: ModeEnum;
}>;


export type FindListTemplateQuery = { __typename?: 'Query', findListTemplate?: { __typename?: 'FindListTemplate', timeline?: { __typename?: 'HackathonTimeline', submissionClose: any, rewardTime: any, submissionOpen: any } | null, registration?: Array<{ __typename?: 'Template', template?: string | null, disable?: boolean | null, type?: string | null, receivers?: number | null }> | null, reward?: Array<{ __typename?: 'Template', template?: string | null, type?: string | null, disable?: boolean | null, receivers?: number | null }> | null, submission?: Array<{ __typename?: 'Template', template?: string | null, type?: string | null, disable?: boolean | null, receivers?: number | null }> | null, judging?: Array<{ __typename?: 'Template', receivers?: number | null, disable?: boolean | null, template?: string | null, type?: string | null }> | null } | null };

export type FindReceiversQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type FindReceiversQuery = { __typename?: 'Query', findReceivers?: Array<{ __typename?: 'Receivers', count: number, type: string }> | null };

export type UpdateManyOrganizerApplicationMemberStatusMutationVariables = Exact<{
  ids: Array<Scalars['String']['input']> | Scalars['String']['input'];
  joinStatus: HackathonMemberJoinStatus;
}>;


export type UpdateManyOrganizerApplicationMemberStatusMutation = { __typename?: 'Mutation', updateManyOrganizerApplicationMemberStatus?: number | null };

export type CreateAndUpdateHackathonAnnouncementMutationVariables = Exact<{
  data: HackathonAnnouncementInput;
}>;


export type CreateAndUpdateHackathonAnnouncementMutation = { __typename?: 'Mutation', createAndUpdateHackathonAnnouncement?: { __typename?: 'HackathonAnnouncement', id: number } | null };

export type ListHackathonAnnouncementQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type ListHackathonAnnouncementQuery = { __typename?: 'Query', listHackathonAnnouncement?: Array<{ __typename?: 'HackathonAnnouncement', actualTime?: any | null, message?: string | null, receivers?: string | null, title?: string | null, id: number, timezone?: string | null, rightNow?: boolean | null }> | null };

export type ListOrganizerDistributionUtmSourcesQueryVariables = Exact<{
  where?: InputMaybe<HackathonUtmWhereInput>;
}>;


export type ListOrganizerDistributionUtmSourcesQuery = { __typename?: 'Query', listOrganizerDistributionUTMSources?: Array<{ __typename?: 'HackathonUTMExtend', color?: string | null, sourceName?: string | null, url?: string | null, id?: number | null }> | null };

export type CreateHackathonUtmMutationVariables = Exact<{
  data: HackathonUtmCreateInput;
}>;


export type CreateHackathonUtmMutation = { __typename?: 'Mutation', createHackathonUTM?: { __typename?: 'HackathonUTMExtend', id?: number | null } | null };

export type UpdateHackathonUtmMutationVariables = Exact<{
  data: HackathonUtmUpdateInput;
  where: HackathonUtmWhereUniqueInput;
}>;


export type UpdateHackathonUtmMutation = { __typename?: 'Mutation', updateHackathonUTM?: { __typename?: 'HackathonUTMExtend', id?: number | null } | null };

export type FindDistributionGrouthQueryVariables = Exact<{
  id?: InputMaybe<Scalars['String']['input']>;
  growthType?: InputMaybe<GrowthType>;
  growthFilter?: InputMaybe<GrowthFilter>;
}>;


export type FindDistributionGrouthQuery = { __typename?: 'Query', findDistributionGrouth?: Array<{ __typename?: 'HackathonUTMExtend', color?: string | null, id?: number | null, sourceName?: string | null, data?: Array<{ __typename?: 'HackathonUTMStatisticsData', count?: number | null, time?: string | null }> | null }> | null };

export type DeleteHackathonAnnouncementMutationVariables = Exact<{
  id: Scalars['Float']['input'];
  hackathonId: Scalars['String']['input'];
}>;


export type DeleteHackathonAnnouncementMutation = { __typename?: 'Mutation', deleteHackathonAnnouncement?: { __typename?: 'HackathonAnnouncement', id: number } | null };

export type FindDistributionQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type FindDistributionQuery = { __typename?: 'Query', findDistribution?: { __typename?: 'OrganizerDistribution', pageView?: Array<{ __typename?: 'OrganizerDistributionOrigin', rate?: number | null, count?: number | null, id?: number | null, color?: string | null, sourceName?: string | null }> | null, submission?: Array<{ __typename?: 'OrganizerDistributionOrigin', sourceName?: string | null, rate?: number | null, id?: number | null, count?: number | null, color?: string | null }> | null, registration?: Array<{ __typename?: 'OrganizerDistributionOrigin', id?: number | null, color?: string | null, count?: number | null, rate?: number | null, sourceName?: string | null }> | null, winner?: Array<{ __typename?: 'OrganizerDistributionOrigin', id?: number | null, color?: string | null, count?: number | null, rate?: number | null, sourceName?: string | null }> | null } | null };

export type AnnounceJudgeMutationVariables = Exact<{
  id: Scalars['String']['input'];
  hackathonId: Scalars['String']['input'];
}>;


export type AnnounceJudgeMutation = { __typename?: 'Mutation', announceJudge?: Array<{ __typename?: 'HackathonWinnerExtend', id: number }> | null };

export type FindHackathonWinnerQueryVariables = Exact<{
  id: Scalars['String']['input'];
  prizeTrack: Scalars['String']['input'];
}>;


export type FindHackathonWinnerQuery = { __typename?: 'Query', findHackathonWinner: Array<{ __typename?: 'HackathonWinnerExtend', name: string, hackathonId: string, type: string, rewardId: number, projectId: string, id: number, place?: number | null, project: { __typename?: 'Project', name: string, logo?: string | null }, rankAndVote?: { __typename?: 'RankAndVote', rank?: number | null, totalVotes?: number | null } | null, winnersInfo?: Array<{ __typename?: 'HackathonMemberExtend', nickname?: string | null }> | null }> };

export type UpdateHackathonWinnerMutationVariables = Exact<{
  id: Scalars['Int']['input'];
  data: HackathonWinnerInputExtend;
}>;


export type UpdateHackathonWinnerMutation = { __typename?: 'Mutation', updateHackathonWinner?: number | null };

export type CreateHackathonWinnerMutationVariables = Exact<{
  data: HackathonWinnerInputExtend;
}>;


export type CreateHackathonWinnerMutation = { __typename?: 'Mutation', createHackathonWinner?: { __typename?: 'HackathonWinnerExtend', id: number } | null };

export type ToggleScheduleMutationVariables = Exact<{
  id: Scalars['String']['input'];
  type: Array<TemplateType> | TemplateType;
  isStart: Scalars['Boolean']['input'];
}>;


export type ToggleScheduleMutation = { __typename?: 'Mutation', toggleSchedule: string };

export type HackathonBaseInfoFragment = { __typename?: 'HackathonExtend', id: string, name: string, alias: string, creatorId?: string | null, status: string, currentStatus?: Array<HackathonJoinState> | null, sectionSequences?: Array<string> | null, enable: boolean, track?: string | null, language?: Language | null, progress?: Array<string> | null, participants: number, pageView: number, priority: number, createdAt: any, updatedAt: any, projectCount?: number | null, todos?: Array<{ __typename?: 'HackathonTodoExtend', id: string, name: string, intro?: string | null, url?: string | null, type: string, metadata: any, order: number, completed?: boolean | null }> | null, timeline?: { __typename?: 'HackathonTimeline', timeZone: string, submissionOpen: any, submissionClose: any, rewardTime: any, registrationOpen: any, registrationClose: any, openReviewSame: boolean, schedule?: Array<{ __typename?: 'HackathonSchedule', id: string, eventName: string, openTime: any, closeTime: any, eventURL?: string | null, description?: string | null, type: string }> | null } | null, ecosystem?: Array<{ __typename?: 'EcosystemExtend', id: string, image: string, type?: string | null }> | null, members?: Array<{ __typename?: 'HackathonMemberExtend', username?: string | null, userId: string, nickname?: string | null, avatar?: string | null }> | null };

export type FindUniqueHackathonQueryVariables = Exact<{
  where: HackathonWhereUniqueInput;
}>;


export type FindUniqueHackathonQuery = { __typename?: 'Query', findUniqueHackathon?: { __typename?: 'HackathonExtend', id: string, name: string, alias: string, creatorId?: string | null, status: string, currentStatus?: Array<HackathonJoinState> | null, sectionSequences?: Array<string> | null, enable: boolean, track?: string | null, language?: Language | null, progress?: Array<string> | null, participants: number, pageView: number, priority: number, createdAt: any, updatedAt: any, projectCount?: number | null, info?: { __typename?: 'HackathonInfo', id: string, host?: string | null, intro?: string | null, ecosystem?: Array<string> | null, levelTag?: string | null, description?: any | null, conduct?: string | null, mode?: HackathonMode | null, allowSubmission: boolean, address?: string | null, application: any, submission: any, sections: any, image?: string | null } | null, links?: { __typename?: 'HackathonLinks', website?: string | null, links: any, id: string, email: string } | null, judge?: Array<{ __typename?: 'HackathonJudgeUpdate', voteMode?: string | null, totalVote?: number | null, setWinner: boolean, rewardName: string, projectJudgeCount?: number | null, userTotalVotes: number, judgeTotalVote?: number | null, judgeProjectVote?: number | null, judgeMode?: string | null, id: number, disableJudge?: boolean | null, criteria?: any | null, announce: boolean, userTags?: Array<string> | null, judgeAccounts?: Array<{ __typename?: 'JudgeAccount', password?: string | null, avatar?: string | null, nickname?: string | null, email?: string | null, id?: string | null }> | null }> | null, rewards?: Array<{ __typename?: 'HackathonRewards', id: number, hackathonId: string, name: string, mode: string, currency: string, rewards?: any | null, totalRewards?: number | null, rule?: any | null, order: number }> | null, todos?: Array<{ __typename?: 'HackathonTodoExtend', id: string, name: string, intro?: string | null, url?: string | null, type: string, metadata: any, order: number, completed?: boolean | null }> | null, timeline?: { __typename?: 'HackathonTimeline', timeZone: string, submissionOpen: any, submissionClose: any, rewardTime: any, registrationOpen: any, registrationClose: any, openReviewSame: boolean, schedule?: Array<{ __typename?: 'HackathonSchedule', id: string, eventName: string, openTime: any, closeTime: any, eventURL?: string | null, description?: string | null, type: string }> | null } | null, ecosystem?: Array<{ __typename?: 'EcosystemExtend', id: string, image: string, type?: string | null }> | null, members?: Array<{ __typename?: 'HackathonMemberExtend', username?: string | null, userId: string, nickname?: string | null, avatar?: string | null }> | null } | null };

export type HackathonListProjectsQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput> | ProjectOrderByWithRelationInput>;
}>;


export type HackathonListProjectsQuery = { __typename?: 'Query', listProjects: { __typename?: 'ProjectListPaginated', total: number, data?: Array<{ __typename?: 'ProjectExtend', id: string, hackathonId?: string | null, hackathonName?: string | null, status: string, creatorId?: string | null, teamId?: string | null, versionName?: string | null, type?: ProjectType | null, fromId?: string | null, isSubmit: boolean, lock: boolean, name: string, alias: string, logo?: string | null, location?: string | null, prizeTrack?: string | null, ecology?: Array<string> | null, tracks?: Array<string> | null, wallet?: string | null, fields: any, createdAt: any, updatedAt: any, vote: number, isLiked?: boolean | null, likes?: number | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null, detailedIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', avatar?: string | null, nickname?: string | null } | null, winner?: Array<{ __typename?: 'HackathonWinnerExtend', place?: number | null, id: number, name: string }> | null }> | null } };

export type ListHackathonsBySelfQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  page?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<HackathonStatus>;
}>;


export type ListHackathonsBySelfQuery = { __typename?: 'Query', listHackathonsBySelf: { __typename?: 'HackathonListPaginated', total: number, data?: Array<{ __typename?: 'HackathonExtend', id: string, name: string, alias: string, creatorId?: string | null, status: string, currentStatus?: Array<HackathonJoinState> | null, sectionSequences?: Array<string> | null, enable: boolean, track?: string | null, language?: Language | null, progress?: Array<string> | null, participants: number, pageView: number, priority: number, createdAt: any, updatedAt: any, projectCount?: number | null, info?: { __typename?: 'HackathonInfo', host?: string | null, intro?: string | null, description?: any | null, mode?: HackathonMode | null, allowSubmission: boolean, image?: string | null } | null, rewards?: Array<{ __typename?: 'HackathonRewards', id: number, name: string, currency: string, totalRewards?: number | null }> | null, submitted?: Array<{ __typename?: 'Project', logo?: string | null, alias: string, name: string, isSubmit: boolean, prizeTrack?: string | null, progress: number, status: string, id: string, creatorId?: string | null, tracks?: Array<string> | null }> | null, members?: Array<{ __typename?: 'HackathonMemberExtend', userId: string, teamId?: string | null, id: string, nickname?: string | null, avatar?: string | null, email?: string | null, username?: string | null }> | null, todos?: Array<{ __typename?: 'HackathonTodoExtend', id: string, name: string, intro?: string | null, url?: string | null, type: string, metadata: any, order: number, completed?: boolean | null }> | null, timeline?: { __typename?: 'HackathonTimeline', timeZone: string, submissionOpen: any, submissionClose: any, rewardTime: any, registrationOpen: any, registrationClose: any, openReviewSame: boolean, schedule?: Array<{ __typename?: 'HackathonSchedule', id: string, eventName: string, openTime: any, closeTime: any, eventURL?: string | null, description?: string | null, type: string }> | null } | null, ecosystem?: Array<{ __typename?: 'EcosystemExtend', id: string, image: string, type?: string | null }> | null }> | null } };

export type ListHackathonsQueryVariables = Exact<{
  status?: InputMaybe<HackathonStatus>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['String']['input']>;
}>;


export type ListHackathonsQuery = { __typename?: 'Query', listHackathons: { __typename?: 'HackathonListPaginated', total: number, data?: Array<{ __typename?: 'HackathonExtend', id: string, name: string, alias: string, creatorId?: string | null, status: string, currentStatus?: Array<HackathonJoinState> | null, sectionSequences?: Array<string> | null, enable: boolean, track?: string | null, language?: Language | null, progress?: Array<string> | null, participants: number, pageView: number, priority: number, createdAt: any, updatedAt: any, projectCount?: number | null, info?: { __typename?: 'HackathonInfo', intro?: string | null, image?: string | null, host?: string | null } | null, rewards?: Array<{ __typename?: 'HackathonRewards', name: string, id: number }> | null, todos?: Array<{ __typename?: 'HackathonTodoExtend', id: string, name: string, intro?: string | null, url?: string | null, type: string, metadata: any, order: number, completed?: boolean | null }> | null, timeline?: { __typename?: 'HackathonTimeline', timeZone: string, submissionOpen: any, submissionClose: any, rewardTime: any, registrationOpen: any, registrationClose: any, openReviewSame: boolean, schedule?: Array<{ __typename?: 'HackathonSchedule', id: string, eventName: string, openTime: any, closeTime: any, eventURL?: string | null, description?: string | null, type: string }> | null } | null, ecosystem?: Array<{ __typename?: 'EcosystemExtend', id: string, image: string, type?: string | null }> | null, members?: Array<{ __typename?: 'HackathonMemberExtend', username?: string | null, userId: string, nickname?: string | null, avatar?: string | null }> | null }> | null } };

export type CreateHackathonMutationVariables = Exact<{
  name: Scalars['String']['input'];
}>;


export type CreateHackathonMutation = { __typename?: 'Mutation', hackathon?: { __typename?: 'HackathonExtend', id: string, alias: string, name: string, createdAt: any } | null };

export type UpdateHackathonMutationVariables = Exact<{
  updateHackathonId: Scalars['String']['input'];
  data: HackathonUpdateInputExtend;
}>;


export type UpdateHackathonMutation = { __typename?: 'Mutation', hackathon?: { __typename?: 'HackathonExtend', id: string, alias: string, updatedAt: any } | null };

export type CreateHackathonRewordMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  data: HackathonRewardCreateInputExtend;
}>;


export type CreateHackathonRewordMutation = { __typename?: 'Mutation', reward?: { __typename?: 'HackathonRewards', id: number, name: string } | null };

export type UpdateHackathonRewardMutationVariables = Exact<{
  rewardId: Scalars['String']['input'];
  data: HackathonRewardUpdateInputExtend;
}>;


export type UpdateHackathonRewardMutation = { __typename?: 'Mutation', reward?: { __typename?: 'HackathonRewards', id: number, name: string } | null };

export type DeleteHackathonRewardMutationVariables = Exact<{
  rewardId: Scalars['String']['input'];
}>;


export type DeleteHackathonRewardMutation = { __typename?: 'Mutation', deleteHackathonReward?: boolean | null };

export type SendContactEmailMutationVariables = Exact<{
  email: Scalars['String']['input'];
}>;


export type SendContactEmailMutation = { __typename?: 'Mutation', sendContactEmail?: boolean | null };

export type VerifyContactEmailMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  code: Scalars['String']['input'];
}>;


export type VerifyContactEmailMutation = { __typename?: 'Mutation', verifyContactEmail?: boolean | null };

export type UpdateJudgeMutationVariables = Exact<{
  judgeId: Scalars['String']['input'];
  data: HackathonJudgeUpdateInputExtend;
}>;


export type UpdateJudgeMutation = { __typename?: 'Mutation', updateJudge?: { __typename?: 'HackathonJudge', id: number } | null };

export type CreateJudgeAccountMutationVariables = Exact<{
  judgeId: Scalars['String']['input'];
}>;


export type CreateJudgeAccountMutation = { __typename?: 'Mutation', createJudgeAccount?: { __typename?: 'JudgeAccount', id?: string | null, email?: string | null, nickname?: string | null, avatar?: string | null, password?: string | null } | null };

export type UpdateJudgeAccountMutationVariables = Exact<{
  accountId: Scalars['String']['input'];
  nickname: Scalars['String']['input'];
  judgeId: Scalars['String']['input'];
}>;


export type UpdateJudgeAccountMutation = { __typename?: 'Mutation', updateJudgeAccount?: { __typename?: 'JudgeAccount', id?: string | null, email?: string | null, nickname?: string | null, avatar?: string | null, password?: string | null } | null };

export type DeleteJudgeAccountMutationVariables = Exact<{
  judgeId: Scalars['String']['input'];
  accountId: Scalars['String']['input'];
}>;


export type DeleteJudgeAccountMutation = { __typename?: 'Mutation', deleteJudgeAccount?: boolean | null };

export type QueryQueryVariables = Exact<{
  userTags: Array<UserJudgeType> | UserJudgeType;
}>;


export type QueryQuery = { __typename?: 'Query', getUserJudgeCount?: number | null };

export type CreateHackathonScheduleMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  data: HackathonScheduleCreateInputExtend;
}>;


export type CreateHackathonScheduleMutation = { __typename?: 'Mutation', createHackathonSchedule?: { __typename?: 'HackathonSchedule', id: string, eventName: string, openTime: any, closeTime: any, eventURL?: string | null, description?: string | null, type: string } | null };

export type UpdateHackathonScheduleMutationVariables = Exact<{
  scheduleId: Scalars['String']['input'];
  data: HackathonScheduleUpdateInputExtend;
}>;


export type UpdateHackathonScheduleMutation = { __typename?: 'Mutation', updateHackathonSchedule?: { __typename?: 'HackathonSchedule', id: string, eventName: string, openTime: any, closeTime: any, eventURL?: string | null, description?: string | null, type: string } | null };

export type DeleteHackathonScheduleMutationVariables = Exact<{
  scheduleId: Scalars['String']['input'];
}>;


export type DeleteHackathonScheduleMutation = { __typename?: 'Mutation', deleteHackathonSchedule?: { __typename?: 'HackathonSchedule', id: string } | null };

export type HackathonRegisterMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  data: MemberCreateInput;
}>;


export type HackathonRegisterMutation = { __typename?: 'Mutation', hackathonRegister?: { __typename?: 'HackathonMemberExtend', id: string, info: any, isRegister: boolean, joinState: string, status: string } | null };

export type GetHackathonRegisterInfoQueryVariables = Exact<{
  hackathonId: Scalars['String']['input'];
}>;


export type GetHackathonRegisterInfoQuery = { __typename?: 'Query', info?: { __typename?: 'HackathonMemberExtend', id: string, info: any, isRegister: boolean, status: string, utmSource?: string | null } | null };

export type CreateHackathonTodoMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  data: HackathonTodoCreateInputExtend;
}>;


export type CreateHackathonTodoMutation = { __typename?: 'Mutation', createHackathonTodo?: { __typename?: 'HackathonTodo', id: string, name: string, intro?: string | null, type: string, order: number, metadata: any, url?: string | null } | null };

export type UpdateHackathonTodoMutationVariables = Exact<{
  todoId: Scalars['String']['input'];
  data: HackathonTodoCreateInputExtend;
}>;


export type UpdateHackathonTodoMutation = { __typename?: 'Mutation', updateHackathonTodo?: { __typename?: 'HackathonTodo', id: string, name: string, intro?: string | null, url?: string | null, type: string, metadata: any, order: number } | null };

export type DeleteHackathonTodoMutationVariables = Exact<{
  todoId: Scalars['String']['input'];
}>;


export type DeleteHackathonTodoMutation = { __typename?: 'Mutation', deleteHackathonTodo?: { __typename?: 'HackathonTodo', id: string } | null };

export type FindHackathonPrizeTracksQueryVariables = Exact<{
  hackathonId: Scalars['String']['input'];
}>;


export type FindHackathonPrizeTracksQuery = { __typename?: 'Query', prizeTracks?: Array<{ __typename?: 'HackathonRewardsExtend', name: string }> | null };

export type CompleteHackathonTodoMutationVariables = Exact<{
  todoId: Scalars['String']['input'];
}>;


export type CompleteHackathonTodoMutation = { __typename?: 'Mutation', completeHackathonTodo?: boolean | null };

export type FindHackathonJudgeDetailByUserQueryVariables = Exact<{ [key: string]: never; }>;


export type FindHackathonJudgeDetailByUserQuery = { __typename?: 'Query', findHackathonJudgeDetailByUser?: { __typename?: 'HackathonJudgeVote', alias: string, id: string, track?: string | null, name: string, currentStatus?: Array<HackathonJoinState> | null, judge?: { __typename?: 'HackathonJudgeUpdate', totalVote?: number | null, judgeMode?: string | null, voteMode?: string | null, judgeTotalVote?: number | null, judgeProjectVote?: number | null, userTotalVotes: number, rewardName: string, userTags?: Array<string> | null, projectJudgeCount?: number | null, criteria?: any | null, announce: boolean, disableJudge?: boolean | null, userUnitVotes: number, judgeAccounts?: Array<{ __typename?: 'JudgeAccount', id?: string | null, email?: string | null, nickname?: string | null, avatar?: string | null, password?: string | null }> | null } | null, timeline?: { __typename?: 'HackathonTimeline', timeZone: string, openReviewSame: boolean, registrationOpen: any, registrationClose: any, submissionOpen: any, submissionClose: any, rewardTime: any } | null, info?: { __typename?: 'HackathonInfo', image?: string | null, intro?: string | null } | null, projects?: Array<{ __typename?: 'ProjectJudgeDetail', alias: string, id: string, vote: number, logo?: string | null, name: string, prizeTrack?: string | null, voteJudgeCount?: number | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null } | null }> | null, remainingVotes?: { __typename?: 'UserRemainingVotes', remainingVotes?: number | null, canVote?: boolean | null } | null } | null };

export type JudgeBatchByVoteMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  data: Array<HackathonVoteInput> | HackathonVoteInput;
}>;


export type JudgeBatchByVoteMutation = { __typename?: 'Mutation', judgeBatchByVote?: boolean | null };

export type JudgeBatchByScoreMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
  data: Array<HackathonVoteInput> | HackathonVoteInput;
}>;


export type JudgeBatchByScoreMutation = { __typename?: 'Mutation', judgeBatchByScore?: boolean | null };

export type ProjectVoteMutationVariables = Exact<{
  rewardId: Scalars['Float']['input'];
  data: HackathonVoteInput;
}>;


export type ProjectVoteMutation = { __typename?: 'Mutation', projectVote?: boolean | null };

export type FindHackathonRewardQueryVariables = Exact<{
  hackathonId: Scalars['String']['input'];
}>;


export type FindHackathonRewardQuery = { __typename?: 'Query', findHackathonReward?: Array<{ __typename?: 'HackathonRewardsExtend', id: number, totalRewards?: number | null, rule?: any | null, name: string, order: number, currency: string, projects?: Array<{ __typename?: 'ProjectExtend', id: string, hackathonName?: string | null, creatorId?: string | null, teamId?: string | null, type?: ProjectType | null, lock: boolean, name: string, alias: string, logo?: string | null, tracks?: Array<string> | null, createdAt: any, updatedAt: any, likes?: number | null, isLiked?: boolean | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null, detailedIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', teamId?: string | null, userId: string, username?: string | null, nickname?: string | null, avatar?: string | null } | null, rewards?: Array<{ __typename?: 'ProjectVotingReward', votes?: number | null, hackathonStatus?: Array<HackathonJoinState> | null, disableJudge?: boolean | null, id?: number | null, rank?: { __typename?: 'Rank', rank?: number | null, total?: number | null } | null }> | null, winner?: Array<{ __typename?: 'HackathonWinnerExtend', name: string, rewardId: number }> | null }> | null }> | null };

export type QuitProjectFromHackathonMutationVariables = Exact<{
  projectId: Scalars['String']['input'];
}>;


export type QuitProjectFromHackathonMutation = { __typename?: 'Mutation', quitProjectFromHackathon?: boolean | null };

export type QuitHackathonMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
}>;


export type QuitHackathonMutation = { __typename?: 'Mutation', quitHackathon?: boolean | null };

export type HackathonConfirmMutationVariables = Exact<{
  hackathonId: Scalars['String']['input'];
}>;


export type HackathonConfirmMutation = { __typename?: 'Mutation', hackathonConfirm?: boolean | null };

export type SubmitHackathonToReviewMutationVariables = Exact<{
  updateHackathonId: Scalars['String']['input'];
  data: HackathonUpdateInputExtend;
}>;


export type SubmitHackathonToReviewMutation = { __typename?: 'Mutation', updateHackathon?: { __typename?: 'HackathonExtend', status: string, id: string } | null };

export type ListJobStationsQueryVariables = Exact<{
  where?: InputMaybe<JobStationWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ListJobStationsQuery = { __typename?: 'Query', listJobStations: { __typename?: 'JobStationListPaginated', total: number, data?: Array<{ __typename?: 'JobStation', id: string, companyName: string, companyLogo: string, currency?: string | null, name: string, minSalary?: number | null, maxSalary?: number | null, tags?: Array<string> | null, workMode: WorkMode, workType: WorkType, location?: string | null, createdAt: any }> | null } };

export type FindUniqueJobStationQueryVariables = Exact<{
  where: JobStationWhereUniqueInput;
}>;


export type FindUniqueJobStationQuery = { __typename?: 'Query', findUniqueJobStation: { __typename?: 'JobStation', description?: any | null, name: string, companyName: string, companyLogo: string, createdAt: any, maxSalary?: number | null, minSalary?: number | null, workMode: WorkMode, workType: WorkType, currency?: string | null, tags?: Array<string> | null, updatedAt: any, contact?: any | null, id: string, favorites?: Array<{ __typename?: 'JobFavorite', jobId: string, userId: string }> | null } };

export type DeleteJobFavoriteMutationVariables = Exact<{
  where: JobFavoriteWhereUniqueInput;
}>;


export type DeleteJobFavoriteMutation = { __typename?: 'Mutation', deleteJobFavorite?: { __typename?: 'JobFavorite', jobId: string } | null };

export type CreateJobFavoriteMutationVariables = Exact<{
  data: JobFavoriteCreateInput;
}>;


export type CreateJobFavoriteMutation = { __typename?: 'Mutation', createJobFavorite?: { __typename?: 'JobFavorite', jobId: string } | null };

export type ListJobTagsQueryVariables = Exact<{
  where?: InputMaybe<JobTagWhereInput>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<JobTagOrderByWithRelationInput> | JobTagOrderByWithRelationInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
}>;


export type ListJobTagsQuery = { __typename?: 'Query', listJobTags: { __typename?: 'JobTagListPaginated', data?: Array<{ __typename?: 'JobTag', name: string, id: number }> | null } };

export type ListJobStationsFavoriteQueryVariables = Exact<{
  where?: InputMaybe<JobStationWhereInput>;
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Array<JobStationOrderByWithRelationInput> | JobStationOrderByWithRelationInput>;
}>;


export type ListJobStationsFavoriteQuery = { __typename?: 'Query', listJobStationsFavorite: { __typename?: 'JobStationListPaginated', data?: Array<{ __typename?: 'JobStation', id: string, companyName: string, companyLogo: string, currency?: string | null, name: string, minSalary?: number | null, maxSalary?: number | null, tags?: Array<string> | null, workMode: WorkMode, workType: WorkType, createdAt: any }> | null } };

export type CreateJobStationMutationVariables = Exact<{
  data: JobStationCreateInput;
}>;


export type CreateJobStationMutation = { __typename?: 'Mutation', createJobStation?: { __typename?: 'JobStation', status: string, id: string } | null };

export type FindUserProfileQueryVariables = Exact<{
  username: Scalars['String']['input'];
}>;


export type FindUserProfileQuery = { __typename?: 'Query', profile: { __typename?: 'UserProfileExtend', id: string, location: string, bio?: string | null, techStack: any, backgroundImage?: string | null, personalLinks: any, githubActivity: any, onChainActivity: any, progress?: Array<number> | null, web3Score?: Array<{ __typename?: 'UserWeb3Score', latitude: string, score: number }> | null, user: { __typename?: 'User', username?: string | null, nickname?: string | null, avatar: string, userResume?: Array<{ __typename?: 'UserResume', id: number, name: string, file: string }> | null }, userCertifications?: Array<{ __typename?: 'UserCertification', id: string, certificateId?: number | null, certificationId: string, claimed: boolean, mint: boolean, txId?: string | null, username?: string | null, certificateTime?: any | null, certification: { __typename?: 'Certification', chainId: number, name: string, contract?: string | null, extra: any } }> | null, workExperiences?: Array<{ __typename?: 'WorkExperience', id: string, title: string, companyName: string, employmentType: WorkType, location?: string | null, description?: string | null, startDate: any, endDate?: any | null }> | null } };

export type UpdateUserProfileMutationVariables = Exact<{
  data: UserProfileUpdateInput;
}>;


export type UpdateUserProfileMutation = { __typename?: 'Mutation', updateUserProfile?: { __typename?: 'UserProfile', id: string } | null };

export type CreateUserWorkExperienceMutationVariables = Exact<{
  data: WorkExperienceCreateWithoutUserProfileInput;
}>;


export type CreateUserWorkExperienceMutation = { __typename?: 'Mutation', createUserWorkExperience?: { __typename?: 'WorkExperience', id: string } | null };

export type UpdateUserWorkExperienceMutationVariables = Exact<{
  experienceId: Scalars['String']['input'];
  data: WorkExperienceUpdateInput;
}>;


export type UpdateUserWorkExperienceMutation = { __typename?: 'Mutation', updateUserWorkExperience?: { __typename?: 'WorkExperience', id: string } | null };

export type DeleteUserWorkExperienceMutationVariables = Exact<{
  experienceId: Scalars['String']['input'];
}>;


export type DeleteUserWorkExperienceMutation = { __typename?: 'Mutation', deleteUserWorkExperience?: boolean | null };

export type CreateUserResumeMutationVariables = Exact<{
  data: UserResumeCreateWithoutUserInput;
}>;


export type CreateUserResumeMutation = { __typename?: 'Mutation', createUserResume?: { __typename?: 'UserResume', id: number } | null };

export type DeleteUserResumeMutationVariables = Exact<{
  resumeId: Scalars['Float']['input'];
}>;


export type DeleteUserResumeMutation = { __typename?: 'Mutation', deleteUserResume?: boolean | null };

export type ListUserAttestationsQueryVariables = Exact<{
  username: Scalars['String']['input'];
}>;


export type ListUserAttestationsQuery = { __typename?: 'Query', attestations: Array<{ __typename?: 'AttestationWithCreator', id: string, attest: boolean, creatorId: string, sourceId: string, type: string, comment?: string | null, chain: any, creator?: { __typename?: 'AttestationCreator', id: string, username: string, nickname?: string | null, avatar?: string | null } | null }> };

export type CreateAttestationMutationVariables = Exact<{
  data: AttestationCreateInput;
}>;


export type CreateAttestationMutation = { __typename?: 'Mutation', createAttestation?: { __typename?: 'Attestation', id: string } | null };

export type ConnectGithubMutationVariables = Exact<{
  accessToken: Scalars['String']['input'];
}>;


export type ConnectGithubMutation = { __typename?: 'Mutation', connectGithub: boolean };

export type DisconnectGithubMutationVariables = Exact<{ [key: string]: never; }>;


export type DisconnectGithubMutation = { __typename?: 'Mutation', disconnectGithub?: boolean | null };

export type ConnectWalletMutationVariables = Exact<{
  address: Scalars['String']['input'];
}>;


export type ConnectWalletMutation = { __typename?: 'Mutation', connectWallet: boolean };

export type DisconnectWalletMutationVariables = Exact<{ [key: string]: never; }>;


export type DisconnectWalletMutation = { __typename?: 'Mutation', disconnectWallet: boolean };

export type ProjectBaseInfoFragment = { __typename?: 'ProjectExtend', id: string, hackathonId?: string | null, hackathonName?: string | null, status: string, creatorId?: string | null, teamId?: string | null, versionName?: string | null, type?: ProjectType | null, fromId?: string | null, isSubmit: boolean, lock: boolean, name: string, alias: string, logo?: string | null, location?: string | null, prizeTrack?: string | null, ecology?: Array<string> | null, tracks?: Array<string> | null, wallet?: string | null, fields: any, createdAt: any, updatedAt: any, vote: number, likes?: number | null, isLiked?: boolean | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null, detailedIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', teamId?: string | null, userId: string, username?: string | null, nickname?: string | null, avatar?: string | null } | null };

export type ListProjectsBySelfQueryVariables = Exact<{
  where?: InputMaybe<ProjectWhereInput>;
}>;


export type ListProjectsBySelfQuery = { __typename?: 'Query', listProjectsBySelf: { __typename?: 'ProjectListPaginated', total: number, data?: Array<{ __typename?: 'ProjectExtend', id: string, hackathonId?: string | null, hackathonName?: string | null, status: string, creatorId?: string | null, teamId?: string | null, versionName?: string | null, type?: ProjectType | null, fromId?: string | null, isSubmit: boolean, lock: boolean, name: string, alias: string, logo?: string | null, location?: string | null, prizeTrack?: string | null, ecology?: Array<string> | null, tracks?: Array<string> | null, wallet?: string | null, fields: any, createdAt: any, updatedAt: any, vote: number, likes?: number | null, isLiked?: boolean | null, team?: { __typename?: 'HackathonTeamExtend', code: string } | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null, detailedIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', teamId?: string | null, userId: string, username?: string | null, nickname?: string | null, avatar?: string | null } | null }> | null } };

export type CreateProjectMutationVariables = Exact<{
  data?: InputMaybe<ProjectCreateInput>;
}>;


export type CreateProjectMutation = { __typename?: 'Mutation', project?: { __typename?: 'ProjectExtend', alias: string, name: string, id: string } | null };

export type UpdateProjectMutationVariables = Exact<{
  data: ProjectUpdateInput;
  where: ProjectWhereUniqueInput;
}>;


export type UpdateProjectMutation = { __typename?: 'Mutation', project?: { __typename?: 'ProjectExtend', alias: string, name: string, id: string } | null };

export type FindUniqueProjectQueryVariables = Exact<{
  where: ProjectWhereUniqueInput;
}>;


export type FindUniqueProjectQuery = { __typename?: 'Query', findUniqueProject?: { __typename?: 'ProjectExtend', id: string, hackathonId?: string | null, hackathonName?: string | null, creatorId?: string | null, teamId?: string | null, versionName?: string | null, type?: ProjectType | null, isSubmit: boolean, lock: boolean, name: string, alias: string, logo?: string | null, ecology?: Array<string> | null, tracks?: Array<string> | null, wallet?: string | null, likes?: number | null, isLiked?: boolean | null, pitchVideo?: string | null, demoVideo?: string | null, teachStack?: Array<string> | null, progress: number, createdAt: any, updatedAt: any, prizeTrack?: string | null, versions?: Array<{ __typename?: 'Project', id: string, alias: string, versionName?: string | null }> | null, detail?: { __typename?: 'ProjectDetail', id: string, detailedIntro?: string | null, oneLineIntro?: string | null, progress?: string | null } | null, addition?: { __typename?: 'ProjectAddition', id: string, fundraisingStatus?: string | null, githubLink?: string | null, isOpenSource: boolean } | null, teamLead?: { __typename?: 'HackathonMemberExtend', userId: string, avatar?: string | null, nickname?: string | null, username?: string | null } | null, team?: { __typename?: 'HackathonTeamExtend', code: string, intro?: string | null, members?: Array<{ __typename?: 'HackathonMemberExtend', id: string, userId: string, avatar?: string | null, nickname?: string | null, username?: string | null, bio?: string | null, skills?: Array<string> | null, location?: string | null }> | null } | null, rewards?: Array<{ __typename?: 'ProjectVotingReward', votes?: number | null, remainingVotes?: number | null, name?: string | null, myVotes?: number | null, id?: number | null, canVote?: boolean | null, hackathonStatus?: Array<HackathonJoinState> | null, hackathonName?: string | null, hackathonImage?: string | null, judgeMode?: string | null, voteMode?: string | null, rank?: { __typename?: 'Rank', rank?: number | null, total?: number | null } | null }> | null } | null };

export type ListProjectsQueryVariables = Exact<{
  page?: InputMaybe<Scalars['Int']['input']>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput> | ProjectOrderByWithRelationInput>;
}>;


export type ListProjectsQuery = { __typename?: 'Query', listProjects: { __typename?: 'ProjectListPaginated', total: number, data?: Array<{ __typename?: 'ProjectExtend', id: string, hackathonId?: string | null, hackathonName?: string | null, status: string, creatorId?: string | null, teamId?: string | null, versionName?: string | null, type?: ProjectType | null, fromId?: string | null, isSubmit: boolean, lock: boolean, name: string, alias: string, logo?: string | null, location?: string | null, prizeTrack?: string | null, ecology?: Array<string> | null, tracks?: Array<string> | null, wallet?: string | null, fields: any, createdAt: any, updatedAt: any, vote: number, likes?: number | null, isLiked?: boolean | null, detail?: { __typename?: 'ProjectDetail', oneLineIntro?: string | null, detailedIntro?: string | null } | null, teamLead?: { __typename?: 'HackathonMemberExtend', teamId?: string | null, userId: string, username?: string | null, nickname?: string | null, avatar?: string | null } | null }> | null } };

export type JoinProjectMutationVariables = Exact<{
  where: HackathonTeamWhereUniqueInput;
}>;


export type JoinProjectMutation = { __typename?: 'Mutation', joinProject?: boolean | null };

export type LikeProjectMutationVariables = Exact<{
  likeProjectId: Scalars['String']['input'];
}>;


export type LikeProjectMutation = { __typename?: 'Mutation', project?: { __typename?: 'Project', likes: number } | null };

export type CopyProjectMutationVariables = Exact<{
  copyProjectId: Scalars['String']['input'];
}>;


export type CopyProjectMutation = { __typename?: 'Mutation', project?: { __typename?: 'ProjectExtend', alias: string, name: string, id: string } | null };

export type QuitProjectMutationVariables = Exact<{
  quitProjectId: Scalars['String']['input'];
}>;


export type QuitProjectMutation = { __typename?: 'Mutation', project?: boolean | null };

export type ProjectSubmitMutationVariables = Exact<{
  data: ProjectSubmitInput;
}>;


export type ProjectSubmitMutation = { __typename?: 'Mutation', projectSubmit?: { __typename?: 'Project', id: string, status: string, isSubmit: boolean } | null };

export type ListValidateProjectsQueryVariables = Exact<{
  hackathonId: Scalars['String']['input'];
}>;


export type ListValidateProjectsQuery = { __typename?: 'Query', projects?: Array<{ __typename?: 'ValidateProject', id: string, name: string, isSubmit: boolean }> | null };

export type FindProjectSubmitInfoQueryVariables = Exact<{
  where: ProjectWhereUniqueInput;
}>;


export type FindProjectSubmitInfoQuery = { __typename?: 'Query', info?: { __typename?: 'ProjectExtend', fromId?: string | null, prizeTrack?: string | null, fields: any, isSubmit: boolean } | null };

export type RemoveMemberMutationVariables = Exact<{
  projectId: Scalars['String']['input'];
  memberId: Scalars['String']['input'];
}>;


export type RemoveMemberMutation = { __typename?: 'Mutation', removeMember?: boolean | null };

export type GetUserInfoQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserInfoQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, uid: number, name?: string | null, avatar: string, username?: string | null, nickname?: string | null, email?: string | null, role: Role, voteRole: VoteRole, status: UserStatus, inviteCode: string, invitedBy?: string | null, hackCoin?: { __typename?: 'UserHackCoin', coin: number } | null, levelInfo?: { __typename?: 'UserLevel', level: number, exp: number } | null } | null };


export const HackathonBaseInfoFragmentDoc = `
    fragment hackathonBaseInfo on HackathonExtend {
  id
  name
  alias
  creatorId
  status
  currentStatus
  sectionSequences
  enable
  track
  language
  progress
  participants
  pageView
  priority
  createdAt
  updatedAt
  currentStatus
  todos {
    id
    name
    intro
    url
    type
    metadata
    order
    completed
  }
  projectCount
  timeline {
    timeZone
    submissionOpen
    submissionClose
    rewardTime
    registrationOpen
    registrationClose
    openReviewSame
    schedule {
      id
      eventName
      openTime
      closeTime
      eventURL
      description
      type
    }
  }
  ecosystem {
    id
    image
    type
  }
  members {
    username
    userId
    nickname
    avatar
  }
}
    `;
export const ProjectBaseInfoFragmentDoc = `
    fragment projectBaseInfo on ProjectExtend {
  id
  hackathonId
  hackathonName
  status
  creatorId
  teamId
  versionName
  type
  fromId
  isSubmit
  lock
  name
  alias
  logo
  location
  prizeTrack
  ecology
  tracks
  wallet
  fields
  createdAt
  updatedAt
  vote
  detail {
    oneLineIntro
    detailedIntro
  }
  teamLead {
    teamId
    userId
    username
    nickname
    avatar
  }
  likes
  isLiked
}
    `;
export const CreateUserDocument = `
    mutation CreateUser($email: String!, $password: String!, $inviteCode: String) {
  createUser(email: $email, password: $password, inviteCode: $inviteCode) {
    id
    email
  }
}
    `;

export const useCreateUserMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateUserMutation, TError, CreateUserMutationVariables, TContext>) => {
    
    return useMutation<CreateUserMutation, TError, CreateUserMutationVariables, TContext>(
      {
    mutationKey: ['CreateUser'],
    mutationFn: (variables?: CreateUserMutationVariables) => fetcher<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, variables)(),
    ...options
  }
    )};


useCreateUserMutation.fetcher = (variables: CreateUserMutationVariables, options?: RequestInit['headers']) => fetcher<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, variables, options);

export const ActivateUserDocument = `
    mutation ActivateUser($accessToken: String!) {
  activateUser(access_token: $accessToken) {
    access_token
    user {
      id
      uid
      name
      avatar
      username
      nickname
      email
      role
      voteRole
      status
      inviteCode
      invitedBy
      hackCoin {
        coin
      }
      levelInfo {
        level
        exp
      }
    }
    status
    error
  }
}
    `;

export const useActivateUserMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ActivateUserMutation, TError, ActivateUserMutationVariables, TContext>) => {
    
    return useMutation<ActivateUserMutation, TError, ActivateUserMutationVariables, TContext>(
      {
    mutationKey: ['ActivateUser'],
    mutationFn: (variables?: ActivateUserMutationVariables) => fetcher<ActivateUserMutation, ActivateUserMutationVariables>(ActivateUserDocument, variables)(),
    ...options
  }
    )};


useActivateUserMutation.fetcher = (variables: ActivateUserMutationVariables, options?: RequestInit['headers']) => fetcher<ActivateUserMutation, ActivateUserMutationVariables>(ActivateUserDocument, variables, options);

export const EmailExistsDocument = `
    mutation EmailExists($email: String!) {
  emailExists(email: $email)
}
    `;

export const useEmailExistsMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<EmailExistsMutation, TError, EmailExistsMutationVariables, TContext>) => {
    
    return useMutation<EmailExistsMutation, TError, EmailExistsMutationVariables, TContext>(
      {
    mutationKey: ['EmailExists'],
    mutationFn: (variables?: EmailExistsMutationVariables) => fetcher<EmailExistsMutation, EmailExistsMutationVariables>(EmailExistsDocument, variables)(),
    ...options
  }
    )};


useEmailExistsMutation.fetcher = (variables: EmailExistsMutationVariables, options?: RequestInit['headers']) => fetcher<EmailExistsMutation, EmailExistsMutationVariables>(EmailExistsDocument, variables, options);

export const LoginDocument = `
    mutation Login($email: String!, $password: String!) {
  data: login(email: $email, password: $password) {
    access_token
    user {
      id
      uid
      name
      avatar
      username
      nickname
      email
      role
      voteRole
      status
      inviteCode
      invitedBy
      hackCoin {
        coin
      }
      levelInfo {
        level
        exp
      }
    }
  }
}
    `;

export const useLoginMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<LoginMutation, TError, LoginMutationVariables, TContext>) => {
    
    return useMutation<LoginMutation, TError, LoginMutationVariables, TContext>(
      {
    mutationKey: ['Login'],
    mutationFn: (variables?: LoginMutationVariables) => fetcher<LoginMutation, LoginMutationVariables>(LoginDocument, variables)(),
    ...options
  }
    )};


useLoginMutation.fetcher = (variables: LoginMutationVariables, options?: RequestInit['headers']) => fetcher<LoginMutation, LoginMutationVariables>(LoginDocument, variables, options);

export const ResendConfirmEmailDocument = `
    mutation ResendConfirmEmail($email: String!) {
  resendConfirmEmail(email: $email)
}
    `;

export const useResendConfirmEmailMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ResendConfirmEmailMutation, TError, ResendConfirmEmailMutationVariables, TContext>) => {
    
    return useMutation<ResendConfirmEmailMutation, TError, ResendConfirmEmailMutationVariables, TContext>(
      {
    mutationKey: ['ResendConfirmEmail'],
    mutationFn: (variables?: ResendConfirmEmailMutationVariables) => fetcher<ResendConfirmEmailMutation, ResendConfirmEmailMutationVariables>(ResendConfirmEmailDocument, variables)(),
    ...options
  }
    )};


useResendConfirmEmailMutation.fetcher = (variables: ResendConfirmEmailMutationVariables, options?: RequestInit['headers']) => fetcher<ResendConfirmEmailMutation, ResendConfirmEmailMutationVariables>(ResendConfirmEmailDocument, variables, options);

export const ResetPasswordEmailDocument = `
    mutation ResetPasswordEmail($email: String!) {
  resetPasswordEmail(email: $email)
}
    `;

export const useResetPasswordEmailMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ResetPasswordEmailMutation, TError, ResetPasswordEmailMutationVariables, TContext>) => {
    
    return useMutation<ResetPasswordEmailMutation, TError, ResetPasswordEmailMutationVariables, TContext>(
      {
    mutationKey: ['ResetPasswordEmail'],
    mutationFn: (variables?: ResetPasswordEmailMutationVariables) => fetcher<ResetPasswordEmailMutation, ResetPasswordEmailMutationVariables>(ResetPasswordEmailDocument, variables)(),
    ...options
  }
    )};


useResetPasswordEmailMutation.fetcher = (variables: ResetPasswordEmailMutationVariables, options?: RequestInit['headers']) => fetcher<ResetPasswordEmailMutation, ResetPasswordEmailMutationVariables>(ResetPasswordEmailDocument, variables, options);

export const ResetPasswordDocument = `
    mutation ResetPassword($accessToken: String!, $password: String!) {
  resetPassword(access_token: $accessToken, password: $password)
}
    `;

export const useResetPasswordMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ResetPasswordMutation, TError, ResetPasswordMutationVariables, TContext>) => {
    
    return useMutation<ResetPasswordMutation, TError, ResetPasswordMutationVariables, TContext>(
      {
    mutationKey: ['ResetPassword'],
    mutationFn: (variables?: ResetPasswordMutationVariables) => fetcher<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, variables)(),
    ...options
  }
    )};


useResetPasswordMutation.fetcher = (variables: ResetPasswordMutationVariables, options?: RequestInit['headers']) => fetcher<ResetPasswordMutation, ResetPasswordMutationVariables>(ResetPasswordDocument, variables, options);

export const ListBlogsDocument = `
    query ListBlogs($limit: Int, $page: Int, $orderBy: [BlogOrderByWithRelationInput!], $where: BlogWhereInput) {
  listBlogs(limit: $limit, page: $page, orderBy: $orderBy, where: $where) {
    data {
      id
      title
      alias
      description
      image
      categories
      creatorName
      duration
      top
      publishDate
      createdAt
      updatedAt
    }
    total
  }
}
    `;

export const useListBlogsQuery = <
      TData = ListBlogsQuery,
      TError = unknown
    >(
      variables?: ListBlogsQueryVariables,
      options?: Omit<UseQueryOptions<ListBlogsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListBlogsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListBlogsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListBlogs'] : ['ListBlogs', variables],
    queryFn: fetcher<ListBlogsQuery, ListBlogsQueryVariables>(ListBlogsDocument, variables),
    ...options
  }
    )};

useListBlogsQuery.getKey = (variables?: ListBlogsQueryVariables) => variables === undefined ? ['ListBlogs'] : ['ListBlogs', variables];


useListBlogsQuery.fetcher = (variables?: ListBlogsQueryVariables, options?: RequestInit['headers']) => fetcher<ListBlogsQuery, ListBlogsQueryVariables>(ListBlogsDocument, variables, options);

export const FindUniqueBlogDocument = `
    query FindUniqueBlog($where: BlogWhereUniqueInput!) {
  findUniqueBlog(where: $where) {
    id
    title
    alias
    description
    image
    categories
    content
    creatorName
    duration
    top
    publishDate
    createdAt
    updatedAt
  }
}
    `;

export const useFindUniqueBlogQuery = <
      TData = FindUniqueBlogQuery,
      TError = unknown
    >(
      variables: FindUniqueBlogQueryVariables,
      options?: Omit<UseQueryOptions<FindUniqueBlogQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUniqueBlogQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUniqueBlogQuery, TError, TData>(
      {
    queryKey: ['FindUniqueBlog', variables],
    queryFn: fetcher<FindUniqueBlogQuery, FindUniqueBlogQueryVariables>(FindUniqueBlogDocument, variables),
    ...options
  }
    )};

useFindUniqueBlogQuery.getKey = (variables: FindUniqueBlogQueryVariables) => ['FindUniqueBlog', variables];


useFindUniqueBlogQuery.fetcher = (variables: FindUniqueBlogQueryVariables, options?: RequestInit['headers']) => fetcher<FindUniqueBlogQuery, FindUniqueBlogQueryVariables>(FindUniqueBlogDocument, variables, options);

export const FindUserCertificationDocument = `
    query FindUserCertification($certificateId: Float!) {
  certification: findUserCertification(certificateId: $certificateId) {
    certificateId
    certificateTime
    username
    template
  }
}
    `;

export const useFindUserCertificationQuery = <
      TData = FindUserCertificationQuery,
      TError = unknown
    >(
      variables: FindUserCertificationQueryVariables,
      options?: Omit<UseQueryOptions<FindUserCertificationQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUserCertificationQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUserCertificationQuery, TError, TData>(
      {
    queryKey: ['FindUserCertification', variables],
    queryFn: fetcher<FindUserCertificationQuery, FindUserCertificationQueryVariables>(FindUserCertificationDocument, variables),
    ...options
  }
    )};

useFindUserCertificationQuery.getKey = (variables: FindUserCertificationQueryVariables) => ['FindUserCertification', variables];


useFindUserCertificationQuery.fetcher = (variables: FindUserCertificationQueryVariables, options?: RequestInit['headers']) => fetcher<FindUserCertificationQuery, FindUserCertificationQueryVariables>(FindUserCertificationDocument, variables, options);

export const GetCertificationSignatureDocument = `
    mutation GetCertificationSignature($certificationId: String!, $address: String!) {
  signature: getCertificationSignature(
    certificationId: $certificationId
    address: $address
  ) {
    msg
    signature
  }
}
    `;

export const useGetCertificationSignatureMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<GetCertificationSignatureMutation, TError, GetCertificationSignatureMutationVariables, TContext>) => {
    
    return useMutation<GetCertificationSignatureMutation, TError, GetCertificationSignatureMutationVariables, TContext>(
      {
    mutationKey: ['GetCertificationSignature'],
    mutationFn: (variables?: GetCertificationSignatureMutationVariables) => fetcher<GetCertificationSignatureMutation, GetCertificationSignatureMutationVariables>(GetCertificationSignatureDocument, variables)(),
    ...options
  }
    )};


useGetCertificationSignatureMutation.fetcher = (variables: GetCertificationSignatureMutationVariables, options?: RequestInit['headers']) => fetcher<GetCertificationSignatureMutation, GetCertificationSignatureMutationVariables>(GetCertificationSignatureDocument, variables, options);

export const ClaimCertificationDocument = `
    mutation ClaimCertification($ecosystemId: String!) {
  claimCertification(ecosystemId: $ecosystemId)
}
    `;

export const useClaimCertificationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ClaimCertificationMutation, TError, ClaimCertificationMutationVariables, TContext>) => {
    
    return useMutation<ClaimCertificationMutation, TError, ClaimCertificationMutationVariables, TContext>(
      {
    mutationKey: ['ClaimCertification'],
    mutationFn: (variables?: ClaimCertificationMutationVariables) => fetcher<ClaimCertificationMutation, ClaimCertificationMutationVariables>(ClaimCertificationDocument, variables)(),
    ...options
  }
    )};


useClaimCertificationMutation.fetcher = (variables: ClaimCertificationMutationVariables, options?: RequestInit['headers']) => fetcher<ClaimCertificationMutation, ClaimCertificationMutationVariables>(ClaimCertificationDocument, variables, options);

export const MintCertificationDocument = `
    mutation MintCertification($certificationId: String!, $txId: String!) {
  mintCertification(certificationId: $certificationId, txId: $txId)
}
    `;

export const useMintCertificationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<MintCertificationMutation, TError, MintCertificationMutationVariables, TContext>) => {
    
    return useMutation<MintCertificationMutation, TError, MintCertificationMutationVariables, TContext>(
      {
    mutationKey: ['MintCertification'],
    mutationFn: (variables?: MintCertificationMutationVariables) => fetcher<MintCertificationMutation, MintCertificationMutationVariables>(MintCertificationDocument, variables)(),
    ...options
  }
    )};


useMintCertificationMutation.fetcher = (variables: MintCertificationMutationVariables, options?: RequestInit['headers']) => fetcher<MintCertificationMutation, MintCertificationMutationVariables>(MintCertificationDocument, variables, options);

export const CreateCoLearningDocument = `
    mutation CreateCoLearning($data: CoLearningCreateInput!) {
  createCoLearning(data: $data) {
    id
  }
}
    `;

export const useCreateCoLearningMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateCoLearningMutation, TError, CreateCoLearningMutationVariables, TContext>) => {
    
    return useMutation<CreateCoLearningMutation, TError, CreateCoLearningMutationVariables, TContext>(
      {
    mutationKey: ['CreateCoLearning'],
    mutationFn: (variables?: CreateCoLearningMutationVariables) => fetcher<CreateCoLearningMutation, CreateCoLearningMutationVariables>(CreateCoLearningDocument, variables)(),
    ...options
  }
    )};


useCreateCoLearningMutation.fetcher = (variables: CreateCoLearningMutationVariables, options?: RequestInit['headers']) => fetcher<CreateCoLearningMutation, CreateCoLearningMutationVariables>(CreateCoLearningDocument, variables, options);

export const UpdateCoLearningDocument = `
    mutation UpdateCoLearning($id: String!, $data: CoLearningUpdateInput!) {
  updateCoLearning(id: $id, data: $data) {
    name
    intro
    reward
    ecosystem
    description
    communityType
    communityUrl
  }
}
    `;

export const useUpdateCoLearningMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateCoLearningMutation, TError, UpdateCoLearningMutationVariables, TContext>) => {
    
    return useMutation<UpdateCoLearningMutation, TError, UpdateCoLearningMutationVariables, TContext>(
      {
    mutationKey: ['UpdateCoLearning'],
    mutationFn: (variables?: UpdateCoLearningMutationVariables) => fetcher<UpdateCoLearningMutation, UpdateCoLearningMutationVariables>(UpdateCoLearningDocument, variables)(),
    ...options
  }
    )};


useUpdateCoLearningMutation.fetcher = (variables: UpdateCoLearningMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateCoLearningMutation, UpdateCoLearningMutationVariables>(UpdateCoLearningDocument, variables, options);

export const ListCoLearningDocument = `
    query ListCoLearning($where: CoLearningCoustomWhereInput) {
  listCoLearning(where: $where) {
    data {
      id
      todos {
        name
        order
        completed
        url
        type
        id
      }
      events {
        endTime
        startTime
        description
        url
        title
        id
      }
      timeline {
        timezone
        startTime
        endTime
      }
      progress
      name
      intro
      events {
        endTime
        description
      }
      reward
      ecosystem
      description
      communityType
      communityUrl
      qrImage
      application
    }
    total
  }
}
    `;

export const useListCoLearningQuery = <
      TData = ListCoLearningQuery,
      TError = unknown
    >(
      variables?: ListCoLearningQueryVariables,
      options?: Omit<UseQueryOptions<ListCoLearningQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListCoLearningQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListCoLearningQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListCoLearning'] : ['ListCoLearning', variables],
    queryFn: fetcher<ListCoLearningQuery, ListCoLearningQueryVariables>(ListCoLearningDocument, variables),
    ...options
  }
    )};

useListCoLearningQuery.getKey = (variables?: ListCoLearningQueryVariables) => variables === undefined ? ['ListCoLearning'] : ['ListCoLearning', variables];


useListCoLearningQuery.fetcher = (variables?: ListCoLearningQueryVariables, options?: RequestInit['headers']) => fetcher<ListCoLearningQuery, ListCoLearningQueryVariables>(ListCoLearningDocument, variables, options);

export const ListCoLearningTodoDocument = `
    query ListCoLearningTodo($orderBy: [CoLearningTodoOrderByWithRelationInput!], $where: CoLearningTodoWhereInput) {
  listCoLearningTodo(orderBy: $orderBy, where: $where) {
    data {
      type
      order
      url
      name
      id
    }
  }
}
    `;

export const useListCoLearningTodoQuery = <
      TData = ListCoLearningTodoQuery,
      TError = unknown
    >(
      variables?: ListCoLearningTodoQueryVariables,
      options?: Omit<UseQueryOptions<ListCoLearningTodoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListCoLearningTodoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListCoLearningTodoQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListCoLearningTodo'] : ['ListCoLearningTodo', variables],
    queryFn: fetcher<ListCoLearningTodoQuery, ListCoLearningTodoQueryVariables>(ListCoLearningTodoDocument, variables),
    ...options
  }
    )};

useListCoLearningTodoQuery.getKey = (variables?: ListCoLearningTodoQueryVariables) => variables === undefined ? ['ListCoLearningTodo'] : ['ListCoLearningTodo', variables];


useListCoLearningTodoQuery.fetcher = (variables?: ListCoLearningTodoQueryVariables, options?: RequestInit['headers']) => fetcher<ListCoLearningTodoQuery, ListCoLearningTodoQueryVariables>(ListCoLearningTodoDocument, variables, options);

export const CreateCoLearningMemberDocument = `
    mutation CreateCoLearningMember($data: CoLearningMemberCreateInput!) {
  createCoLearningMember(data: $data) {
    id
  }
}
    `;

export const useCreateCoLearningMemberMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateCoLearningMemberMutation, TError, CreateCoLearningMemberMutationVariables, TContext>) => {
    
    return useMutation<CreateCoLearningMemberMutation, TError, CreateCoLearningMemberMutationVariables, TContext>(
      {
    mutationKey: ['CreateCoLearningMember'],
    mutationFn: (variables?: CreateCoLearningMemberMutationVariables) => fetcher<CreateCoLearningMemberMutation, CreateCoLearningMemberMutationVariables>(CreateCoLearningMemberDocument, variables)(),
    ...options
  }
    )};


useCreateCoLearningMemberMutation.fetcher = (variables: CreateCoLearningMemberMutationVariables, options?: RequestInit['headers']) => fetcher<CreateCoLearningMemberMutation, CreateCoLearningMemberMutationVariables>(CreateCoLearningMemberDocument, variables, options);

export const CreateCustomKeywordDocument = `
    mutation CreateCustomKeyword($data: CustomKeywordCreateInput!) {
  createCustomKeyword(data: $data) {
    keyword
  }
}
    `;

export const useCreateCustomKeywordMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateCustomKeywordMutation, TError, CreateCustomKeywordMutationVariables, TContext>) => {
    
    return useMutation<CreateCustomKeywordMutation, TError, CreateCustomKeywordMutationVariables, TContext>(
      {
    mutationKey: ['CreateCustomKeyword'],
    mutationFn: (variables?: CreateCustomKeywordMutationVariables) => fetcher<CreateCustomKeywordMutation, CreateCustomKeywordMutationVariables>(CreateCustomKeywordDocument, variables)(),
    ...options
  }
    )};


useCreateCustomKeywordMutation.fetcher = (variables: CreateCustomKeywordMutationVariables, options?: RequestInit['headers']) => fetcher<CreateCustomKeywordMutation, CreateCustomKeywordMutationVariables>(CreateCustomKeywordDocument, variables, options);

export const FindTracksDocument = `
    query FindTracks {
  tracks: findTracks
}
    `;

export const useFindTracksQuery = <
      TData = FindTracksQuery,
      TError = unknown
    >(
      variables?: FindTracksQueryVariables,
      options?: Omit<UseQueryOptions<FindTracksQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindTracksQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindTracksQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['FindTracks'] : ['FindTracks', variables],
    queryFn: fetcher<FindTracksQuery, FindTracksQueryVariables>(FindTracksDocument, variables),
    ...options
  }
    )};

useFindTracksQuery.getKey = (variables?: FindTracksQueryVariables) => variables === undefined ? ['FindTracks'] : ['FindTracks', variables];


useFindTracksQuery.fetcher = (variables?: FindTracksQueryVariables, options?: RequestInit['headers']) => fetcher<FindTracksQuery, FindTracksQueryVariables>(FindTracksDocument, variables, options);

export const GlobalSearchDocument = `
    query GlobalSearch($keyword: String!) {
  globalSearch(keyword: $keyword) {
    ecosystem {
      ecosystemId
      name
      alias
      description
      lang
    }
    course {
      id
      title
      alias
      description
      image
      language
      level
      status
      track
      type
      ecosystem
    }
    hackathon {
      id
      name
      alias
      info {
        image
        intro
      }
      language
      progress
      rewards {
        totalRewards
        name
      }
      timeline {
        openReviewSame
        registrationClose
        registrationOpen
        rewardTime
        submissionOpen
        timeZone
      }
      status
    }
    blog {
      id
      title
      alias
      image
      description
      categories
      creatorName
      publishDate
      duration
    }
    glossary {
      id
      title
      alias
      image
      description
      categories
      tracks
      publishDate
      creatorName
    }
    event {
      id
      name
      endTime
      eventUrl
      description
      prUrl
      tags
      startTime
    }
    project {
      id
      name
      alias
      detail {
        oneLineIntro
      }
      status
      teamLead {
        avatar
        nickname
        username
      }
      logo
      ecology
    }
    job {
      id
      name
      description
      companyName
      status
      tags
      website
      createdAt
      companyLogo
      workMode
      workType
      maxSalary
      minSalary
      location
      favorites {
        jobId
      }
    }
  }
}
    `;

export const useGlobalSearchQuery = <
      TData = GlobalSearchQuery,
      TError = unknown
    >(
      variables: GlobalSearchQueryVariables,
      options?: Omit<UseQueryOptions<GlobalSearchQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<GlobalSearchQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<GlobalSearchQuery, TError, TData>(
      {
    queryKey: ['GlobalSearch', variables],
    queryFn: fetcher<GlobalSearchQuery, GlobalSearchQueryVariables>(GlobalSearchDocument, variables),
    ...options
  }
    )};

useGlobalSearchQuery.getKey = (variables: GlobalSearchQueryVariables) => ['GlobalSearch', variables];


useGlobalSearchQuery.fetcher = (variables: GlobalSearchQueryVariables, options?: RequestInit['headers']) => fetcher<GlobalSearchQuery, GlobalSearchQueryVariables>(GlobalSearchDocument, variables, options);

export const ListCoursesDocument = `
    query ListCourses($page: Int, $limit: Int, $orderBy: [CourseV2OrderByWithRelationInput!], $where: CourseV2WhereInput) {
  listCourses(page: $page, limit: $limit, orderBy: $orderBy, where: $where) {
    data {
      id
      title
      alias
      subTitle
      description
      image
      type
      optional
      intendedLearners
      knowledgeGain
      level
      language
      track
      creatorId
      duration
      peopleJoined
      status
      documentationId
      ecosystem
      lang
      createdAt
      updatedAt
    }
    total
  }
}
    `;

export const useListCoursesQuery = <
      TData = ListCoursesQuery,
      TError = unknown
    >(
      variables?: ListCoursesQueryVariables,
      options?: Omit<UseQueryOptions<ListCoursesQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListCoursesQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListCoursesQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListCourses'] : ['ListCourses', variables],
    queryFn: fetcher<ListCoursesQuery, ListCoursesQueryVariables>(ListCoursesDocument, variables),
    ...options
  }
    )};

useListCoursesQuery.getKey = (variables?: ListCoursesQueryVariables) => variables === undefined ? ['ListCourses'] : ['ListCourses', variables];


useListCoursesQuery.fetcher = (variables?: ListCoursesQueryVariables, options?: RequestInit['headers']) => fetcher<ListCoursesQuery, ListCoursesQueryVariables>(ListCoursesDocument, variables, options);

export const FindCourseDetailDocument = `
    query findCourseDetail($where: CourseV2WhereInput) {
  findCourseDetail(where: $where) {
    title
    alias
    description
    language
    duration
    intendedLearners
    knowledgeGain
    image
    units {
      id
      title
      progress
      nextPageId
      description
      pages {
        id
        title
        isCompleted
      }
    }
    currentPageId
    progress
    ecosystemInfoList {
      image
      type
      language
    }
  }
}
    `;

export const useFindCourseDetailQuery = <
      TData = FindCourseDetailQuery,
      TError = unknown
    >(
      variables?: FindCourseDetailQueryVariables,
      options?: Omit<UseQueryOptions<FindCourseDetailQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindCourseDetailQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindCourseDetailQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['findCourseDetail'] : ['findCourseDetail', variables],
    queryFn: fetcher<FindCourseDetailQuery, FindCourseDetailQueryVariables>(FindCourseDetailDocument, variables),
    ...options
  }
    )};

useFindCourseDetailQuery.getKey = (variables?: FindCourseDetailQueryVariables) => variables === undefined ? ['findCourseDetail'] : ['findCourseDetail', variables];


useFindCourseDetailQuery.fetcher = (variables?: FindCourseDetailQueryVariables, options?: RequestInit['headers']) => fetcher<FindCourseDetailQuery, FindCourseDetailQueryVariables>(FindCourseDetailDocument, variables, options);

export const FindCourseUnitsDocument = `
    query FindCourseUnits($where: CourseV2WhereInput) {
  findCourseDetail(where: $where) {
    units {
      title
      description
      progress
      pages {
        id
        title
        isCompleted
      }
    }
    currentPageId
    nextPageId
  }
}
    `;

export const useFindCourseUnitsQuery = <
      TData = FindCourseUnitsQuery,
      TError = unknown
    >(
      variables?: FindCourseUnitsQueryVariables,
      options?: Omit<UseQueryOptions<FindCourseUnitsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindCourseUnitsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindCourseUnitsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['FindCourseUnits'] : ['FindCourseUnits', variables],
    queryFn: fetcher<FindCourseUnitsQuery, FindCourseUnitsQueryVariables>(FindCourseUnitsDocument, variables),
    ...options
  }
    )};

useFindCourseUnitsQuery.getKey = (variables?: FindCourseUnitsQueryVariables) => variables === undefined ? ['FindCourseUnits'] : ['FindCourseUnits', variables];


useFindCourseUnitsQuery.fetcher = (variables?: FindCourseUnitsQueryVariables, options?: RequestInit['headers']) => fetcher<FindCourseUnitsQuery, FindCourseUnitsQueryVariables>(FindCourseUnitsDocument, variables, options);

export const FindUniquePageDocument = `
    query FindUniquePage($where: PageV2WhereUniqueInput!) {
  findUniquePage(where: $where) {
    id
    title
    content
    type
    unitPage {
      pageId
      unitId
    }
  }
}
    `;

export const useFindUniquePageQuery = <
      TData = FindUniquePageQuery,
      TError = unknown
    >(
      variables: FindUniquePageQueryVariables,
      options?: Omit<UseQueryOptions<FindUniquePageQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUniquePageQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUniquePageQuery, TError, TData>(
      {
    queryKey: ['FindUniquePage', variables],
    queryFn: fetcher<FindUniquePageQuery, FindUniquePageQueryVariables>(FindUniquePageDocument, variables),
    ...options
  }
    )};

useFindUniquePageQuery.getKey = (variables: FindUniquePageQueryVariables) => ['FindUniquePage', variables];


useFindUniquePageQuery.fetcher = (variables: FindUniquePageQueryVariables, options?: RequestInit['headers']) => fetcher<FindUniquePageQuery, FindUniquePageQueryVariables>(FindUniquePageDocument, variables, options);

export const ListEcosystemInfosDocument = `
    query ListEcosystemInfos($where: EcosystemInfoWhereInput, $page: Int, $limit: Int) {
  listEcosystemInfos(where: $where, page: $page, limit: $limit) {
    data {
      ecosystemId
      lang
      name
      alias
      description
      basic {
        id
        image
        track
        language
        type
        tags
        createdAt
        updatedAt
      }
    }
  }
}
    `;

export const useListEcosystemInfosQuery = <
      TData = ListEcosystemInfosQuery,
      TError = unknown
    >(
      variables?: ListEcosystemInfosQueryVariables,
      options?: Omit<UseQueryOptions<ListEcosystemInfosQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListEcosystemInfosQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListEcosystemInfosQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListEcosystemInfos'] : ['ListEcosystemInfos', variables],
    queryFn: fetcher<ListEcosystemInfosQuery, ListEcosystemInfosQueryVariables>(ListEcosystemInfosDocument, variables),
    ...options
  }
    )};

useListEcosystemInfosQuery.getKey = (variables?: ListEcosystemInfosQueryVariables) => variables === undefined ? ['ListEcosystemInfos'] : ['ListEcosystemInfos', variables];


useListEcosystemInfosQuery.fetcher = (variables?: ListEcosystemInfosQueryVariables, options?: RequestInit['headers']) => fetcher<ListEcosystemInfosQuery, ListEcosystemInfosQueryVariables>(ListEcosystemInfosDocument, variables, options);

export const ListEcosystemsDocument = `
    query ListEcosystems($where: EcosystemWhereInput) {
  listEcosystems(where: $where) {
    data {
      id
      image
      type
      language
      tags
      track
      createdAt
      updatedAt
    }
  }
}
    `;

export const useListEcosystemsQuery = <
      TData = ListEcosystemsQuery,
      TError = unknown
    >(
      variables?: ListEcosystemsQueryVariables,
      options?: Omit<UseQueryOptions<ListEcosystemsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListEcosystemsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListEcosystemsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListEcosystems'] : ['ListEcosystems', variables],
    queryFn: fetcher<ListEcosystemsQuery, ListEcosystemsQueryVariables>(ListEcosystemsDocument, variables),
    ...options
  }
    )};

useListEcosystemsQuery.getKey = (variables?: ListEcosystemsQueryVariables) => variables === undefined ? ['ListEcosystems'] : ['ListEcosystems', variables];


useListEcosystemsQuery.fetcher = (variables?: ListEcosystemsQueryVariables, options?: RequestInit['headers']) => fetcher<ListEcosystemsQuery, ListEcosystemsQueryVariables>(ListEcosystemsDocument, variables, options);

export const FindEcosystemInfoDocument = `
    query FindEcosystemInfo($where: EcosystemInfoWhereUniqueInput!) {
  ecosystem: findUniqueEcosystemInfo(where: $where) {
    ecosystemId
    name
    description
    progress
    basic {
      type
      image
    }
    phases {
      id
      coin
      title
      progress
      order
      courses {
        id
        alias
        type
        title
        progress
        currentPageId
        units {
          id
          currentPageId
          title
          progress
        }
      }
      quizzes {
        id
        order
        progress
        quizList {
          id
        }
        description
      }
      extra
    }
    certifications {
      id
      name
      description
      image
    }
  }
}
    `;

export const useFindEcosystemInfoQuery = <
      TData = FindEcosystemInfoQuery,
      TError = unknown
    >(
      variables: FindEcosystemInfoQueryVariables,
      options?: Omit<UseQueryOptions<FindEcosystemInfoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindEcosystemInfoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindEcosystemInfoQuery, TError, TData>(
      {
    queryKey: ['FindEcosystemInfo', variables],
    queryFn: fetcher<FindEcosystemInfoQuery, FindEcosystemInfoQueryVariables>(FindEcosystemInfoDocument, variables),
    ...options
  }
    )};

useFindEcosystemInfoQuery.getKey = (variables: FindEcosystemInfoQueryVariables) => ['FindEcosystemInfo', variables];


useFindEcosystemInfoQuery.fetcher = (variables: FindEcosystemInfoQueryVariables, options?: RequestInit['headers']) => fetcher<FindEcosystemInfoQuery, FindEcosystemInfoQueryVariables>(FindEcosystemInfoDocument, variables, options);

export const ListActiveEcosystemInfosDocument = `
    query ListActiveEcosystemInfos($lang: String!) {
  ecosystems: listActiveEcosystemInfos(lang: $lang) {
    ecosystemId
    basic {
      image
      type
    }
  }
}
    `;

export const useListActiveEcosystemInfosQuery = <
      TData = ListActiveEcosystemInfosQuery,
      TError = unknown
    >(
      variables: ListActiveEcosystemInfosQueryVariables,
      options?: Omit<UseQueryOptions<ListActiveEcosystemInfosQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListActiveEcosystemInfosQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListActiveEcosystemInfosQuery, TError, TData>(
      {
    queryKey: ['ListActiveEcosystemInfos', variables],
    queryFn: fetcher<ListActiveEcosystemInfosQuery, ListActiveEcosystemInfosQueryVariables>(ListActiveEcosystemInfosDocument, variables),
    ...options
  }
    )};

useListActiveEcosystemInfosQuery.getKey = (variables: ListActiveEcosystemInfosQueryVariables) => ['ListActiveEcosystemInfos', variables];


useListActiveEcosystemInfosQuery.fetcher = (variables: ListActiveEcosystemInfosQueryVariables, options?: RequestInit['headers']) => fetcher<ListActiveEcosystemInfosQuery, ListActiveEcosystemInfosQueryVariables>(ListActiveEcosystemInfosDocument, variables, options);

export const FindActiveEcosystemDocument = `
    query FindActiveEcosystem {
  ecosystem: findActiveEcosystem
}
    `;

export const useFindActiveEcosystemQuery = <
      TData = FindActiveEcosystemQuery,
      TError = unknown
    >(
      variables?: FindActiveEcosystemQueryVariables,
      options?: Omit<UseQueryOptions<FindActiveEcosystemQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindActiveEcosystemQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindActiveEcosystemQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['FindActiveEcosystem'] : ['FindActiveEcosystem', variables],
    queryFn: fetcher<FindActiveEcosystemQuery, FindActiveEcosystemQueryVariables>(FindActiveEcosystemDocument, variables),
    ...options
  }
    )};

useFindActiveEcosystemQuery.getKey = (variables?: FindActiveEcosystemQueryVariables) => variables === undefined ? ['FindActiveEcosystem'] : ['FindActiveEcosystem', variables];


useFindActiveEcosystemQuery.fetcher = (variables?: FindActiveEcosystemQueryVariables, options?: RequestInit['headers']) => fetcher<FindActiveEcosystemQuery, FindActiveEcosystemQueryVariables>(FindActiveEcosystemDocument, variables, options);

export const SwitchEcosystemDocument = `
    mutation SwitchEcosystem($ecosystemId: String) {
  switchEcosystem(ecosystemId: $ecosystemId)
}
    `;

export const useSwitchEcosystemMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SwitchEcosystemMutation, TError, SwitchEcosystemMutationVariables, TContext>) => {
    
    return useMutation<SwitchEcosystemMutation, TError, SwitchEcosystemMutationVariables, TContext>(
      {
    mutationKey: ['SwitchEcosystem'],
    mutationFn: (variables?: SwitchEcosystemMutationVariables) => fetcher<SwitchEcosystemMutation, SwitchEcosystemMutationVariables>(SwitchEcosystemDocument, variables)(),
    ...options
  }
    )};


useSwitchEcosystemMutation.fetcher = (variables?: SwitchEcosystemMutationVariables, options?: RequestInit['headers']) => fetcher<SwitchEcosystemMutation, SwitchEcosystemMutationVariables>(SwitchEcosystemDocument, variables, options);

export const CertificateProgressDocument = `
    query CertificateProgress($where: EcosystemInfoWhereUniqueInput!) {
  certificate: certificateProgress(where: $where) {
    id
    name
    description
    image
    progress
  }
}
    `;

export const useCertificateProgressQuery = <
      TData = CertificateProgressQuery,
      TError = unknown
    >(
      variables: CertificateProgressQueryVariables,
      options?: Omit<UseQueryOptions<CertificateProgressQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<CertificateProgressQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<CertificateProgressQuery, TError, TData>(
      {
    queryKey: ['CertificateProgress', variables],
    queryFn: fetcher<CertificateProgressQuery, CertificateProgressQueryVariables>(CertificateProgressDocument, variables),
    ...options
  }
    )};

useCertificateProgressQuery.getKey = (variables: CertificateProgressQueryVariables) => ['CertificateProgress', variables];


useCertificateProgressQuery.fetcher = (variables: CertificateProgressQueryVariables, options?: RequestInit['headers']) => fetcher<CertificateProgressQuery, CertificateProgressQueryVariables>(CertificateProgressDocument, variables, options);

export const ListEventsDocument = `
    query ListEvents($where: EventsWhereInput, $orderBy: [EventsOrderByWithRelationInput!], $page: Int, $limit: Int) {
  listEvents(where: $where, orderBy: $orderBy, page: $page, limit: $limit) {
    data {
      name
      medias
      location
      description
      startTime
      eventUrl
      prUrl
    }
    total
  }
}
    `;

export const useListEventsQuery = <
      TData = ListEventsQuery,
      TError = unknown
    >(
      variables?: ListEventsQueryVariables,
      options?: Omit<UseQueryOptions<ListEventsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListEventsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListEventsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListEvents'] : ['ListEvents', variables],
    queryFn: fetcher<ListEventsQuery, ListEventsQueryVariables>(ListEventsDocument, variables),
    ...options
  }
    )};

useListEventsQuery.getKey = (variables?: ListEventsQueryVariables) => variables === undefined ? ['ListEvents'] : ['ListEvents', variables];


useListEventsQuery.fetcher = (variables?: ListEventsQueryVariables, options?: RequestInit['headers']) => fetcher<ListEventsQuery, ListEventsQueryVariables>(ListEventsDocument, variables, options);

export const GetAllFaucetsDocument = `
    query getAllFaucets($where: FaucetWhereInput) {
  listFaucets(where: $where) {
    data {
      chainId
      name
      thumbnail
      amount
      symbol
      balance
    }
  }
}
    `;

export const useGetAllFaucetsQuery = <
      TData = GetAllFaucetsQuery,
      TError = unknown
    >(
      variables?: GetAllFaucetsQueryVariables,
      options?: Omit<UseQueryOptions<GetAllFaucetsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<GetAllFaucetsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<GetAllFaucetsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['getAllFaucets'] : ['getAllFaucets', variables],
    queryFn: fetcher<GetAllFaucetsQuery, GetAllFaucetsQueryVariables>(GetAllFaucetsDocument, variables),
    ...options
  }
    )};

useGetAllFaucetsQuery.getKey = (variables?: GetAllFaucetsQueryVariables) => variables === undefined ? ['getAllFaucets'] : ['getAllFaucets', variables];


useGetAllFaucetsQuery.fetcher = (variables?: GetAllFaucetsQueryVariables, options?: RequestInit['headers']) => fetcher<GetAllFaucetsQuery, GetAllFaucetsQueryVariables>(GetAllFaucetsDocument, variables, options);

export const GetFaucetDetailByIdDocument = `
    query getFaucetDetailById($where: FaucetWhereInput) {
  findFirstFaucet(where: $where) {
    chainId
    name
    thumbnail
    name
    amount
    symbol
    balance
    owner
  }
}
    `;

export const useGetFaucetDetailByIdQuery = <
      TData = GetFaucetDetailByIdQuery,
      TError = unknown
    >(
      variables?: GetFaucetDetailByIdQueryVariables,
      options?: Omit<UseQueryOptions<GetFaucetDetailByIdQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<GetFaucetDetailByIdQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<GetFaucetDetailByIdQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['getFaucetDetailById'] : ['getFaucetDetailById', variables],
    queryFn: fetcher<GetFaucetDetailByIdQuery, GetFaucetDetailByIdQueryVariables>(GetFaucetDetailByIdDocument, variables),
    ...options
  }
    )};

useGetFaucetDetailByIdQuery.getKey = (variables?: GetFaucetDetailByIdQueryVariables) => variables === undefined ? ['getFaucetDetailById'] : ['getFaucetDetailById', variables];


useGetFaucetDetailByIdQuery.fetcher = (variables?: GetFaucetDetailByIdQueryVariables, options?: RequestInit['headers']) => fetcher<GetFaucetDetailByIdQuery, GetFaucetDetailByIdQueryVariables>(GetFaucetDetailByIdDocument, variables, options);

export const ListFaucetsClaimRecordByChainIdDocument = `
    query listFaucetsClaimRecordByChainId($chainId: String!, $page: Int, $limit: Int) {
  listFaucetsClaimRecordByChainId(chainId: $chainId, page: $page, limit: $limit) {
    data {
      exportUrl
      claimTime
    }
    total
  }
}
    `;

export const useListFaucetsClaimRecordByChainIdQuery = <
      TData = ListFaucetsClaimRecordByChainIdQuery,
      TError = unknown
    >(
      variables: ListFaucetsClaimRecordByChainIdQueryVariables,
      options?: Omit<UseQueryOptions<ListFaucetsClaimRecordByChainIdQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListFaucetsClaimRecordByChainIdQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListFaucetsClaimRecordByChainIdQuery, TError, TData>(
      {
    queryKey: ['listFaucetsClaimRecordByChainId', variables],
    queryFn: fetcher<ListFaucetsClaimRecordByChainIdQuery, ListFaucetsClaimRecordByChainIdQueryVariables>(ListFaucetsClaimRecordByChainIdDocument, variables),
    ...options
  }
    )};

useListFaucetsClaimRecordByChainIdQuery.getKey = (variables: ListFaucetsClaimRecordByChainIdQueryVariables) => ['listFaucetsClaimRecordByChainId', variables];


useListFaucetsClaimRecordByChainIdQuery.fetcher = (variables: ListFaucetsClaimRecordByChainIdQueryVariables, options?: RequestInit['headers']) => fetcher<ListFaucetsClaimRecordByChainIdQuery, ListFaucetsClaimRecordByChainIdQueryVariables>(ListFaucetsClaimRecordByChainIdDocument, variables, options);

export const CreateFaucetClaimDocument = `
    mutation createFaucetClaim($chainId: Int!, $address: String!) {
  createFaucetClaim(chainId: $chainId, address: $address) {
    exportUrl
  }
}
    `;

export const useCreateFaucetClaimMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateFaucetClaimMutation, TError, CreateFaucetClaimMutationVariables, TContext>) => {
    
    return useMutation<CreateFaucetClaimMutation, TError, CreateFaucetClaimMutationVariables, TContext>(
      {
    mutationKey: ['createFaucetClaim'],
    mutationFn: (variables?: CreateFaucetClaimMutationVariables) => fetcher<CreateFaucetClaimMutation, CreateFaucetClaimMutationVariables>(CreateFaucetClaimDocument, variables)(),
    ...options
  }
    )};


useCreateFaucetClaimMutation.fetcher = (variables: CreateFaucetClaimMutationVariables, options?: RequestInit['headers']) => fetcher<CreateFaucetClaimMutation, CreateFaucetClaimMutationVariables>(CreateFaucetClaimDocument, variables, options);

export const ListGlossarysDocument = `
    query ListGlossarys($page: Int) {
  listGlossarys(page: $page) {
    data {
      alias
      categories
      id
      title
      description
      image
      tracks
      creatorName
      duration
      top
      publishDate
      createdAt
      updatedAt
    }
  }
}
    `;

export const useListGlossarysQuery = <
      TData = ListGlossarysQuery,
      TError = unknown
    >(
      variables?: ListGlossarysQueryVariables,
      options?: Omit<UseQueryOptions<ListGlossarysQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListGlossarysQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListGlossarysQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListGlossarys'] : ['ListGlossarys', variables],
    queryFn: fetcher<ListGlossarysQuery, ListGlossarysQueryVariables>(ListGlossarysDocument, variables),
    ...options
  }
    )};

useListGlossarysQuery.getKey = (variables?: ListGlossarysQueryVariables) => variables === undefined ? ['ListGlossarys'] : ['ListGlossarys', variables];


useListGlossarysQuery.fetcher = (variables?: ListGlossarysQueryVariables, options?: RequestInit['headers']) => fetcher<ListGlossarysQuery, ListGlossarysQueryVariables>(ListGlossarysDocument, variables, options);

export const ListGlossarysTracksDocument = `
    query ListGlossarysTracks {
  listGlossarysTracks
}
    `;

export const useListGlossarysTracksQuery = <
      TData = ListGlossarysTracksQuery,
      TError = unknown
    >(
      variables?: ListGlossarysTracksQueryVariables,
      options?: Omit<UseQueryOptions<ListGlossarysTracksQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListGlossarysTracksQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListGlossarysTracksQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListGlossarysTracks'] : ['ListGlossarysTracks', variables],
    queryFn: fetcher<ListGlossarysTracksQuery, ListGlossarysTracksQueryVariables>(ListGlossarysTracksDocument, variables),
    ...options
  }
    )};

useListGlossarysTracksQuery.getKey = (variables?: ListGlossarysTracksQueryVariables) => variables === undefined ? ['ListGlossarysTracks'] : ['ListGlossarysTracks', variables];


useListGlossarysTracksQuery.fetcher = (variables?: ListGlossarysTracksQueryVariables, options?: RequestInit['headers']) => fetcher<ListGlossarysTracksQuery, ListGlossarysTracksQueryVariables>(ListGlossarysTracksDocument, variables, options);

export const FindUniqueGlossaryDocument = `
    query FindUniqueGlossary($where: GlossaryWhereUniqueInput!) {
  findUniqueGlossary(where: $where) {
    id
    title
    alias
    description
    image
    categories
    tracks
    content
    creatorName
    duration
    top
    publishDate
    createdAt
    updatedAt
  }
}
    `;

export const useFindUniqueGlossaryQuery = <
      TData = FindUniqueGlossaryQuery,
      TError = unknown
    >(
      variables: FindUniqueGlossaryQueryVariables,
      options?: Omit<UseQueryOptions<FindUniqueGlossaryQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUniqueGlossaryQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUniqueGlossaryQuery, TError, TData>(
      {
    queryKey: ['FindUniqueGlossary', variables],
    queryFn: fetcher<FindUniqueGlossaryQuery, FindUniqueGlossaryQueryVariables>(FindUniqueGlossaryDocument, variables),
    ...options
  }
    )};

useFindUniqueGlossaryQuery.getKey = (variables: FindUniqueGlossaryQueryVariables) => ['FindUniqueGlossary', variables];


useFindUniqueGlossaryQuery.fetcher = (variables: FindUniqueGlossaryQueryVariables, options?: RequestInit['headers']) => fetcher<FindUniqueGlossaryQuery, FindUniqueGlossaryQueryVariables>(FindUniqueGlossaryDocument, variables, options);

export const GetAllHackathonInfoDocument = `
    query getAllHackathonInfo($where: HackathonWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonOrderByWithRelationInput!], $status: HackathonStatus) {
  listHackathons(
    where: $where
    page: $page
    limit: $limit
    orderBy: $orderBy
    status: $status
  ) {
    data {
      id
      name
      participants
      alias
      status
      projectCount
      priority
      ecosystem {
        image
        type
      }
      members {
        avatar
      }
      info {
        host
        image
        intro
        levelTag
      }
      timeline {
        rewardTime
        submissionClose
        submissionOpen
        registrationClose
        registrationOpen
        openReviewSame
        timeZone
      }
      rewards {
        totalRewards
        currency
      }
    }
    total
  }
}
    `;

export const useGetAllHackathonInfoQuery = <
      TData = GetAllHackathonInfoQuery,
      TError = unknown
    >(
      variables?: GetAllHackathonInfoQueryVariables,
      options?: Omit<UseQueryOptions<GetAllHackathonInfoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<GetAllHackathonInfoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<GetAllHackathonInfoQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['getAllHackathonInfo'] : ['getAllHackathonInfo', variables],
    queryFn: fetcher<GetAllHackathonInfoQuery, GetAllHackathonInfoQueryVariables>(GetAllHackathonInfoDocument, variables),
    ...options
  }
    )};

useGetAllHackathonInfoQuery.getKey = (variables?: GetAllHackathonInfoQueryVariables) => variables === undefined ? ['getAllHackathonInfo'] : ['getAllHackathonInfo', variables];


useGetAllHackathonInfoQuery.fetcher = (variables?: GetAllHackathonInfoQueryVariables, options?: RequestInit['headers']) => fetcher<GetAllHackathonInfoQuery, GetAllHackathonInfoQueryVariables>(GetAllHackathonInfoDocument, variables, options);

export const HighlightProjectDocument = `
    query HighlightProject($where: ProjectWhereInput) {
  highlightProject(where: $where) {
    id
    alias
    logo
    name
    winner {
      name
    }
    detail {
      oneLineIntro
    }
    ecology
    tracks
    teamLead {
      avatar
      username
      nickname
    }
    teachStack
  }
}
    `;

export const useHighlightProjectQuery = <
      TData = HighlightProjectQuery,
      TError = unknown
    >(
      variables?: HighlightProjectQueryVariables,
      options?: Omit<UseQueryOptions<HighlightProjectQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<HighlightProjectQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<HighlightProjectQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['HighlightProject'] : ['HighlightProject', variables],
    queryFn: fetcher<HighlightProjectQuery, HighlightProjectQueryVariables>(HighlightProjectDocument, variables),
    ...options
  }
    )};

useHighlightProjectQuery.getKey = (variables?: HighlightProjectQueryVariables) => variables === undefined ? ['HighlightProject'] : ['HighlightProject', variables];


useHighlightProjectQuery.fetcher = (variables?: HighlightProjectQueryVariables, options?: RequestInit['headers']) => fetcher<HighlightProjectQuery, HighlightProjectQueryVariables>(HighlightProjectDocument, variables, options);

export const HighlightBuilderDocument = `
    query HighlightBuilder {
  highlightBuilder {
    avatar
    nickname
    username
    location
    bio
    profile {
      techStack
    }
  }
}
    `;

export const useHighlightBuilderQuery = <
      TData = HighlightBuilderQuery,
      TError = unknown
    >(
      variables?: HighlightBuilderQueryVariables,
      options?: Omit<UseQueryOptions<HighlightBuilderQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<HighlightBuilderQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<HighlightBuilderQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['HighlightBuilder'] : ['HighlightBuilder', variables],
    queryFn: fetcher<HighlightBuilderQuery, HighlightBuilderQueryVariables>(HighlightBuilderDocument, variables),
    ...options
  }
    )};

useHighlightBuilderQuery.getKey = (variables?: HighlightBuilderQueryVariables) => variables === undefined ? ['HighlightBuilder'] : ['HighlightBuilder', variables];


useHighlightBuilderQuery.fetcher = (variables?: HighlightBuilderQueryVariables, options?: RequestInit['headers']) => fetcher<HighlightBuilderQuery, HighlightBuilderQueryVariables>(HighlightBuilderDocument, variables, options);

export const ListHackathonsByOrganizerDocument = `
    query ListHackathonsByOrganizer($status: OrganizerHackathonStatus!) {
  listHackathonsByOrganizer(status: $status) {
    data {
      progress
      id
      name
      info {
        intro
        image
      }
      projectCount
      timeline {
        submissionClose
        submissionOpen
        registrationClose
        registrationOpen
        rewardTime
      }
      members {
        avatar
      }
      participants
      alias
    }
  }
}
    `;

export const useListHackathonsByOrganizerQuery = <
      TData = ListHackathonsByOrganizerQuery,
      TError = unknown
    >(
      variables: ListHackathonsByOrganizerQueryVariables,
      options?: Omit<UseQueryOptions<ListHackathonsByOrganizerQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListHackathonsByOrganizerQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListHackathonsByOrganizerQuery, TError, TData>(
      {
    queryKey: ['ListHackathonsByOrganizer', variables],
    queryFn: fetcher<ListHackathonsByOrganizerQuery, ListHackathonsByOrganizerQueryVariables>(ListHackathonsByOrganizerDocument, variables),
    ...options
  }
    )};

useListHackathonsByOrganizerQuery.getKey = (variables: ListHackathonsByOrganizerQueryVariables) => ['ListHackathonsByOrganizer', variables];


useListHackathonsByOrganizerQuery.fetcher = (variables: ListHackathonsByOrganizerQueryVariables, options?: RequestInit['headers']) => fetcher<ListHackathonsByOrganizerQuery, ListHackathonsByOrganizerQueryVariables>(ListHackathonsByOrganizerDocument, variables, options);

export const FindOrganizerHackathonIncrecementInfoDocument = `
    query FindOrganizerHackathonIncrecementInfo($id: String!) {
  findOrganizerHackathonIncrecementInfo(id: $id) {
    application
    confirmation
    pageView
    submission
    todayApplication
    todayConfirmation
    todayPageView
    todaySubmission
    winner
  }
}
    `;

export const useFindOrganizerHackathonIncrecementInfoQuery = <
      TData = FindOrganizerHackathonIncrecementInfoQuery,
      TError = unknown
    >(
      variables: FindOrganizerHackathonIncrecementInfoQueryVariables,
      options?: Omit<UseQueryOptions<FindOrganizerHackathonIncrecementInfoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindOrganizerHackathonIncrecementInfoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindOrganizerHackathonIncrecementInfoQuery, TError, TData>(
      {
    queryKey: ['FindOrganizerHackathonIncrecementInfo', variables],
    queryFn: fetcher<FindOrganizerHackathonIncrecementInfoQuery, FindOrganizerHackathonIncrecementInfoQueryVariables>(FindOrganizerHackathonIncrecementInfoDocument, variables),
    ...options
  }
    )};

useFindOrganizerHackathonIncrecementInfoQuery.getKey = (variables: FindOrganizerHackathonIncrecementInfoQueryVariables) => ['FindOrganizerHackathonIncrecementInfo', variables];


useFindOrganizerHackathonIncrecementInfoQuery.fetcher = (variables: FindOrganizerHackathonIncrecementInfoQueryVariables, options?: RequestInit['headers']) => fetcher<FindOrganizerHackathonIncrecementInfoQuery, FindOrganizerHackathonIncrecementInfoQueryVariables>(FindOrganizerHackathonIncrecementInfoDocument, variables, options);

export const ListOrganizerApplicationDocument = `
    query ListOrganizerApplication($where: HackathonMemberWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonMemberOrderByWithRelationInput!]) {
  listOrganizerApplication(
    where: $where
    page: $page
    limit: $limit
    orderBy: $orderBy
  ) {
    data {
      bio
      status
      location
      username
      weChat
      info
      avatar
      github
      email
      discord
      createdAt
      linkedIn
      userId
      twitter
      telegram
      id
      isSubmitted
      isRegister
      discord
      registerConfirm
    }
  }
}
    `;

export const useListOrganizerApplicationQuery = <
      TData = ListOrganizerApplicationQuery,
      TError = unknown
    >(
      variables?: ListOrganizerApplicationQueryVariables,
      options?: Omit<UseQueryOptions<ListOrganizerApplicationQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListOrganizerApplicationQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListOrganizerApplicationQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListOrganizerApplication'] : ['ListOrganizerApplication', variables],
    queryFn: fetcher<ListOrganizerApplicationQuery, ListOrganizerApplicationQueryVariables>(ListOrganizerApplicationDocument, variables),
    ...options
  }
    )};

useListOrganizerApplicationQuery.getKey = (variables?: ListOrganizerApplicationQueryVariables) => variables === undefined ? ['ListOrganizerApplication'] : ['ListOrganizerApplication', variables];


useListOrganizerApplicationQuery.fetcher = (variables?: ListOrganizerApplicationQueryVariables, options?: RequestInit['headers']) => fetcher<ListOrganizerApplicationQuery, ListOrganizerApplicationQueryVariables>(ListOrganizerApplicationDocument, variables, options);

export const ListOrganizerSubmissionProjectDocument = `
    query listOrganizerSubmissionProject($where: ProjectWhereInput, $page: Int, $limit: Int, $orderBy: [ProjectOrderByWithRelationInput!]) {
  listOrganizerSubmissionProject(
    where: $where
    page: $page
    limit: $limit
    orderBy: $orderBy
  ) {
    data {
      team {
        members {
          info
          createdAt
          username
          location
          avatar
          memberType
          bio
          nickname
        }
      }
      name
      id
      createdAt
      tracks
      demoVideo
      logo
      status
      pitchVideo
      location
      prizeTrack
      detail {
        detailedIntro
        oneLineIntro
      }
      addition {
        contract
        githubLink
        isOpenSource
      }
      teachStack
      wallet
      ecosystem {
        image
        id
      }
    }
  }
}
    `;

export const useListOrganizerSubmissionProjectQuery = <
      TData = ListOrganizerSubmissionProjectQuery,
      TError = unknown
    >(
      variables?: ListOrganizerSubmissionProjectQueryVariables,
      options?: Omit<UseQueryOptions<ListOrganizerSubmissionProjectQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListOrganizerSubmissionProjectQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListOrganizerSubmissionProjectQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['listOrganizerSubmissionProject'] : ['listOrganizerSubmissionProject', variables],
    queryFn: fetcher<ListOrganizerSubmissionProjectQuery, ListOrganizerSubmissionProjectQueryVariables>(ListOrganizerSubmissionProjectDocument, variables),
    ...options
  }
    )};

useListOrganizerSubmissionProjectQuery.getKey = (variables?: ListOrganizerSubmissionProjectQueryVariables) => variables === undefined ? ['listOrganizerSubmissionProject'] : ['listOrganizerSubmissionProject', variables];


useListOrganizerSubmissionProjectQuery.fetcher = (variables?: ListOrganizerSubmissionProjectQueryVariables, options?: RequestInit['headers']) => fetcher<ListOrganizerSubmissionProjectQuery, ListOrganizerSubmissionProjectQueryVariables>(ListOrganizerSubmissionProjectDocument, variables, options);

export const ListOrganizerJudgeDocument = `
    query ListOrganizerJudge($where: HackathonJudgeWhereInput, $page: Int, $limit: Int, $orderBy: [HackathonJudgeOrderByWithRelationInput!]) {
  listOrganizerJudge(where: $where, page: $page, limit: $limit, orderBy: $orderBy) {
    data {
      criteria
      judgeTotalVote
      judgeProjectVote
      judgeMode
      rewardName
      id
      totalVote
      voteMode
      userTotalVotes
      hackathon {
        name
        timeline {
          rewardTime
          submissionClose
        }
      }
      judgeAccountInfo {
        avatar
        nickname
      }
      announce
      reward {
        name
        rewards
        totalRewards
        order
      }
    }
  }
}
    `;

export const useListOrganizerJudgeQuery = <
      TData = ListOrganizerJudgeQuery,
      TError = unknown
    >(
      variables?: ListOrganizerJudgeQueryVariables,
      options?: Omit<UseQueryOptions<ListOrganizerJudgeQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListOrganizerJudgeQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListOrganizerJudgeQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListOrganizerJudge'] : ['ListOrganizerJudge', variables],
    queryFn: fetcher<ListOrganizerJudgeQuery, ListOrganizerJudgeQueryVariables>(ListOrganizerJudgeDocument, variables),
    ...options
  }
    )};

useListOrganizerJudgeQuery.getKey = (variables?: ListOrganizerJudgeQueryVariables) => variables === undefined ? ['ListOrganizerJudge'] : ['ListOrganizerJudge', variables];


useListOrganizerJudgeQuery.fetcher = (variables?: ListOrganizerJudgeQueryVariables, options?: RequestInit['headers']) => fetcher<ListOrganizerJudgeQuery, ListOrganizerJudgeQueryVariables>(ListOrganizerJudgeDocument, variables, options);

export const ListOrganizerJudgeProjectDocument = `
    query ListOrganizerJudgeProject($where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {
  listOrganizerJudgeProject(where: $where, orderBy: $orderBy) {
    projects {
      name
      id
      hackathonId
      tracks
      team {
        members {
          nickname
          memberType
          username
        }
      }
      rewards {
        rank {
          rank
        }
        name
      }
      logo
      vote
      fixOrSocreVote {
        ... on ScoreVote {
          scoresMember {
            avatar
            name
            score
          }
          rank
          finalScore
        }
        ... on FixedVote {
          rank
          totalVotes
          userVotes
          judgeVotes
          isIncrease
        }
      }
    }
    reward {
      rewards
      mode
      name
      id
    }
  }
}
    `;

export const useListOrganizerJudgeProjectQuery = <
      TData = ListOrganizerJudgeProjectQuery,
      TError = unknown
    >(
      variables?: ListOrganizerJudgeProjectQueryVariables,
      options?: Omit<UseQueryOptions<ListOrganizerJudgeProjectQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListOrganizerJudgeProjectQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListOrganizerJudgeProjectQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListOrganizerJudgeProject'] : ['ListOrganizerJudgeProject', variables],
    queryFn: fetcher<ListOrganizerJudgeProjectQuery, ListOrganizerJudgeProjectQueryVariables>(ListOrganizerJudgeProjectDocument, variables),
    ...options
  }
    )};

useListOrganizerJudgeProjectQuery.getKey = (variables?: ListOrganizerJudgeProjectQueryVariables) => variables === undefined ? ['ListOrganizerJudgeProject'] : ['ListOrganizerJudgeProject', variables];


useListOrganizerJudgeProjectQuery.fetcher = (variables?: ListOrganizerJudgeProjectQueryVariables, options?: RequestInit['headers']) => fetcher<ListOrganizerJudgeProjectQuery, ListOrganizerJudgeProjectQueryVariables>(ListOrganizerJudgeProjectDocument, variables, options);

export const FindListTemplateDocument = `
    query FindListTemplate($id: String!, $mode: ModeEnum!) {
  findListTemplate(id: $id, mode: $mode) {
    timeline {
      submissionClose
      rewardTime
      submissionOpen
    }
    registration {
      template
      disable
      type
      receivers
    }
    reward {
      template
      type
      disable
      receivers
    }
    submission {
      template
      type
      disable
      receivers
    }
    judging {
      receivers
      disable
      template
      type
    }
  }
}
    `;

export const useFindListTemplateQuery = <
      TData = FindListTemplateQuery,
      TError = unknown
    >(
      variables: FindListTemplateQueryVariables,
      options?: Omit<UseQueryOptions<FindListTemplateQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindListTemplateQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindListTemplateQuery, TError, TData>(
      {
    queryKey: ['FindListTemplate', variables],
    queryFn: fetcher<FindListTemplateQuery, FindListTemplateQueryVariables>(FindListTemplateDocument, variables),
    ...options
  }
    )};

useFindListTemplateQuery.getKey = (variables: FindListTemplateQueryVariables) => ['FindListTemplate', variables];


useFindListTemplateQuery.fetcher = (variables: FindListTemplateQueryVariables, options?: RequestInit['headers']) => fetcher<FindListTemplateQuery, FindListTemplateQueryVariables>(FindListTemplateDocument, variables, options);

export const FindReceiversDocument = `
    query FindReceivers($id: String!) {
  findReceivers(id: $id) {
    count
    type
  }
}
    `;

export const useFindReceiversQuery = <
      TData = FindReceiversQuery,
      TError = unknown
    >(
      variables: FindReceiversQueryVariables,
      options?: Omit<UseQueryOptions<FindReceiversQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindReceiversQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindReceiversQuery, TError, TData>(
      {
    queryKey: ['FindReceivers', variables],
    queryFn: fetcher<FindReceiversQuery, FindReceiversQueryVariables>(FindReceiversDocument, variables),
    ...options
  }
    )};

useFindReceiversQuery.getKey = (variables: FindReceiversQueryVariables) => ['FindReceivers', variables];


useFindReceiversQuery.fetcher = (variables: FindReceiversQueryVariables, options?: RequestInit['headers']) => fetcher<FindReceiversQuery, FindReceiversQueryVariables>(FindReceiversDocument, variables, options);

export const UpdateManyOrganizerApplicationMemberStatusDocument = `
    mutation UpdateManyOrganizerApplicationMemberStatus($ids: [String!]!, $joinStatus: HackathonMemberJoinStatus!) {
  updateManyOrganizerApplicationMemberStatus(ids: $ids, joinStatus: $joinStatus)
}
    `;

export const useUpdateManyOrganizerApplicationMemberStatusMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateManyOrganizerApplicationMemberStatusMutation, TError, UpdateManyOrganizerApplicationMemberStatusMutationVariables, TContext>) => {
    
    return useMutation<UpdateManyOrganizerApplicationMemberStatusMutation, TError, UpdateManyOrganizerApplicationMemberStatusMutationVariables, TContext>(
      {
    mutationKey: ['UpdateManyOrganizerApplicationMemberStatus'],
    mutationFn: (variables?: UpdateManyOrganizerApplicationMemberStatusMutationVariables) => fetcher<UpdateManyOrganizerApplicationMemberStatusMutation, UpdateManyOrganizerApplicationMemberStatusMutationVariables>(UpdateManyOrganizerApplicationMemberStatusDocument, variables)(),
    ...options
  }
    )};


useUpdateManyOrganizerApplicationMemberStatusMutation.fetcher = (variables: UpdateManyOrganizerApplicationMemberStatusMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateManyOrganizerApplicationMemberStatusMutation, UpdateManyOrganizerApplicationMemberStatusMutationVariables>(UpdateManyOrganizerApplicationMemberStatusDocument, variables, options);

export const CreateAndUpdateHackathonAnnouncementDocument = `
    mutation CreateAndUpdateHackathonAnnouncement($data: HackathonAnnouncementInput!) {
  createAndUpdateHackathonAnnouncement(data: $data) {
    id
  }
}
    `;

export const useCreateAndUpdateHackathonAnnouncementMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateAndUpdateHackathonAnnouncementMutation, TError, CreateAndUpdateHackathonAnnouncementMutationVariables, TContext>) => {
    
    return useMutation<CreateAndUpdateHackathonAnnouncementMutation, TError, CreateAndUpdateHackathonAnnouncementMutationVariables, TContext>(
      {
    mutationKey: ['CreateAndUpdateHackathonAnnouncement'],
    mutationFn: (variables?: CreateAndUpdateHackathonAnnouncementMutationVariables) => fetcher<CreateAndUpdateHackathonAnnouncementMutation, CreateAndUpdateHackathonAnnouncementMutationVariables>(CreateAndUpdateHackathonAnnouncementDocument, variables)(),
    ...options
  }
    )};


useCreateAndUpdateHackathonAnnouncementMutation.fetcher = (variables: CreateAndUpdateHackathonAnnouncementMutationVariables, options?: RequestInit['headers']) => fetcher<CreateAndUpdateHackathonAnnouncementMutation, CreateAndUpdateHackathonAnnouncementMutationVariables>(CreateAndUpdateHackathonAnnouncementDocument, variables, options);

export const ListHackathonAnnouncementDocument = `
    query ListHackathonAnnouncement($id: String!) {
  listHackathonAnnouncement(id: $id) {
    actualTime
    message
    receivers
    title
    id
    timezone
    rightNow
  }
}
    `;

export const useListHackathonAnnouncementQuery = <
      TData = ListHackathonAnnouncementQuery,
      TError = unknown
    >(
      variables: ListHackathonAnnouncementQueryVariables,
      options?: Omit<UseQueryOptions<ListHackathonAnnouncementQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListHackathonAnnouncementQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListHackathonAnnouncementQuery, TError, TData>(
      {
    queryKey: ['ListHackathonAnnouncement', variables],
    queryFn: fetcher<ListHackathonAnnouncementQuery, ListHackathonAnnouncementQueryVariables>(ListHackathonAnnouncementDocument, variables),
    ...options
  }
    )};

useListHackathonAnnouncementQuery.getKey = (variables: ListHackathonAnnouncementQueryVariables) => ['ListHackathonAnnouncement', variables];


useListHackathonAnnouncementQuery.fetcher = (variables: ListHackathonAnnouncementQueryVariables, options?: RequestInit['headers']) => fetcher<ListHackathonAnnouncementQuery, ListHackathonAnnouncementQueryVariables>(ListHackathonAnnouncementDocument, variables, options);

export const ListOrganizerDistributionUtmSourcesDocument = `
    query ListOrganizerDistributionUTMSources($where: HackathonUTMWhereInput) {
  listOrganizerDistributionUTMSources(where: $where) {
    color
    sourceName
    url
    id
  }
}
    `;

export const useListOrganizerDistributionUtmSourcesQuery = <
      TData = ListOrganizerDistributionUtmSourcesQuery,
      TError = unknown
    >(
      variables?: ListOrganizerDistributionUtmSourcesQueryVariables,
      options?: Omit<UseQueryOptions<ListOrganizerDistributionUtmSourcesQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListOrganizerDistributionUtmSourcesQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListOrganizerDistributionUtmSourcesQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListOrganizerDistributionUTMSources'] : ['ListOrganizerDistributionUTMSources', variables],
    queryFn: fetcher<ListOrganizerDistributionUtmSourcesQuery, ListOrganizerDistributionUtmSourcesQueryVariables>(ListOrganizerDistributionUtmSourcesDocument, variables),
    ...options
  }
    )};

useListOrganizerDistributionUtmSourcesQuery.getKey = (variables?: ListOrganizerDistributionUtmSourcesQueryVariables) => variables === undefined ? ['ListOrganizerDistributionUTMSources'] : ['ListOrganizerDistributionUTMSources', variables];


useListOrganizerDistributionUtmSourcesQuery.fetcher = (variables?: ListOrganizerDistributionUtmSourcesQueryVariables, options?: RequestInit['headers']) => fetcher<ListOrganizerDistributionUtmSourcesQuery, ListOrganizerDistributionUtmSourcesQueryVariables>(ListOrganizerDistributionUtmSourcesDocument, variables, options);

export const CreateHackathonUtmDocument = `
    mutation CreateHackathonUTM($data: HackathonUTMCreateInput!) {
  createHackathonUTM(data: $data) {
    id
  }
}
    `;

export const useCreateHackathonUtmMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateHackathonUtmMutation, TError, CreateHackathonUtmMutationVariables, TContext>) => {
    
    return useMutation<CreateHackathonUtmMutation, TError, CreateHackathonUtmMutationVariables, TContext>(
      {
    mutationKey: ['CreateHackathonUTM'],
    mutationFn: (variables?: CreateHackathonUtmMutationVariables) => fetcher<CreateHackathonUtmMutation, CreateHackathonUtmMutationVariables>(CreateHackathonUtmDocument, variables)(),
    ...options
  }
    )};


useCreateHackathonUtmMutation.fetcher = (variables: CreateHackathonUtmMutationVariables, options?: RequestInit['headers']) => fetcher<CreateHackathonUtmMutation, CreateHackathonUtmMutationVariables>(CreateHackathonUtmDocument, variables, options);

export const UpdateHackathonUtmDocument = `
    mutation UpdateHackathonUTM($data: HackathonUTMUpdateInput!, $where: HackathonUTMWhereUniqueInput!) {
  updateHackathonUTM(data: $data, where: $where) {
    id
  }
}
    `;

export const useUpdateHackathonUtmMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateHackathonUtmMutation, TError, UpdateHackathonUtmMutationVariables, TContext>) => {
    
    return useMutation<UpdateHackathonUtmMutation, TError, UpdateHackathonUtmMutationVariables, TContext>(
      {
    mutationKey: ['UpdateHackathonUTM'],
    mutationFn: (variables?: UpdateHackathonUtmMutationVariables) => fetcher<UpdateHackathonUtmMutation, UpdateHackathonUtmMutationVariables>(UpdateHackathonUtmDocument, variables)(),
    ...options
  }
    )};


useUpdateHackathonUtmMutation.fetcher = (variables: UpdateHackathonUtmMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateHackathonUtmMutation, UpdateHackathonUtmMutationVariables>(UpdateHackathonUtmDocument, variables, options);

export const FindDistributionGrouthDocument = `
    query FindDistributionGrouth($id: String, $growthType: GrowthType, $growthFilter: GrowthFilter) {
  findDistributionGrouth(
    id: $id
    growthType: $growthType
    growthFilter: $growthFilter
  ) {
    data {
      count
      time
    }
    color
    id
    sourceName
  }
}
    `;

export const useFindDistributionGrouthQuery = <
      TData = FindDistributionGrouthQuery,
      TError = unknown
    >(
      variables?: FindDistributionGrouthQueryVariables,
      options?: Omit<UseQueryOptions<FindDistributionGrouthQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindDistributionGrouthQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindDistributionGrouthQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['FindDistributionGrouth'] : ['FindDistributionGrouth', variables],
    queryFn: fetcher<FindDistributionGrouthQuery, FindDistributionGrouthQueryVariables>(FindDistributionGrouthDocument, variables),
    ...options
  }
    )};

useFindDistributionGrouthQuery.getKey = (variables?: FindDistributionGrouthQueryVariables) => variables === undefined ? ['FindDistributionGrouth'] : ['FindDistributionGrouth', variables];


useFindDistributionGrouthQuery.fetcher = (variables?: FindDistributionGrouthQueryVariables, options?: RequestInit['headers']) => fetcher<FindDistributionGrouthQuery, FindDistributionGrouthQueryVariables>(FindDistributionGrouthDocument, variables, options);

export const DeleteHackathonAnnouncementDocument = `
    mutation DeleteHackathonAnnouncement($id: Float!, $hackathonId: String!) {
  deleteHackathonAnnouncement(id: $id, hackathonId: $hackathonId) {
    id
  }
}
    `;

export const useDeleteHackathonAnnouncementMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteHackathonAnnouncementMutation, TError, DeleteHackathonAnnouncementMutationVariables, TContext>) => {
    
    return useMutation<DeleteHackathonAnnouncementMutation, TError, DeleteHackathonAnnouncementMutationVariables, TContext>(
      {
    mutationKey: ['DeleteHackathonAnnouncement'],
    mutationFn: (variables?: DeleteHackathonAnnouncementMutationVariables) => fetcher<DeleteHackathonAnnouncementMutation, DeleteHackathonAnnouncementMutationVariables>(DeleteHackathonAnnouncementDocument, variables)(),
    ...options
  }
    )};


useDeleteHackathonAnnouncementMutation.fetcher = (variables: DeleteHackathonAnnouncementMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteHackathonAnnouncementMutation, DeleteHackathonAnnouncementMutationVariables>(DeleteHackathonAnnouncementDocument, variables, options);

export const FindDistributionDocument = `
    query FindDistribution($id: String!) {
  findDistribution(id: $id) {
    pageView {
      rate
      count
      id
      color
      sourceName
    }
    submission {
      sourceName
      rate
      id
      count
      color
    }
    registration {
      id
      color
      count
      rate
      sourceName
    }
    winner {
      id
      color
      count
      rate
      sourceName
    }
  }
}
    `;

export const useFindDistributionQuery = <
      TData = FindDistributionQuery,
      TError = unknown
    >(
      variables: FindDistributionQueryVariables,
      options?: Omit<UseQueryOptions<FindDistributionQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindDistributionQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindDistributionQuery, TError, TData>(
      {
    queryKey: ['FindDistribution', variables],
    queryFn: fetcher<FindDistributionQuery, FindDistributionQueryVariables>(FindDistributionDocument, variables),
    ...options
  }
    )};

useFindDistributionQuery.getKey = (variables: FindDistributionQueryVariables) => ['FindDistribution', variables];


useFindDistributionQuery.fetcher = (variables: FindDistributionQueryVariables, options?: RequestInit['headers']) => fetcher<FindDistributionQuery, FindDistributionQueryVariables>(FindDistributionDocument, variables, options);

export const AnnounceJudgeDocument = `
    mutation AnnounceJudge($id: String!, $hackathonId: String!) {
  announceJudge(id: $id, hackathonId: $hackathonId) {
    id
  }
}
    `;

export const useAnnounceJudgeMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<AnnounceJudgeMutation, TError, AnnounceJudgeMutationVariables, TContext>) => {
    
    return useMutation<AnnounceJudgeMutation, TError, AnnounceJudgeMutationVariables, TContext>(
      {
    mutationKey: ['AnnounceJudge'],
    mutationFn: (variables?: AnnounceJudgeMutationVariables) => fetcher<AnnounceJudgeMutation, AnnounceJudgeMutationVariables>(AnnounceJudgeDocument, variables)(),
    ...options
  }
    )};


useAnnounceJudgeMutation.fetcher = (variables: AnnounceJudgeMutationVariables, options?: RequestInit['headers']) => fetcher<AnnounceJudgeMutation, AnnounceJudgeMutationVariables>(AnnounceJudgeDocument, variables, options);

export const FindHackathonWinnerDocument = `
    query findHackathonWinner($id: String!, $prizeTrack: String!) {
  findHackathonWinner(id: $id, prizeTrack: $prizeTrack) {
    name
    hackathonId
    type
    rewardId
    projectId
    id
    project {
      name
      logo
    }
    place
    rankAndVote {
      rank
      totalVotes
    }
    winnersInfo {
      nickname
    }
  }
}
    `;

export const useFindHackathonWinnerQuery = <
      TData = FindHackathonWinnerQuery,
      TError = unknown
    >(
      variables: FindHackathonWinnerQueryVariables,
      options?: Omit<UseQueryOptions<FindHackathonWinnerQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindHackathonWinnerQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindHackathonWinnerQuery, TError, TData>(
      {
    queryKey: ['findHackathonWinner', variables],
    queryFn: fetcher<FindHackathonWinnerQuery, FindHackathonWinnerQueryVariables>(FindHackathonWinnerDocument, variables),
    ...options
  }
    )};

useFindHackathonWinnerQuery.getKey = (variables: FindHackathonWinnerQueryVariables) => ['findHackathonWinner', variables];


useFindHackathonWinnerQuery.fetcher = (variables: FindHackathonWinnerQueryVariables, options?: RequestInit['headers']) => fetcher<FindHackathonWinnerQuery, FindHackathonWinnerQueryVariables>(FindHackathonWinnerDocument, variables, options);

export const UpdateHackathonWinnerDocument = `
    mutation UpdateHackathonWinner($id: Int!, $data: HackathonWinnerInputExtend!) {
  updateHackathonWinner(winnerId: $id, data: $data)
}
    `;

export const useUpdateHackathonWinnerMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateHackathonWinnerMutation, TError, UpdateHackathonWinnerMutationVariables, TContext>) => {
    
    return useMutation<UpdateHackathonWinnerMutation, TError, UpdateHackathonWinnerMutationVariables, TContext>(
      {
    mutationKey: ['UpdateHackathonWinner'],
    mutationFn: (variables?: UpdateHackathonWinnerMutationVariables) => fetcher<UpdateHackathonWinnerMutation, UpdateHackathonWinnerMutationVariables>(UpdateHackathonWinnerDocument, variables)(),
    ...options
  }
    )};


useUpdateHackathonWinnerMutation.fetcher = (variables: UpdateHackathonWinnerMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateHackathonWinnerMutation, UpdateHackathonWinnerMutationVariables>(UpdateHackathonWinnerDocument, variables, options);

export const CreateHackathonWinnerDocument = `
    mutation CreateHackathonWinner($data: HackathonWinnerInputExtend!) {
  createHackathonWinner(data: $data) {
    id
  }
}
    `;

export const useCreateHackathonWinnerMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateHackathonWinnerMutation, TError, CreateHackathonWinnerMutationVariables, TContext>) => {
    
    return useMutation<CreateHackathonWinnerMutation, TError, CreateHackathonWinnerMutationVariables, TContext>(
      {
    mutationKey: ['CreateHackathonWinner'],
    mutationFn: (variables?: CreateHackathonWinnerMutationVariables) => fetcher<CreateHackathonWinnerMutation, CreateHackathonWinnerMutationVariables>(CreateHackathonWinnerDocument, variables)(),
    ...options
  }
    )};


useCreateHackathonWinnerMutation.fetcher = (variables: CreateHackathonWinnerMutationVariables, options?: RequestInit['headers']) => fetcher<CreateHackathonWinnerMutation, CreateHackathonWinnerMutationVariables>(CreateHackathonWinnerDocument, variables, options);

export const ToggleScheduleDocument = `
    mutation ToggleSchedule($id: String!, $type: [TemplateType!]!, $isStart: Boolean!) {
  toggleSchedule(id: $id, type: $type, isStart: $isStart)
}
    `;

export const useToggleScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ToggleScheduleMutation, TError, ToggleScheduleMutationVariables, TContext>) => {
    
    return useMutation<ToggleScheduleMutation, TError, ToggleScheduleMutationVariables, TContext>(
      {
    mutationKey: ['ToggleSchedule'],
    mutationFn: (variables?: ToggleScheduleMutationVariables) => fetcher<ToggleScheduleMutation, ToggleScheduleMutationVariables>(ToggleScheduleDocument, variables)(),
    ...options
  }
    )};


useToggleScheduleMutation.fetcher = (variables: ToggleScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<ToggleScheduleMutation, ToggleScheduleMutationVariables>(ToggleScheduleDocument, variables, options);

export const FindUniqueHackathonDocument = `
    query FindUniqueHackathon($where: HackathonWhereUniqueInput!) {
  findUniqueHackathon(where: $where) {
    ...hackathonBaseInfo
    info {
      id
      host
      intro
      ecosystem
      levelTag
      description
      conduct
      mode
      allowSubmission
      address
      application
      submission
      sections
      image
    }
    links {
      website
      links
      id
      email
    }
    judge {
      voteMode
      totalVote
      setWinner
      rewardName
      projectJudgeCount
      userTotalVotes
      judgeTotalVote
      judgeProjectVote
      judgeMode
      id
      disableJudge
      criteria
      announce
      userTags
      judgeAccounts {
        password
        avatar
        nickname
        email
        id
      }
    }
    rewards {
      id
      hackathonId
      name
      mode
      currency
      rewards
      totalRewards
      rule
      order
    }
  }
}
    ${HackathonBaseInfoFragmentDoc}`;

export const useFindUniqueHackathonQuery = <
      TData = FindUniqueHackathonQuery,
      TError = unknown
    >(
      variables: FindUniqueHackathonQueryVariables,
      options?: Omit<UseQueryOptions<FindUniqueHackathonQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUniqueHackathonQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUniqueHackathonQuery, TError, TData>(
      {
    queryKey: ['FindUniqueHackathon', variables],
    queryFn: fetcher<FindUniqueHackathonQuery, FindUniqueHackathonQueryVariables>(FindUniqueHackathonDocument, variables),
    ...options
  }
    )};

useFindUniqueHackathonQuery.getKey = (variables: FindUniqueHackathonQueryVariables) => ['FindUniqueHackathon', variables];


useFindUniqueHackathonQuery.fetcher = (variables: FindUniqueHackathonQueryVariables, options?: RequestInit['headers']) => fetcher<FindUniqueHackathonQuery, FindUniqueHackathonQueryVariables>(FindUniqueHackathonDocument, variables, options);

export const HackathonListProjectsDocument = `
    query HackathonListProjects($page: Int, $limit: Int, $where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {
  listProjects(page: $page, limit: $limit, where: $where, orderBy: $orderBy) {
    total
    data {
      id
      hackathonId
      hackathonName
      status
      creatorId
      teamId
      versionName
      type
      fromId
      isSubmit
      detail {
        oneLineIntro
        detailedIntro
      }
      lock
      name
      alias
      logo
      teamLead {
        avatar
        nickname
      }
      location
      prizeTrack
      ecology
      tracks
      wallet
      fields
      createdAt
      updatedAt
      vote
      isLiked
      likes
      winner {
        place
        id
        name
      }
    }
  }
}
    `;

export const useHackathonListProjectsQuery = <
      TData = HackathonListProjectsQuery,
      TError = unknown
    >(
      variables?: HackathonListProjectsQueryVariables,
      options?: Omit<UseQueryOptions<HackathonListProjectsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<HackathonListProjectsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<HackathonListProjectsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['HackathonListProjects'] : ['HackathonListProjects', variables],
    queryFn: fetcher<HackathonListProjectsQuery, HackathonListProjectsQueryVariables>(HackathonListProjectsDocument, variables),
    ...options
  }
    )};

useHackathonListProjectsQuery.getKey = (variables?: HackathonListProjectsQueryVariables) => variables === undefined ? ['HackathonListProjects'] : ['HackathonListProjects', variables];


useHackathonListProjectsQuery.fetcher = (variables?: HackathonListProjectsQueryVariables, options?: RequestInit['headers']) => fetcher<HackathonListProjectsQuery, HackathonListProjectsQueryVariables>(HackathonListProjectsDocument, variables, options);

export const ListHackathonsBySelfDocument = `
    query ListHackathonsBySelf($limit: Int, $page: Int, $status: HackathonStatus) {
  listHackathonsBySelf(limit: $limit, page: $page, status: $status) {
    total
    data {
      ...hackathonBaseInfo
      info {
        host
        intro
        description
        mode
        allowSubmission
        image
      }
      rewards {
        id
        name
        currency
        totalRewards
      }
      submitted {
        logo
        alias
        name
        isSubmit
        prizeTrack
        progress
        status
        id
        creatorId
        tracks
      }
      members {
        userId
        teamId
        id
        nickname
        avatar
        email
      }
    }
  }
}
    ${HackathonBaseInfoFragmentDoc}`;

export const useListHackathonsBySelfQuery = <
      TData = ListHackathonsBySelfQuery,
      TError = unknown
    >(
      variables?: ListHackathonsBySelfQueryVariables,
      options?: Omit<UseQueryOptions<ListHackathonsBySelfQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListHackathonsBySelfQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListHackathonsBySelfQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListHackathonsBySelf'] : ['ListHackathonsBySelf', variables],
    queryFn: fetcher<ListHackathonsBySelfQuery, ListHackathonsBySelfQueryVariables>(ListHackathonsBySelfDocument, variables),
    ...options
  }
    )};

useListHackathonsBySelfQuery.getKey = (variables?: ListHackathonsBySelfQueryVariables) => variables === undefined ? ['ListHackathonsBySelf'] : ['ListHackathonsBySelf', variables];


useListHackathonsBySelfQuery.fetcher = (variables?: ListHackathonsBySelfQueryVariables, options?: RequestInit['headers']) => fetcher<ListHackathonsBySelfQuery, ListHackathonsBySelfQueryVariables>(ListHackathonsBySelfDocument, variables, options);

export const ListHackathonsDocument = `
    query ListHackathons($status: HackathonStatus, $page: Int, $limit: Int, $projectId: String) {
  listHackathons(
    status: $status
    page: $page
    limit: $limit
    projectId: $projectId
  ) {
    total
    data {
      ...hackathonBaseInfo
      info {
        intro
        image
        host
      }
      rewards {
        name
        id
      }
    }
  }
}
    ${HackathonBaseInfoFragmentDoc}`;

export const useListHackathonsQuery = <
      TData = ListHackathonsQuery,
      TError = unknown
    >(
      variables?: ListHackathonsQueryVariables,
      options?: Omit<UseQueryOptions<ListHackathonsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListHackathonsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListHackathonsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListHackathons'] : ['ListHackathons', variables],
    queryFn: fetcher<ListHackathonsQuery, ListHackathonsQueryVariables>(ListHackathonsDocument, variables),
    ...options
  }
    )};

useListHackathonsQuery.getKey = (variables?: ListHackathonsQueryVariables) => variables === undefined ? ['ListHackathons'] : ['ListHackathons', variables];


useListHackathonsQuery.fetcher = (variables?: ListHackathonsQueryVariables, options?: RequestInit['headers']) => fetcher<ListHackathonsQuery, ListHackathonsQueryVariables>(ListHackathonsDocument, variables, options);

export const CreateHackathonDocument = `
    mutation CreateHackathon($name: String!) {
  hackathon: createHackathon(name: $name) {
    id
    alias
    name
    createdAt
  }
}
    `;

export const useCreateHackathonMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateHackathonMutation, TError, CreateHackathonMutationVariables, TContext>) => {
    
    return useMutation<CreateHackathonMutation, TError, CreateHackathonMutationVariables, TContext>(
      {
    mutationKey: ['CreateHackathon'],
    mutationFn: (variables?: CreateHackathonMutationVariables) => fetcher<CreateHackathonMutation, CreateHackathonMutationVariables>(CreateHackathonDocument, variables)(),
    ...options
  }
    )};


useCreateHackathonMutation.fetcher = (variables: CreateHackathonMutationVariables, options?: RequestInit['headers']) => fetcher<CreateHackathonMutation, CreateHackathonMutationVariables>(CreateHackathonDocument, variables, options);

export const UpdateHackathonDocument = `
    mutation UpdateHackathon($updateHackathonId: String!, $data: HackathonUpdateInputExtend!) {
  hackathon: updateHackathon(id: $updateHackathonId, data: $data) {
    id
    alias
    updatedAt
  }
}
    `;

export const useUpdateHackathonMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateHackathonMutation, TError, UpdateHackathonMutationVariables, TContext>) => {
    
    return useMutation<UpdateHackathonMutation, TError, UpdateHackathonMutationVariables, TContext>(
      {
    mutationKey: ['UpdateHackathon'],
    mutationFn: (variables?: UpdateHackathonMutationVariables) => fetcher<UpdateHackathonMutation, UpdateHackathonMutationVariables>(UpdateHackathonDocument, variables)(),
    ...options
  }
    )};


useUpdateHackathonMutation.fetcher = (variables: UpdateHackathonMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateHackathonMutation, UpdateHackathonMutationVariables>(UpdateHackathonDocument, variables, options);

export const CreateHackathonRewordDocument = `
    mutation CreateHackathonReword($hackathonId: String!, $data: HackathonRewardCreateInputExtend!) {
  reward: createHackathonReword(hackathonId: $hackathonId, data: $data) {
    id
    name
  }
}
    `;

export const useCreateHackathonRewordMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateHackathonRewordMutation, TError, CreateHackathonRewordMutationVariables, TContext>) => {
    
    return useMutation<CreateHackathonRewordMutation, TError, CreateHackathonRewordMutationVariables, TContext>(
      {
    mutationKey: ['CreateHackathonReword'],
    mutationFn: (variables?: CreateHackathonRewordMutationVariables) => fetcher<CreateHackathonRewordMutation, CreateHackathonRewordMutationVariables>(CreateHackathonRewordDocument, variables)(),
    ...options
  }
    )};


useCreateHackathonRewordMutation.fetcher = (variables: CreateHackathonRewordMutationVariables, options?: RequestInit['headers']) => fetcher<CreateHackathonRewordMutation, CreateHackathonRewordMutationVariables>(CreateHackathonRewordDocument, variables, options);

export const UpdateHackathonRewardDocument = `
    mutation UpdateHackathonReward($rewardId: String!, $data: HackathonRewardUpdateInputExtend!) {
  reward: updateHackathonReward(rewardId: $rewardId, data: $data) {
    id
    name
  }
}
    `;

export const useUpdateHackathonRewardMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateHackathonRewardMutation, TError, UpdateHackathonRewardMutationVariables, TContext>) => {
    
    return useMutation<UpdateHackathonRewardMutation, TError, UpdateHackathonRewardMutationVariables, TContext>(
      {
    mutationKey: ['UpdateHackathonReward'],
    mutationFn: (variables?: UpdateHackathonRewardMutationVariables) => fetcher<UpdateHackathonRewardMutation, UpdateHackathonRewardMutationVariables>(UpdateHackathonRewardDocument, variables)(),
    ...options
  }
    )};


useUpdateHackathonRewardMutation.fetcher = (variables: UpdateHackathonRewardMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateHackathonRewardMutation, UpdateHackathonRewardMutationVariables>(UpdateHackathonRewardDocument, variables, options);

export const DeleteHackathonRewardDocument = `
    mutation DeleteHackathonReward($rewardId: String!) {
  deleteHackathonReward(rewardId: $rewardId)
}
    `;

export const useDeleteHackathonRewardMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteHackathonRewardMutation, TError, DeleteHackathonRewardMutationVariables, TContext>) => {
    
    return useMutation<DeleteHackathonRewardMutation, TError, DeleteHackathonRewardMutationVariables, TContext>(
      {
    mutationKey: ['DeleteHackathonReward'],
    mutationFn: (variables?: DeleteHackathonRewardMutationVariables) => fetcher<DeleteHackathonRewardMutation, DeleteHackathonRewardMutationVariables>(DeleteHackathonRewardDocument, variables)(),
    ...options
  }
    )};


useDeleteHackathonRewardMutation.fetcher = (variables: DeleteHackathonRewardMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteHackathonRewardMutation, DeleteHackathonRewardMutationVariables>(DeleteHackathonRewardDocument, variables, options);

export const SendContactEmailDocument = `
    mutation SendContactEmail($email: String!) {
  sendContactEmail(email: $email)
}
    `;

export const useSendContactEmailMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SendContactEmailMutation, TError, SendContactEmailMutationVariables, TContext>) => {
    
    return useMutation<SendContactEmailMutation, TError, SendContactEmailMutationVariables, TContext>(
      {
    mutationKey: ['SendContactEmail'],
    mutationFn: (variables?: SendContactEmailMutationVariables) => fetcher<SendContactEmailMutation, SendContactEmailMutationVariables>(SendContactEmailDocument, variables)(),
    ...options
  }
    )};


useSendContactEmailMutation.fetcher = (variables: SendContactEmailMutationVariables, options?: RequestInit['headers']) => fetcher<SendContactEmailMutation, SendContactEmailMutationVariables>(SendContactEmailDocument, variables, options);

export const VerifyContactEmailDocument = `
    mutation VerifyContactEmail($hackathonId: String!, $code: String!) {
  verifyContactEmail(hackathonId: $hackathonId, code: $code)
}
    `;

export const useVerifyContactEmailMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<VerifyContactEmailMutation, TError, VerifyContactEmailMutationVariables, TContext>) => {
    
    return useMutation<VerifyContactEmailMutation, TError, VerifyContactEmailMutationVariables, TContext>(
      {
    mutationKey: ['VerifyContactEmail'],
    mutationFn: (variables?: VerifyContactEmailMutationVariables) => fetcher<VerifyContactEmailMutation, VerifyContactEmailMutationVariables>(VerifyContactEmailDocument, variables)(),
    ...options
  }
    )};


useVerifyContactEmailMutation.fetcher = (variables: VerifyContactEmailMutationVariables, options?: RequestInit['headers']) => fetcher<VerifyContactEmailMutation, VerifyContactEmailMutationVariables>(VerifyContactEmailDocument, variables, options);

export const UpdateJudgeDocument = `
    mutation UpdateJudge($judgeId: String!, $data: HackathonJudgeUpdateInputExtend!) {
  updateJudge(judgeId: $judgeId, data: $data) {
    id
  }
}
    `;

export const useUpdateJudgeMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateJudgeMutation, TError, UpdateJudgeMutationVariables, TContext>) => {
    
    return useMutation<UpdateJudgeMutation, TError, UpdateJudgeMutationVariables, TContext>(
      {
    mutationKey: ['UpdateJudge'],
    mutationFn: (variables?: UpdateJudgeMutationVariables) => fetcher<UpdateJudgeMutation, UpdateJudgeMutationVariables>(UpdateJudgeDocument, variables)(),
    ...options
  }
    )};


useUpdateJudgeMutation.fetcher = (variables: UpdateJudgeMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateJudgeMutation, UpdateJudgeMutationVariables>(UpdateJudgeDocument, variables, options);

export const CreateJudgeAccountDocument = `
    mutation CreateJudgeAccount($judgeId: String!) {
  createJudgeAccount(judgeId: $judgeId) {
    id
    email
    nickname
    avatar
    password
  }
}
    `;

export const useCreateJudgeAccountMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateJudgeAccountMutation, TError, CreateJudgeAccountMutationVariables, TContext>) => {
    
    return useMutation<CreateJudgeAccountMutation, TError, CreateJudgeAccountMutationVariables, TContext>(
      {
    mutationKey: ['CreateJudgeAccount'],
    mutationFn: (variables?: CreateJudgeAccountMutationVariables) => fetcher<CreateJudgeAccountMutation, CreateJudgeAccountMutationVariables>(CreateJudgeAccountDocument, variables)(),
    ...options
  }
    )};


useCreateJudgeAccountMutation.fetcher = (variables: CreateJudgeAccountMutationVariables, options?: RequestInit['headers']) => fetcher<CreateJudgeAccountMutation, CreateJudgeAccountMutationVariables>(CreateJudgeAccountDocument, variables, options);

export const UpdateJudgeAccountDocument = `
    mutation UpdateJudgeAccount($accountId: String!, $nickname: String!, $judgeId: String!) {
  updateJudgeAccount(
    accountId: $accountId
    nickname: $nickname
    judgeId: $judgeId
  ) {
    id
    email
    nickname
    avatar
    password
  }
}
    `;

export const useUpdateJudgeAccountMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateJudgeAccountMutation, TError, UpdateJudgeAccountMutationVariables, TContext>) => {
    
    return useMutation<UpdateJudgeAccountMutation, TError, UpdateJudgeAccountMutationVariables, TContext>(
      {
    mutationKey: ['UpdateJudgeAccount'],
    mutationFn: (variables?: UpdateJudgeAccountMutationVariables) => fetcher<UpdateJudgeAccountMutation, UpdateJudgeAccountMutationVariables>(UpdateJudgeAccountDocument, variables)(),
    ...options
  }
    )};


useUpdateJudgeAccountMutation.fetcher = (variables: UpdateJudgeAccountMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateJudgeAccountMutation, UpdateJudgeAccountMutationVariables>(UpdateJudgeAccountDocument, variables, options);

export const DeleteJudgeAccountDocument = `
    mutation DeleteJudgeAccount($judgeId: String!, $accountId: String!) {
  deleteJudgeAccount(judgeId: $judgeId, accountId: $accountId)
}
    `;

export const useDeleteJudgeAccountMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteJudgeAccountMutation, TError, DeleteJudgeAccountMutationVariables, TContext>) => {
    
    return useMutation<DeleteJudgeAccountMutation, TError, DeleteJudgeAccountMutationVariables, TContext>(
      {
    mutationKey: ['DeleteJudgeAccount'],
    mutationFn: (variables?: DeleteJudgeAccountMutationVariables) => fetcher<DeleteJudgeAccountMutation, DeleteJudgeAccountMutationVariables>(DeleteJudgeAccountDocument, variables)(),
    ...options
  }
    )};


useDeleteJudgeAccountMutation.fetcher = (variables: DeleteJudgeAccountMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteJudgeAccountMutation, DeleteJudgeAccountMutationVariables>(DeleteJudgeAccountDocument, variables, options);

export const QueryDocument = `
    query Query($userTags: [UserJudgeType!]!) {
  getUserJudgeCount(userTags: $userTags)
}
    `;

export const useQueryQuery = <
      TData = QueryQuery,
      TError = unknown
    >(
      variables: QueryQueryVariables,
      options?: Omit<UseQueryOptions<QueryQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<QueryQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<QueryQuery, TError, TData>(
      {
    queryKey: ['Query', variables],
    queryFn: fetcher<QueryQuery, QueryQueryVariables>(QueryDocument, variables),
    ...options
  }
    )};

useQueryQuery.getKey = (variables: QueryQueryVariables) => ['Query', variables];


useQueryQuery.fetcher = (variables: QueryQueryVariables, options?: RequestInit['headers']) => fetcher<QueryQuery, QueryQueryVariables>(QueryDocument, variables, options);

export const CreateHackathonScheduleDocument = `
    mutation CreateHackathonSchedule($hackathonId: String!, $data: HackathonScheduleCreateInputExtend!) {
  createHackathonSchedule(hackathonId: $hackathonId, data: $data) {
    id
    eventName
    openTime
    closeTime
    eventURL
    description
    type
  }
}
    `;

export const useCreateHackathonScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateHackathonScheduleMutation, TError, CreateHackathonScheduleMutationVariables, TContext>) => {
    
    return useMutation<CreateHackathonScheduleMutation, TError, CreateHackathonScheduleMutationVariables, TContext>(
      {
    mutationKey: ['CreateHackathonSchedule'],
    mutationFn: (variables?: CreateHackathonScheduleMutationVariables) => fetcher<CreateHackathonScheduleMutation, CreateHackathonScheduleMutationVariables>(CreateHackathonScheduleDocument, variables)(),
    ...options
  }
    )};


useCreateHackathonScheduleMutation.fetcher = (variables: CreateHackathonScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<CreateHackathonScheduleMutation, CreateHackathonScheduleMutationVariables>(CreateHackathonScheduleDocument, variables, options);

export const UpdateHackathonScheduleDocument = `
    mutation UpdateHackathonSchedule($scheduleId: String!, $data: HackathonScheduleUpdateInputExtend!) {
  updateHackathonSchedule(scheduleId: $scheduleId, data: $data) {
    id
    eventName
    openTime
    closeTime
    eventURL
    description
    type
  }
}
    `;

export const useUpdateHackathonScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateHackathonScheduleMutation, TError, UpdateHackathonScheduleMutationVariables, TContext>) => {
    
    return useMutation<UpdateHackathonScheduleMutation, TError, UpdateHackathonScheduleMutationVariables, TContext>(
      {
    mutationKey: ['UpdateHackathonSchedule'],
    mutationFn: (variables?: UpdateHackathonScheduleMutationVariables) => fetcher<UpdateHackathonScheduleMutation, UpdateHackathonScheduleMutationVariables>(UpdateHackathonScheduleDocument, variables)(),
    ...options
  }
    )};


useUpdateHackathonScheduleMutation.fetcher = (variables: UpdateHackathonScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateHackathonScheduleMutation, UpdateHackathonScheduleMutationVariables>(UpdateHackathonScheduleDocument, variables, options);

export const DeleteHackathonScheduleDocument = `
    mutation DeleteHackathonSchedule($scheduleId: String!) {
  deleteHackathonSchedule(scheduleId: $scheduleId) {
    id
  }
}
    `;

export const useDeleteHackathonScheduleMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteHackathonScheduleMutation, TError, DeleteHackathonScheduleMutationVariables, TContext>) => {
    
    return useMutation<DeleteHackathonScheduleMutation, TError, DeleteHackathonScheduleMutationVariables, TContext>(
      {
    mutationKey: ['DeleteHackathonSchedule'],
    mutationFn: (variables?: DeleteHackathonScheduleMutationVariables) => fetcher<DeleteHackathonScheduleMutation, DeleteHackathonScheduleMutationVariables>(DeleteHackathonScheduleDocument, variables)(),
    ...options
  }
    )};


useDeleteHackathonScheduleMutation.fetcher = (variables: DeleteHackathonScheduleMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteHackathonScheduleMutation, DeleteHackathonScheduleMutationVariables>(DeleteHackathonScheduleDocument, variables, options);

export const HackathonRegisterDocument = `
    mutation HackathonRegister($hackathonId: String!, $data: MemberCreateInput!) {
  hackathonRegister(hackathonId: $hackathonId, data: $data) {
    id
    info
    isRegister
    joinState
    status
  }
}
    `;

export const useHackathonRegisterMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<HackathonRegisterMutation, TError, HackathonRegisterMutationVariables, TContext>) => {
    
    return useMutation<HackathonRegisterMutation, TError, HackathonRegisterMutationVariables, TContext>(
      {
    mutationKey: ['HackathonRegister'],
    mutationFn: (variables?: HackathonRegisterMutationVariables) => fetcher<HackathonRegisterMutation, HackathonRegisterMutationVariables>(HackathonRegisterDocument, variables)(),
    ...options
  }
    )};


useHackathonRegisterMutation.fetcher = (variables: HackathonRegisterMutationVariables, options?: RequestInit['headers']) => fetcher<HackathonRegisterMutation, HackathonRegisterMutationVariables>(HackathonRegisterDocument, variables, options);

export const GetHackathonRegisterInfoDocument = `
    query GetHackathonRegisterInfo($hackathonId: String!) {
  info: getHackathonRegisterInfo(hackathonId: $hackathonId) {
    id
    info
    isRegister
    status
    utmSource
  }
}
    `;

export const useGetHackathonRegisterInfoQuery = <
      TData = GetHackathonRegisterInfoQuery,
      TError = unknown
    >(
      variables: GetHackathonRegisterInfoQueryVariables,
      options?: Omit<UseQueryOptions<GetHackathonRegisterInfoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<GetHackathonRegisterInfoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<GetHackathonRegisterInfoQuery, TError, TData>(
      {
    queryKey: ['GetHackathonRegisterInfo', variables],
    queryFn: fetcher<GetHackathonRegisterInfoQuery, GetHackathonRegisterInfoQueryVariables>(GetHackathonRegisterInfoDocument, variables),
    ...options
  }
    )};

useGetHackathonRegisterInfoQuery.getKey = (variables: GetHackathonRegisterInfoQueryVariables) => ['GetHackathonRegisterInfo', variables];


useGetHackathonRegisterInfoQuery.fetcher = (variables: GetHackathonRegisterInfoQueryVariables, options?: RequestInit['headers']) => fetcher<GetHackathonRegisterInfoQuery, GetHackathonRegisterInfoQueryVariables>(GetHackathonRegisterInfoDocument, variables, options);

export const CreateHackathonTodoDocument = `
    mutation CreateHackathonTodo($hackathonId: String!, $data: HackathonTodoCreateInputExtend!) {
  createHackathonTodo(hackathonId: $hackathonId, data: $data) {
    id
    name
    intro
    type
    order
    metadata
    url
  }
}
    `;

export const useCreateHackathonTodoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateHackathonTodoMutation, TError, CreateHackathonTodoMutationVariables, TContext>) => {
    
    return useMutation<CreateHackathonTodoMutation, TError, CreateHackathonTodoMutationVariables, TContext>(
      {
    mutationKey: ['CreateHackathonTodo'],
    mutationFn: (variables?: CreateHackathonTodoMutationVariables) => fetcher<CreateHackathonTodoMutation, CreateHackathonTodoMutationVariables>(CreateHackathonTodoDocument, variables)(),
    ...options
  }
    )};


useCreateHackathonTodoMutation.fetcher = (variables: CreateHackathonTodoMutationVariables, options?: RequestInit['headers']) => fetcher<CreateHackathonTodoMutation, CreateHackathonTodoMutationVariables>(CreateHackathonTodoDocument, variables, options);

export const UpdateHackathonTodoDocument = `
    mutation UpdateHackathonTodo($todoId: String!, $data: HackathonTodoCreateInputExtend!) {
  updateHackathonTodo(todoId: $todoId, data: $data) {
    id
    name
    intro
    url
    type
    metadata
    order
  }
}
    `;

export const useUpdateHackathonTodoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateHackathonTodoMutation, TError, UpdateHackathonTodoMutationVariables, TContext>) => {
    
    return useMutation<UpdateHackathonTodoMutation, TError, UpdateHackathonTodoMutationVariables, TContext>(
      {
    mutationKey: ['UpdateHackathonTodo'],
    mutationFn: (variables?: UpdateHackathonTodoMutationVariables) => fetcher<UpdateHackathonTodoMutation, UpdateHackathonTodoMutationVariables>(UpdateHackathonTodoDocument, variables)(),
    ...options
  }
    )};


useUpdateHackathonTodoMutation.fetcher = (variables: UpdateHackathonTodoMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateHackathonTodoMutation, UpdateHackathonTodoMutationVariables>(UpdateHackathonTodoDocument, variables, options);

export const DeleteHackathonTodoDocument = `
    mutation DeleteHackathonTodo($todoId: String!) {
  deleteHackathonTodo(todoId: $todoId) {
    id
  }
}
    `;

export const useDeleteHackathonTodoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteHackathonTodoMutation, TError, DeleteHackathonTodoMutationVariables, TContext>) => {
    
    return useMutation<DeleteHackathonTodoMutation, TError, DeleteHackathonTodoMutationVariables, TContext>(
      {
    mutationKey: ['DeleteHackathonTodo'],
    mutationFn: (variables?: DeleteHackathonTodoMutationVariables) => fetcher<DeleteHackathonTodoMutation, DeleteHackathonTodoMutationVariables>(DeleteHackathonTodoDocument, variables)(),
    ...options
  }
    )};


useDeleteHackathonTodoMutation.fetcher = (variables: DeleteHackathonTodoMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteHackathonTodoMutation, DeleteHackathonTodoMutationVariables>(DeleteHackathonTodoDocument, variables, options);

export const FindHackathonPrizeTracksDocument = `
    query FindHackathonPrizeTracks($hackathonId: String!) {
  prizeTracks: findHackathonReward(hackathonId: $hackathonId) {
    name
  }
}
    `;

export const useFindHackathonPrizeTracksQuery = <
      TData = FindHackathonPrizeTracksQuery,
      TError = unknown
    >(
      variables: FindHackathonPrizeTracksQueryVariables,
      options?: Omit<UseQueryOptions<FindHackathonPrizeTracksQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindHackathonPrizeTracksQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindHackathonPrizeTracksQuery, TError, TData>(
      {
    queryKey: ['FindHackathonPrizeTracks', variables],
    queryFn: fetcher<FindHackathonPrizeTracksQuery, FindHackathonPrizeTracksQueryVariables>(FindHackathonPrizeTracksDocument, variables),
    ...options
  }
    )};

useFindHackathonPrizeTracksQuery.getKey = (variables: FindHackathonPrizeTracksQueryVariables) => ['FindHackathonPrizeTracks', variables];


useFindHackathonPrizeTracksQuery.fetcher = (variables: FindHackathonPrizeTracksQueryVariables, options?: RequestInit['headers']) => fetcher<FindHackathonPrizeTracksQuery, FindHackathonPrizeTracksQueryVariables>(FindHackathonPrizeTracksDocument, variables, options);

export const CompleteHackathonTodoDocument = `
    mutation CompleteHackathonTodo($todoId: String!) {
  completeHackathonTodo(todoId: $todoId)
}
    `;

export const useCompleteHackathonTodoMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CompleteHackathonTodoMutation, TError, CompleteHackathonTodoMutationVariables, TContext>) => {
    
    return useMutation<CompleteHackathonTodoMutation, TError, CompleteHackathonTodoMutationVariables, TContext>(
      {
    mutationKey: ['CompleteHackathonTodo'],
    mutationFn: (variables?: CompleteHackathonTodoMutationVariables) => fetcher<CompleteHackathonTodoMutation, CompleteHackathonTodoMutationVariables>(CompleteHackathonTodoDocument, variables)(),
    ...options
  }
    )};


useCompleteHackathonTodoMutation.fetcher = (variables: CompleteHackathonTodoMutationVariables, options?: RequestInit['headers']) => fetcher<CompleteHackathonTodoMutation, CompleteHackathonTodoMutationVariables>(CompleteHackathonTodoDocument, variables, options);

export const FindHackathonJudgeDetailByUserDocument = `
    query FindHackathonJudgeDetailByUser {
  findHackathonJudgeDetailByUser {
    alias
    id
    judge {
      totalVote
      judgeMode
      voteMode
      judgeTotalVote
      judgeProjectVote
      userTotalVotes
      rewardName
      userTags
      projectJudgeCount
      judgeAccounts {
        id
        email
        nickname
        avatar
        password
      }
      criteria
      announce
      disableJudge
      userUnitVotes
    }
    track
    timeline {
      timeZone
      openReviewSame
      registrationOpen
      registrationClose
      submissionOpen
      submissionClose
      rewardTime
    }
    info {
      image
      intro
    }
    name
    projects {
      alias
      id
      detail {
        oneLineIntro
      }
      vote
      logo
      name
      prizeTrack
      voteJudgeCount
    }
    remainingVotes {
      remainingVotes
      canVote
    }
    currentStatus
  }
}
    `;

export const useFindHackathonJudgeDetailByUserQuery = <
      TData = FindHackathonJudgeDetailByUserQuery,
      TError = unknown
    >(
      variables?: FindHackathonJudgeDetailByUserQueryVariables,
      options?: Omit<UseQueryOptions<FindHackathonJudgeDetailByUserQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindHackathonJudgeDetailByUserQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindHackathonJudgeDetailByUserQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['FindHackathonJudgeDetailByUser'] : ['FindHackathonJudgeDetailByUser', variables],
    queryFn: fetcher<FindHackathonJudgeDetailByUserQuery, FindHackathonJudgeDetailByUserQueryVariables>(FindHackathonJudgeDetailByUserDocument, variables),
    ...options
  }
    )};

useFindHackathonJudgeDetailByUserQuery.getKey = (variables?: FindHackathonJudgeDetailByUserQueryVariables) => variables === undefined ? ['FindHackathonJudgeDetailByUser'] : ['FindHackathonJudgeDetailByUser', variables];


useFindHackathonJudgeDetailByUserQuery.fetcher = (variables?: FindHackathonJudgeDetailByUserQueryVariables, options?: RequestInit['headers']) => fetcher<FindHackathonJudgeDetailByUserQuery, FindHackathonJudgeDetailByUserQueryVariables>(FindHackathonJudgeDetailByUserDocument, variables, options);

export const JudgeBatchByVoteDocument = `
    mutation JudgeBatchByVote($hackathonId: String!, $data: [HackathonVoteInput!]!) {
  judgeBatchByVote(hackathonId: $hackathonId, data: $data)
}
    `;

export const useJudgeBatchByVoteMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<JudgeBatchByVoteMutation, TError, JudgeBatchByVoteMutationVariables, TContext>) => {
    
    return useMutation<JudgeBatchByVoteMutation, TError, JudgeBatchByVoteMutationVariables, TContext>(
      {
    mutationKey: ['JudgeBatchByVote'],
    mutationFn: (variables?: JudgeBatchByVoteMutationVariables) => fetcher<JudgeBatchByVoteMutation, JudgeBatchByVoteMutationVariables>(JudgeBatchByVoteDocument, variables)(),
    ...options
  }
    )};


useJudgeBatchByVoteMutation.fetcher = (variables: JudgeBatchByVoteMutationVariables, options?: RequestInit['headers']) => fetcher<JudgeBatchByVoteMutation, JudgeBatchByVoteMutationVariables>(JudgeBatchByVoteDocument, variables, options);

export const JudgeBatchByScoreDocument = `
    mutation JudgeBatchByScore($hackathonId: String!, $data: [HackathonVoteInput!]!) {
  judgeBatchByScore(hackathonId: $hackathonId, data: $data)
}
    `;

export const useJudgeBatchByScoreMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<JudgeBatchByScoreMutation, TError, JudgeBatchByScoreMutationVariables, TContext>) => {
    
    return useMutation<JudgeBatchByScoreMutation, TError, JudgeBatchByScoreMutationVariables, TContext>(
      {
    mutationKey: ['JudgeBatchByScore'],
    mutationFn: (variables?: JudgeBatchByScoreMutationVariables) => fetcher<JudgeBatchByScoreMutation, JudgeBatchByScoreMutationVariables>(JudgeBatchByScoreDocument, variables)(),
    ...options
  }
    )};


useJudgeBatchByScoreMutation.fetcher = (variables: JudgeBatchByScoreMutationVariables, options?: RequestInit['headers']) => fetcher<JudgeBatchByScoreMutation, JudgeBatchByScoreMutationVariables>(JudgeBatchByScoreDocument, variables, options);

export const ProjectVoteDocument = `
    mutation ProjectVote($rewardId: Float!, $data: HackathonVoteInput!) {
  projectVote(rewardId: $rewardId, data: $data)
}
    `;

export const useProjectVoteMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ProjectVoteMutation, TError, ProjectVoteMutationVariables, TContext>) => {
    
    return useMutation<ProjectVoteMutation, TError, ProjectVoteMutationVariables, TContext>(
      {
    mutationKey: ['ProjectVote'],
    mutationFn: (variables?: ProjectVoteMutationVariables) => fetcher<ProjectVoteMutation, ProjectVoteMutationVariables>(ProjectVoteDocument, variables)(),
    ...options
  }
    )};


useProjectVoteMutation.fetcher = (variables: ProjectVoteMutationVariables, options?: RequestInit['headers']) => fetcher<ProjectVoteMutation, ProjectVoteMutationVariables>(ProjectVoteDocument, variables, options);

export const FindHackathonRewardDocument = `
    query FindHackathonReward($hackathonId: String!) {
  findHackathonReward(hackathonId: $hackathonId) {
    id
    totalRewards
    rule
    name
    order
    currency
    projects {
      id
      hackathonName
      creatorId
      teamId
      type
      lock
      name
      alias
      logo
      tracks
      createdAt
      updatedAt
      detail {
        oneLineIntro
        detailedIntro
      }
      teamLead {
        teamId
        userId
        username
        nickname
        avatar
      }
      likes
      isLiked
      rewards {
        votes
        hackathonStatus
        rank {
          rank
          total
        }
        disableJudge
        id
      }
      winner {
        name
        rewardId
      }
    }
  }
}
    `;

export const useFindHackathonRewardQuery = <
      TData = FindHackathonRewardQuery,
      TError = unknown
    >(
      variables: FindHackathonRewardQueryVariables,
      options?: Omit<UseQueryOptions<FindHackathonRewardQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindHackathonRewardQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindHackathonRewardQuery, TError, TData>(
      {
    queryKey: ['FindHackathonReward', variables],
    queryFn: fetcher<FindHackathonRewardQuery, FindHackathonRewardQueryVariables>(FindHackathonRewardDocument, variables),
    ...options
  }
    )};

useFindHackathonRewardQuery.getKey = (variables: FindHackathonRewardQueryVariables) => ['FindHackathonReward', variables];


useFindHackathonRewardQuery.fetcher = (variables: FindHackathonRewardQueryVariables, options?: RequestInit['headers']) => fetcher<FindHackathonRewardQuery, FindHackathonRewardQueryVariables>(FindHackathonRewardDocument, variables, options);

export const QuitProjectFromHackathonDocument = `
    mutation QuitProjectFromHackathon($projectId: String!) {
  quitProjectFromHackathon(projectId: $projectId)
}
    `;

export const useQuitProjectFromHackathonMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<QuitProjectFromHackathonMutation, TError, QuitProjectFromHackathonMutationVariables, TContext>) => {
    
    return useMutation<QuitProjectFromHackathonMutation, TError, QuitProjectFromHackathonMutationVariables, TContext>(
      {
    mutationKey: ['QuitProjectFromHackathon'],
    mutationFn: (variables?: QuitProjectFromHackathonMutationVariables) => fetcher<QuitProjectFromHackathonMutation, QuitProjectFromHackathonMutationVariables>(QuitProjectFromHackathonDocument, variables)(),
    ...options
  }
    )};


useQuitProjectFromHackathonMutation.fetcher = (variables: QuitProjectFromHackathonMutationVariables, options?: RequestInit['headers']) => fetcher<QuitProjectFromHackathonMutation, QuitProjectFromHackathonMutationVariables>(QuitProjectFromHackathonDocument, variables, options);

export const QuitHackathonDocument = `
    mutation QuitHackathon($hackathonId: String!) {
  quitHackathon(hackathonId: $hackathonId)
}
    `;

export const useQuitHackathonMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<QuitHackathonMutation, TError, QuitHackathonMutationVariables, TContext>) => {
    
    return useMutation<QuitHackathonMutation, TError, QuitHackathonMutationVariables, TContext>(
      {
    mutationKey: ['QuitHackathon'],
    mutationFn: (variables?: QuitHackathonMutationVariables) => fetcher<QuitHackathonMutation, QuitHackathonMutationVariables>(QuitHackathonDocument, variables)(),
    ...options
  }
    )};


useQuitHackathonMutation.fetcher = (variables: QuitHackathonMutationVariables, options?: RequestInit['headers']) => fetcher<QuitHackathonMutation, QuitHackathonMutationVariables>(QuitHackathonDocument, variables, options);

export const HackathonConfirmDocument = `
    mutation HackathonConfirm($hackathonId: String!) {
  hackathonConfirm(hackathonId: $hackathonId)
}
    `;

export const useHackathonConfirmMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<HackathonConfirmMutation, TError, HackathonConfirmMutationVariables, TContext>) => {
    
    return useMutation<HackathonConfirmMutation, TError, HackathonConfirmMutationVariables, TContext>(
      {
    mutationKey: ['HackathonConfirm'],
    mutationFn: (variables?: HackathonConfirmMutationVariables) => fetcher<HackathonConfirmMutation, HackathonConfirmMutationVariables>(HackathonConfirmDocument, variables)(),
    ...options
  }
    )};


useHackathonConfirmMutation.fetcher = (variables: HackathonConfirmMutationVariables, options?: RequestInit['headers']) => fetcher<HackathonConfirmMutation, HackathonConfirmMutationVariables>(HackathonConfirmDocument, variables, options);

export const SubmitHackathonToReviewDocument = `
    mutation SubmitHackathonToReview($updateHackathonId: String!, $data: HackathonUpdateInputExtend!) {
  updateHackathon(id: $updateHackathonId, data: $data) {
    status
    id
  }
}
    `;

export const useSubmitHackathonToReviewMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<SubmitHackathonToReviewMutation, TError, SubmitHackathonToReviewMutationVariables, TContext>) => {
    
    return useMutation<SubmitHackathonToReviewMutation, TError, SubmitHackathonToReviewMutationVariables, TContext>(
      {
    mutationKey: ['SubmitHackathonToReview'],
    mutationFn: (variables?: SubmitHackathonToReviewMutationVariables) => fetcher<SubmitHackathonToReviewMutation, SubmitHackathonToReviewMutationVariables>(SubmitHackathonToReviewDocument, variables)(),
    ...options
  }
    )};


useSubmitHackathonToReviewMutation.fetcher = (variables: SubmitHackathonToReviewMutationVariables, options?: RequestInit['headers']) => fetcher<SubmitHackathonToReviewMutation, SubmitHackathonToReviewMutationVariables>(SubmitHackathonToReviewDocument, variables, options);

export const ListJobStationsDocument = `
    query listJobStations($where: JobStationWhereInput, $page: Int, $limit: Int) {
  listJobStations(where: $where, page: $page, limit: $limit) {
    data {
      id
      companyName
      companyLogo
      currency
      name
      minSalary
      maxSalary
      tags
      workMode
      workType
      location
      createdAt
    }
    total
  }
}
    `;

export const useListJobStationsQuery = <
      TData = ListJobStationsQuery,
      TError = unknown
    >(
      variables?: ListJobStationsQueryVariables,
      options?: Omit<UseQueryOptions<ListJobStationsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListJobStationsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListJobStationsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['listJobStations'] : ['listJobStations', variables],
    queryFn: fetcher<ListJobStationsQuery, ListJobStationsQueryVariables>(ListJobStationsDocument, variables),
    ...options
  }
    )};

useListJobStationsQuery.getKey = (variables?: ListJobStationsQueryVariables) => variables === undefined ? ['listJobStations'] : ['listJobStations', variables];


useListJobStationsQuery.fetcher = (variables?: ListJobStationsQueryVariables, options?: RequestInit['headers']) => fetcher<ListJobStationsQuery, ListJobStationsQueryVariables>(ListJobStationsDocument, variables, options);

export const FindUniqueJobStationDocument = `
    query FindUniqueJobStation($where: JobStationWhereUniqueInput!) {
  findUniqueJobStation(where: $where) {
    description
    name
    companyName
    companyLogo
    createdAt
    maxSalary
    minSalary
    workMode
    workType
    currency
    tags
    updatedAt
    contact
    id
    favorites {
      jobId
      userId
    }
  }
}
    `;

export const useFindUniqueJobStationQuery = <
      TData = FindUniqueJobStationQuery,
      TError = unknown
    >(
      variables: FindUniqueJobStationQueryVariables,
      options?: Omit<UseQueryOptions<FindUniqueJobStationQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUniqueJobStationQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUniqueJobStationQuery, TError, TData>(
      {
    queryKey: ['FindUniqueJobStation', variables],
    queryFn: fetcher<FindUniqueJobStationQuery, FindUniqueJobStationQueryVariables>(FindUniqueJobStationDocument, variables),
    ...options
  }
    )};

useFindUniqueJobStationQuery.getKey = (variables: FindUniqueJobStationQueryVariables) => ['FindUniqueJobStation', variables];


useFindUniqueJobStationQuery.fetcher = (variables: FindUniqueJobStationQueryVariables, options?: RequestInit['headers']) => fetcher<FindUniqueJobStationQuery, FindUniqueJobStationQueryVariables>(FindUniqueJobStationDocument, variables, options);

export const DeleteJobFavoriteDocument = `
    mutation DeleteJobFavorite($where: JobFavoriteWhereUniqueInput!) {
  deleteJobFavorite(where: $where) {
    jobId
  }
}
    `;

export const useDeleteJobFavoriteMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteJobFavoriteMutation, TError, DeleteJobFavoriteMutationVariables, TContext>) => {
    
    return useMutation<DeleteJobFavoriteMutation, TError, DeleteJobFavoriteMutationVariables, TContext>(
      {
    mutationKey: ['DeleteJobFavorite'],
    mutationFn: (variables?: DeleteJobFavoriteMutationVariables) => fetcher<DeleteJobFavoriteMutation, DeleteJobFavoriteMutationVariables>(DeleteJobFavoriteDocument, variables)(),
    ...options
  }
    )};


useDeleteJobFavoriteMutation.fetcher = (variables: DeleteJobFavoriteMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteJobFavoriteMutation, DeleteJobFavoriteMutationVariables>(DeleteJobFavoriteDocument, variables, options);

export const CreateJobFavoriteDocument = `
    mutation CreateJobFavorite($data: JobFavoriteCreateInput!) {
  createJobFavorite(data: $data) {
    jobId
  }
}
    `;

export const useCreateJobFavoriteMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateJobFavoriteMutation, TError, CreateJobFavoriteMutationVariables, TContext>) => {
    
    return useMutation<CreateJobFavoriteMutation, TError, CreateJobFavoriteMutationVariables, TContext>(
      {
    mutationKey: ['CreateJobFavorite'],
    mutationFn: (variables?: CreateJobFavoriteMutationVariables) => fetcher<CreateJobFavoriteMutation, CreateJobFavoriteMutationVariables>(CreateJobFavoriteDocument, variables)(),
    ...options
  }
    )};


useCreateJobFavoriteMutation.fetcher = (variables: CreateJobFavoriteMutationVariables, options?: RequestInit['headers']) => fetcher<CreateJobFavoriteMutation, CreateJobFavoriteMutationVariables>(CreateJobFavoriteDocument, variables, options);

export const ListJobTagsDocument = `
    query listJobTags($where: JobTagWhereInput, $limit: Int, $orderBy: [JobTagOrderByWithRelationInput!], $page: Int) {
  listJobTags(where: $where, limit: $limit, orderBy: $orderBy, page: $page) {
    data {
      name
      id
    }
  }
}
    `;

export const useListJobTagsQuery = <
      TData = ListJobTagsQuery,
      TError = unknown
    >(
      variables?: ListJobTagsQueryVariables,
      options?: Omit<UseQueryOptions<ListJobTagsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListJobTagsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListJobTagsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['listJobTags'] : ['listJobTags', variables],
    queryFn: fetcher<ListJobTagsQuery, ListJobTagsQueryVariables>(ListJobTagsDocument, variables),
    ...options
  }
    )};

useListJobTagsQuery.getKey = (variables?: ListJobTagsQueryVariables) => variables === undefined ? ['listJobTags'] : ['listJobTags', variables];


useListJobTagsQuery.fetcher = (variables?: ListJobTagsQueryVariables, options?: RequestInit['headers']) => fetcher<ListJobTagsQuery, ListJobTagsQueryVariables>(ListJobTagsDocument, variables, options);

export const ListJobStationsFavoriteDocument = `
    query listJobStationsFavorite($where: JobStationWhereInput, $page: Int, $limit: Int, $orderBy: [JobStationOrderByWithRelationInput!]) {
  listJobStationsFavorite(
    where: $where
    page: $page
    limit: $limit
    orderBy: $orderBy
  ) {
    data {
      id
      companyName
      companyLogo
      currency
      name
      minSalary
      maxSalary
      tags
      workMode
      workType
      createdAt
    }
  }
}
    `;

export const useListJobStationsFavoriteQuery = <
      TData = ListJobStationsFavoriteQuery,
      TError = unknown
    >(
      variables?: ListJobStationsFavoriteQueryVariables,
      options?: Omit<UseQueryOptions<ListJobStationsFavoriteQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListJobStationsFavoriteQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListJobStationsFavoriteQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['listJobStationsFavorite'] : ['listJobStationsFavorite', variables],
    queryFn: fetcher<ListJobStationsFavoriteQuery, ListJobStationsFavoriteQueryVariables>(ListJobStationsFavoriteDocument, variables),
    ...options
  }
    )};

useListJobStationsFavoriteQuery.getKey = (variables?: ListJobStationsFavoriteQueryVariables) => variables === undefined ? ['listJobStationsFavorite'] : ['listJobStationsFavorite', variables];


useListJobStationsFavoriteQuery.fetcher = (variables?: ListJobStationsFavoriteQueryVariables, options?: RequestInit['headers']) => fetcher<ListJobStationsFavoriteQuery, ListJobStationsFavoriteQueryVariables>(ListJobStationsFavoriteDocument, variables, options);

export const CreateJobStationDocument = `
    mutation CreateJobStation($data: JobStationCreateInput!) {
  createJobStation(data: $data) {
    status
    id
  }
}
    `;

export const useCreateJobStationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateJobStationMutation, TError, CreateJobStationMutationVariables, TContext>) => {
    
    return useMutation<CreateJobStationMutation, TError, CreateJobStationMutationVariables, TContext>(
      {
    mutationKey: ['CreateJobStation'],
    mutationFn: (variables?: CreateJobStationMutationVariables) => fetcher<CreateJobStationMutation, CreateJobStationMutationVariables>(CreateJobStationDocument, variables)(),
    ...options
  }
    )};


useCreateJobStationMutation.fetcher = (variables: CreateJobStationMutationVariables, options?: RequestInit['headers']) => fetcher<CreateJobStationMutation, CreateJobStationMutationVariables>(CreateJobStationDocument, variables, options);

export const FindUserProfileDocument = `
    query FindUserProfile($username: String!) {
  profile: findUserProfileByUsername(username: $username) {
    id
    location
    bio
    techStack
    backgroundImage
    personalLinks
    githubActivity
    onChainActivity
    progress
    web3Score {
      latitude
      score
    }
    user {
      username
      nickname
      avatar
      userResume {
        id
        name
        file
      }
    }
    userCertifications {
      id
      certificateId
      certificationId
      claimed
      mint
      txId
      username
      certificateTime
      certification {
        chainId
        name
        contract
        extra
      }
    }
    workExperiences {
      id
      title
      companyName
      employmentType
      location
      description
      startDate
      endDate
    }
  }
}
    `;

export const useFindUserProfileQuery = <
      TData = FindUserProfileQuery,
      TError = unknown
    >(
      variables: FindUserProfileQueryVariables,
      options?: Omit<UseQueryOptions<FindUserProfileQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUserProfileQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUserProfileQuery, TError, TData>(
      {
    queryKey: ['FindUserProfile', variables],
    queryFn: fetcher<FindUserProfileQuery, FindUserProfileQueryVariables>(FindUserProfileDocument, variables),
    ...options
  }
    )};

useFindUserProfileQuery.getKey = (variables: FindUserProfileQueryVariables) => ['FindUserProfile', variables];


useFindUserProfileQuery.fetcher = (variables: FindUserProfileQueryVariables, options?: RequestInit['headers']) => fetcher<FindUserProfileQuery, FindUserProfileQueryVariables>(FindUserProfileDocument, variables, options);

export const UpdateUserProfileDocument = `
    mutation UpdateUserProfile($data: UserProfileUpdateInput!) {
  updateUserProfile(data: $data) {
    id
  }
}
    `;

export const useUpdateUserProfileMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateUserProfileMutation, TError, UpdateUserProfileMutationVariables, TContext>) => {
    
    return useMutation<UpdateUserProfileMutation, TError, UpdateUserProfileMutationVariables, TContext>(
      {
    mutationKey: ['UpdateUserProfile'],
    mutationFn: (variables?: UpdateUserProfileMutationVariables) => fetcher<UpdateUserProfileMutation, UpdateUserProfileMutationVariables>(UpdateUserProfileDocument, variables)(),
    ...options
  }
    )};


useUpdateUserProfileMutation.fetcher = (variables: UpdateUserProfileMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateUserProfileMutation, UpdateUserProfileMutationVariables>(UpdateUserProfileDocument, variables, options);

export const CreateUserWorkExperienceDocument = `
    mutation CreateUserWorkExperience($data: WorkExperienceCreateWithoutUserProfileInput!) {
  createUserWorkExperience(data: $data) {
    id
  }
}
    `;

export const useCreateUserWorkExperienceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateUserWorkExperienceMutation, TError, CreateUserWorkExperienceMutationVariables, TContext>) => {
    
    return useMutation<CreateUserWorkExperienceMutation, TError, CreateUserWorkExperienceMutationVariables, TContext>(
      {
    mutationKey: ['CreateUserWorkExperience'],
    mutationFn: (variables?: CreateUserWorkExperienceMutationVariables) => fetcher<CreateUserWorkExperienceMutation, CreateUserWorkExperienceMutationVariables>(CreateUserWorkExperienceDocument, variables)(),
    ...options
  }
    )};


useCreateUserWorkExperienceMutation.fetcher = (variables: CreateUserWorkExperienceMutationVariables, options?: RequestInit['headers']) => fetcher<CreateUserWorkExperienceMutation, CreateUserWorkExperienceMutationVariables>(CreateUserWorkExperienceDocument, variables, options);

export const UpdateUserWorkExperienceDocument = `
    mutation UpdateUserWorkExperience($experienceId: String!, $data: WorkExperienceUpdateInput!) {
  updateUserWorkExperience(experienceId: $experienceId, data: $data) {
    id
  }
}
    `;

export const useUpdateUserWorkExperienceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateUserWorkExperienceMutation, TError, UpdateUserWorkExperienceMutationVariables, TContext>) => {
    
    return useMutation<UpdateUserWorkExperienceMutation, TError, UpdateUserWorkExperienceMutationVariables, TContext>(
      {
    mutationKey: ['UpdateUserWorkExperience'],
    mutationFn: (variables?: UpdateUserWorkExperienceMutationVariables) => fetcher<UpdateUserWorkExperienceMutation, UpdateUserWorkExperienceMutationVariables>(UpdateUserWorkExperienceDocument, variables)(),
    ...options
  }
    )};


useUpdateUserWorkExperienceMutation.fetcher = (variables: UpdateUserWorkExperienceMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateUserWorkExperienceMutation, UpdateUserWorkExperienceMutationVariables>(UpdateUserWorkExperienceDocument, variables, options);

export const DeleteUserWorkExperienceDocument = `
    mutation DeleteUserWorkExperience($experienceId: String!) {
  deleteUserWorkExperience(experienceId: $experienceId)
}
    `;

export const useDeleteUserWorkExperienceMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteUserWorkExperienceMutation, TError, DeleteUserWorkExperienceMutationVariables, TContext>) => {
    
    return useMutation<DeleteUserWorkExperienceMutation, TError, DeleteUserWorkExperienceMutationVariables, TContext>(
      {
    mutationKey: ['DeleteUserWorkExperience'],
    mutationFn: (variables?: DeleteUserWorkExperienceMutationVariables) => fetcher<DeleteUserWorkExperienceMutation, DeleteUserWorkExperienceMutationVariables>(DeleteUserWorkExperienceDocument, variables)(),
    ...options
  }
    )};


useDeleteUserWorkExperienceMutation.fetcher = (variables: DeleteUserWorkExperienceMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteUserWorkExperienceMutation, DeleteUserWorkExperienceMutationVariables>(DeleteUserWorkExperienceDocument, variables, options);

export const CreateUserResumeDocument = `
    mutation CreateUserResume($data: UserResumeCreateWithoutUserInput!) {
  createUserResume(data: $data) {
    id
  }
}
    `;

export const useCreateUserResumeMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateUserResumeMutation, TError, CreateUserResumeMutationVariables, TContext>) => {
    
    return useMutation<CreateUserResumeMutation, TError, CreateUserResumeMutationVariables, TContext>(
      {
    mutationKey: ['CreateUserResume'],
    mutationFn: (variables?: CreateUserResumeMutationVariables) => fetcher<CreateUserResumeMutation, CreateUserResumeMutationVariables>(CreateUserResumeDocument, variables)(),
    ...options
  }
    )};


useCreateUserResumeMutation.fetcher = (variables: CreateUserResumeMutationVariables, options?: RequestInit['headers']) => fetcher<CreateUserResumeMutation, CreateUserResumeMutationVariables>(CreateUserResumeDocument, variables, options);

export const DeleteUserResumeDocument = `
    mutation DeleteUserResume($resumeId: Float!) {
  deleteUserResume(resumeId: $resumeId)
}
    `;

export const useDeleteUserResumeMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DeleteUserResumeMutation, TError, DeleteUserResumeMutationVariables, TContext>) => {
    
    return useMutation<DeleteUserResumeMutation, TError, DeleteUserResumeMutationVariables, TContext>(
      {
    mutationKey: ['DeleteUserResume'],
    mutationFn: (variables?: DeleteUserResumeMutationVariables) => fetcher<DeleteUserResumeMutation, DeleteUserResumeMutationVariables>(DeleteUserResumeDocument, variables)(),
    ...options
  }
    )};


useDeleteUserResumeMutation.fetcher = (variables: DeleteUserResumeMutationVariables, options?: RequestInit['headers']) => fetcher<DeleteUserResumeMutation, DeleteUserResumeMutationVariables>(DeleteUserResumeDocument, variables, options);

export const ListUserAttestationsDocument = `
    query ListUserAttestations($username: String!) {
  attestations: listUserAttestations(username: $username) {
    id
    attest
    creatorId
    sourceId
    type
    comment
    chain
    creator {
      id
      username
      nickname
      avatar
    }
  }
}
    `;

export const useListUserAttestationsQuery = <
      TData = ListUserAttestationsQuery,
      TError = unknown
    >(
      variables: ListUserAttestationsQueryVariables,
      options?: Omit<UseQueryOptions<ListUserAttestationsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListUserAttestationsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListUserAttestationsQuery, TError, TData>(
      {
    queryKey: ['ListUserAttestations', variables],
    queryFn: fetcher<ListUserAttestationsQuery, ListUserAttestationsQueryVariables>(ListUserAttestationsDocument, variables),
    ...options
  }
    )};

useListUserAttestationsQuery.getKey = (variables: ListUserAttestationsQueryVariables) => ['ListUserAttestations', variables];


useListUserAttestationsQuery.fetcher = (variables: ListUserAttestationsQueryVariables, options?: RequestInit['headers']) => fetcher<ListUserAttestationsQuery, ListUserAttestationsQueryVariables>(ListUserAttestationsDocument, variables, options);

export const CreateAttestationDocument = `
    mutation CreateAttestation($data: AttestationCreateInput!) {
  createAttestation(data: $data) {
    id
  }
}
    `;

export const useCreateAttestationMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateAttestationMutation, TError, CreateAttestationMutationVariables, TContext>) => {
    
    return useMutation<CreateAttestationMutation, TError, CreateAttestationMutationVariables, TContext>(
      {
    mutationKey: ['CreateAttestation'],
    mutationFn: (variables?: CreateAttestationMutationVariables) => fetcher<CreateAttestationMutation, CreateAttestationMutationVariables>(CreateAttestationDocument, variables)(),
    ...options
  }
    )};


useCreateAttestationMutation.fetcher = (variables: CreateAttestationMutationVariables, options?: RequestInit['headers']) => fetcher<CreateAttestationMutation, CreateAttestationMutationVariables>(CreateAttestationDocument, variables, options);

export const ConnectGithubDocument = `
    mutation ConnectGithub($accessToken: String!) {
  connectGithub(accessToken: $accessToken)
}
    `;

export const useConnectGithubMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ConnectGithubMutation, TError, ConnectGithubMutationVariables, TContext>) => {
    
    return useMutation<ConnectGithubMutation, TError, ConnectGithubMutationVariables, TContext>(
      {
    mutationKey: ['ConnectGithub'],
    mutationFn: (variables?: ConnectGithubMutationVariables) => fetcher<ConnectGithubMutation, ConnectGithubMutationVariables>(ConnectGithubDocument, variables)(),
    ...options
  }
    )};


useConnectGithubMutation.fetcher = (variables: ConnectGithubMutationVariables, options?: RequestInit['headers']) => fetcher<ConnectGithubMutation, ConnectGithubMutationVariables>(ConnectGithubDocument, variables, options);

export const DisconnectGithubDocument = `
    mutation DisconnectGithub {
  disconnectGithub
}
    `;

export const useDisconnectGithubMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DisconnectGithubMutation, TError, DisconnectGithubMutationVariables, TContext>) => {
    
    return useMutation<DisconnectGithubMutation, TError, DisconnectGithubMutationVariables, TContext>(
      {
    mutationKey: ['DisconnectGithub'],
    mutationFn: (variables?: DisconnectGithubMutationVariables) => fetcher<DisconnectGithubMutation, DisconnectGithubMutationVariables>(DisconnectGithubDocument, variables)(),
    ...options
  }
    )};


useDisconnectGithubMutation.fetcher = (variables?: DisconnectGithubMutationVariables, options?: RequestInit['headers']) => fetcher<DisconnectGithubMutation, DisconnectGithubMutationVariables>(DisconnectGithubDocument, variables, options);

export const ConnectWalletDocument = `
    mutation ConnectWallet($address: String!) {
  connectWallet(address: $address)
}
    `;

export const useConnectWalletMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ConnectWalletMutation, TError, ConnectWalletMutationVariables, TContext>) => {
    
    return useMutation<ConnectWalletMutation, TError, ConnectWalletMutationVariables, TContext>(
      {
    mutationKey: ['ConnectWallet'],
    mutationFn: (variables?: ConnectWalletMutationVariables) => fetcher<ConnectWalletMutation, ConnectWalletMutationVariables>(ConnectWalletDocument, variables)(),
    ...options
  }
    )};


useConnectWalletMutation.fetcher = (variables: ConnectWalletMutationVariables, options?: RequestInit['headers']) => fetcher<ConnectWalletMutation, ConnectWalletMutationVariables>(ConnectWalletDocument, variables, options);

export const DisconnectWalletDocument = `
    mutation DisconnectWallet {
  disconnectWallet
}
    `;

export const useDisconnectWalletMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<DisconnectWalletMutation, TError, DisconnectWalletMutationVariables, TContext>) => {
    
    return useMutation<DisconnectWalletMutation, TError, DisconnectWalletMutationVariables, TContext>(
      {
    mutationKey: ['DisconnectWallet'],
    mutationFn: (variables?: DisconnectWalletMutationVariables) => fetcher<DisconnectWalletMutation, DisconnectWalletMutationVariables>(DisconnectWalletDocument, variables)(),
    ...options
  }
    )};


useDisconnectWalletMutation.fetcher = (variables?: DisconnectWalletMutationVariables, options?: RequestInit['headers']) => fetcher<DisconnectWalletMutation, DisconnectWalletMutationVariables>(DisconnectWalletDocument, variables, options);

export const ListProjectsBySelfDocument = `
    query ListProjectsBySelf($where: ProjectWhereInput) {
  listProjectsBySelf(where: $where) {
    total
    data {
      ...projectBaseInfo
      team {
        code
      }
    }
  }
}
    ${ProjectBaseInfoFragmentDoc}`;

export const useListProjectsBySelfQuery = <
      TData = ListProjectsBySelfQuery,
      TError = unknown
    >(
      variables?: ListProjectsBySelfQueryVariables,
      options?: Omit<UseQueryOptions<ListProjectsBySelfQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListProjectsBySelfQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListProjectsBySelfQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListProjectsBySelf'] : ['ListProjectsBySelf', variables],
    queryFn: fetcher<ListProjectsBySelfQuery, ListProjectsBySelfQueryVariables>(ListProjectsBySelfDocument, variables),
    ...options
  }
    )};

useListProjectsBySelfQuery.getKey = (variables?: ListProjectsBySelfQueryVariables) => variables === undefined ? ['ListProjectsBySelf'] : ['ListProjectsBySelf', variables];


useListProjectsBySelfQuery.fetcher = (variables?: ListProjectsBySelfQueryVariables, options?: RequestInit['headers']) => fetcher<ListProjectsBySelfQuery, ListProjectsBySelfQueryVariables>(ListProjectsBySelfDocument, variables, options);

export const CreateProjectDocument = `
    mutation CreateProject($data: ProjectCreateInput) {
  project: createProject(data: $data) {
    alias
    name
    id
  }
}
    `;

export const useCreateProjectMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CreateProjectMutation, TError, CreateProjectMutationVariables, TContext>) => {
    
    return useMutation<CreateProjectMutation, TError, CreateProjectMutationVariables, TContext>(
      {
    mutationKey: ['CreateProject'],
    mutationFn: (variables?: CreateProjectMutationVariables) => fetcher<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, variables)(),
    ...options
  }
    )};


useCreateProjectMutation.fetcher = (variables?: CreateProjectMutationVariables, options?: RequestInit['headers']) => fetcher<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, variables, options);

export const UpdateProjectDocument = `
    mutation UpdateProject($data: ProjectUpdateInput!, $where: ProjectWhereUniqueInput!) {
  project: updateProject(data: $data, where: $where) {
    alias
    name
    id
  }
}
    `;

export const useUpdateProjectMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<UpdateProjectMutation, TError, UpdateProjectMutationVariables, TContext>) => {
    
    return useMutation<UpdateProjectMutation, TError, UpdateProjectMutationVariables, TContext>(
      {
    mutationKey: ['UpdateProject'],
    mutationFn: (variables?: UpdateProjectMutationVariables) => fetcher<UpdateProjectMutation, UpdateProjectMutationVariables>(UpdateProjectDocument, variables)(),
    ...options
  }
    )};


useUpdateProjectMutation.fetcher = (variables: UpdateProjectMutationVariables, options?: RequestInit['headers']) => fetcher<UpdateProjectMutation, UpdateProjectMutationVariables>(UpdateProjectDocument, variables, options);

export const FindUniqueProjectDocument = `
    query FindUniqueProject($where: ProjectWhereUniqueInput!) {
  findUniqueProject(where: $where) {
    id
    hackathonId
    hackathonName
    creatorId
    teamId
    versionName
    versions {
      id
      alias
      versionName
    }
    type
    isSubmit
    lock
    name
    alias
    logo
    ecology
    tracks
    wallet
    likes
    isLiked
    pitchVideo
    demoVideo
    teachStack
    progress
    createdAt
    updatedAt
    detail {
      id
      detailedIntro
      oneLineIntro
      progress
    }
    addition {
      id
      fundraisingStatus
      githubLink
      isOpenSource
    }
    teamLead {
      userId
      avatar
      nickname
      username
    }
    team {
      code
      intro
      members {
        id
        userId
        avatar
        nickname
        username
        bio
        skills
        location
      }
    }
    rewards {
      votes
      remainingVotes
      rank {
        rank
        total
      }
      name
      myVotes
      id
      canVote
      hackathonStatus
      hackathonName
      hackathonImage
      judgeMode
      voteMode
    }
    prizeTrack
  }
}
    `;

export const useFindUniqueProjectQuery = <
      TData = FindUniqueProjectQuery,
      TError = unknown
    >(
      variables: FindUniqueProjectQueryVariables,
      options?: Omit<UseQueryOptions<FindUniqueProjectQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindUniqueProjectQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindUniqueProjectQuery, TError, TData>(
      {
    queryKey: ['FindUniqueProject', variables],
    queryFn: fetcher<FindUniqueProjectQuery, FindUniqueProjectQueryVariables>(FindUniqueProjectDocument, variables),
    ...options
  }
    )};

useFindUniqueProjectQuery.getKey = (variables: FindUniqueProjectQueryVariables) => ['FindUniqueProject', variables];


useFindUniqueProjectQuery.fetcher = (variables: FindUniqueProjectQueryVariables, options?: RequestInit['headers']) => fetcher<FindUniqueProjectQuery, FindUniqueProjectQueryVariables>(FindUniqueProjectDocument, variables, options);

export const ListProjectsDocument = `
    query ListProjects($page: Int, $limit: Int, $where: ProjectWhereInput, $orderBy: [ProjectOrderByWithRelationInput!]) {
  listProjects(page: $page, limit: $limit, where: $where, orderBy: $orderBy) {
    total
    data {
      ...projectBaseInfo
    }
  }
}
    ${ProjectBaseInfoFragmentDoc}`;

export const useListProjectsQuery = <
      TData = ListProjectsQuery,
      TError = unknown
    >(
      variables?: ListProjectsQueryVariables,
      options?: Omit<UseQueryOptions<ListProjectsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListProjectsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListProjectsQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['ListProjects'] : ['ListProjects', variables],
    queryFn: fetcher<ListProjectsQuery, ListProjectsQueryVariables>(ListProjectsDocument, variables),
    ...options
  }
    )};

useListProjectsQuery.getKey = (variables?: ListProjectsQueryVariables) => variables === undefined ? ['ListProjects'] : ['ListProjects', variables];


useListProjectsQuery.fetcher = (variables?: ListProjectsQueryVariables, options?: RequestInit['headers']) => fetcher<ListProjectsQuery, ListProjectsQueryVariables>(ListProjectsDocument, variables, options);

export const JoinProjectDocument = `
    mutation JoinProject($where: HackathonTeamWhereUniqueInput!) {
  joinProject(where: $where)
}
    `;

export const useJoinProjectMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<JoinProjectMutation, TError, JoinProjectMutationVariables, TContext>) => {
    
    return useMutation<JoinProjectMutation, TError, JoinProjectMutationVariables, TContext>(
      {
    mutationKey: ['JoinProject'],
    mutationFn: (variables?: JoinProjectMutationVariables) => fetcher<JoinProjectMutation, JoinProjectMutationVariables>(JoinProjectDocument, variables)(),
    ...options
  }
    )};


useJoinProjectMutation.fetcher = (variables: JoinProjectMutationVariables, options?: RequestInit['headers']) => fetcher<JoinProjectMutation, JoinProjectMutationVariables>(JoinProjectDocument, variables, options);

export const LikeProjectDocument = `
    mutation LikeProject($likeProjectId: String!) {
  project: likeProject(id: $likeProjectId) {
    likes
  }
}
    `;

export const useLikeProjectMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<LikeProjectMutation, TError, LikeProjectMutationVariables, TContext>) => {
    
    return useMutation<LikeProjectMutation, TError, LikeProjectMutationVariables, TContext>(
      {
    mutationKey: ['LikeProject'],
    mutationFn: (variables?: LikeProjectMutationVariables) => fetcher<LikeProjectMutation, LikeProjectMutationVariables>(LikeProjectDocument, variables)(),
    ...options
  }
    )};


useLikeProjectMutation.fetcher = (variables: LikeProjectMutationVariables, options?: RequestInit['headers']) => fetcher<LikeProjectMutation, LikeProjectMutationVariables>(LikeProjectDocument, variables, options);

export const CopyProjectDocument = `
    mutation CopyProject($copyProjectId: String!) {
  project: copyProject(id: $copyProjectId) {
    alias
    name
    id
  }
}
    `;

export const useCopyProjectMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<CopyProjectMutation, TError, CopyProjectMutationVariables, TContext>) => {
    
    return useMutation<CopyProjectMutation, TError, CopyProjectMutationVariables, TContext>(
      {
    mutationKey: ['CopyProject'],
    mutationFn: (variables?: CopyProjectMutationVariables) => fetcher<CopyProjectMutation, CopyProjectMutationVariables>(CopyProjectDocument, variables)(),
    ...options
  }
    )};


useCopyProjectMutation.fetcher = (variables: CopyProjectMutationVariables, options?: RequestInit['headers']) => fetcher<CopyProjectMutation, CopyProjectMutationVariables>(CopyProjectDocument, variables, options);

export const QuitProjectDocument = `
    mutation QuitProject($quitProjectId: String!) {
  project: quitProject(id: $quitProjectId)
}
    `;

export const useQuitProjectMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<QuitProjectMutation, TError, QuitProjectMutationVariables, TContext>) => {
    
    return useMutation<QuitProjectMutation, TError, QuitProjectMutationVariables, TContext>(
      {
    mutationKey: ['QuitProject'],
    mutationFn: (variables?: QuitProjectMutationVariables) => fetcher<QuitProjectMutation, QuitProjectMutationVariables>(QuitProjectDocument, variables)(),
    ...options
  }
    )};


useQuitProjectMutation.fetcher = (variables: QuitProjectMutationVariables, options?: RequestInit['headers']) => fetcher<QuitProjectMutation, QuitProjectMutationVariables>(QuitProjectDocument, variables, options);

export const ProjectSubmitDocument = `
    mutation ProjectSubmit($data: ProjectSubmitInput!) {
  projectSubmit(ProjectSubmitInput: $data) {
    id
    status
    isSubmit
  }
}
    `;

export const useProjectSubmitMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<ProjectSubmitMutation, TError, ProjectSubmitMutationVariables, TContext>) => {
    
    return useMutation<ProjectSubmitMutation, TError, ProjectSubmitMutationVariables, TContext>(
      {
    mutationKey: ['ProjectSubmit'],
    mutationFn: (variables?: ProjectSubmitMutationVariables) => fetcher<ProjectSubmitMutation, ProjectSubmitMutationVariables>(ProjectSubmitDocument, variables)(),
    ...options
  }
    )};


useProjectSubmitMutation.fetcher = (variables: ProjectSubmitMutationVariables, options?: RequestInit['headers']) => fetcher<ProjectSubmitMutation, ProjectSubmitMutationVariables>(ProjectSubmitDocument, variables, options);

export const ListValidateProjectsDocument = `
    query ListValidateProjects($hackathonId: String!) {
  projects: listValidateProjects(hackathonId: $hackathonId) {
    id
    name
    isSubmit
  }
}
    `;

export const useListValidateProjectsQuery = <
      TData = ListValidateProjectsQuery,
      TError = unknown
    >(
      variables: ListValidateProjectsQueryVariables,
      options?: Omit<UseQueryOptions<ListValidateProjectsQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<ListValidateProjectsQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<ListValidateProjectsQuery, TError, TData>(
      {
    queryKey: ['ListValidateProjects', variables],
    queryFn: fetcher<ListValidateProjectsQuery, ListValidateProjectsQueryVariables>(ListValidateProjectsDocument, variables),
    ...options
  }
    )};

useListValidateProjectsQuery.getKey = (variables: ListValidateProjectsQueryVariables) => ['ListValidateProjects', variables];


useListValidateProjectsQuery.fetcher = (variables: ListValidateProjectsQueryVariables, options?: RequestInit['headers']) => fetcher<ListValidateProjectsQuery, ListValidateProjectsQueryVariables>(ListValidateProjectsDocument, variables, options);

export const FindProjectSubmitInfoDocument = `
    query FindProjectSubmitInfo($where: ProjectWhereUniqueInput!) {
  info: findUniqueProject(where: $where) {
    fromId
    prizeTrack
    fields
    isSubmit
  }
}
    `;

export const useFindProjectSubmitInfoQuery = <
      TData = FindProjectSubmitInfoQuery,
      TError = unknown
    >(
      variables: FindProjectSubmitInfoQueryVariables,
      options?: Omit<UseQueryOptions<FindProjectSubmitInfoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<FindProjectSubmitInfoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<FindProjectSubmitInfoQuery, TError, TData>(
      {
    queryKey: ['FindProjectSubmitInfo', variables],
    queryFn: fetcher<FindProjectSubmitInfoQuery, FindProjectSubmitInfoQueryVariables>(FindProjectSubmitInfoDocument, variables),
    ...options
  }
    )};

useFindProjectSubmitInfoQuery.getKey = (variables: FindProjectSubmitInfoQueryVariables) => ['FindProjectSubmitInfo', variables];


useFindProjectSubmitInfoQuery.fetcher = (variables: FindProjectSubmitInfoQueryVariables, options?: RequestInit['headers']) => fetcher<FindProjectSubmitInfoQuery, FindProjectSubmitInfoQueryVariables>(FindProjectSubmitInfoDocument, variables, options);

export const RemoveMemberDocument = `
    mutation RemoveMember($projectId: String!, $memberId: String!) {
  removeMember(projectId: $projectId, memberId: $memberId)
}
    `;

export const useRemoveMemberMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<RemoveMemberMutation, TError, RemoveMemberMutationVariables, TContext>) => {
    
    return useMutation<RemoveMemberMutation, TError, RemoveMemberMutationVariables, TContext>(
      {
    mutationKey: ['RemoveMember'],
    mutationFn: (variables?: RemoveMemberMutationVariables) => fetcher<RemoveMemberMutation, RemoveMemberMutationVariables>(RemoveMemberDocument, variables)(),
    ...options
  }
    )};


useRemoveMemberMutation.fetcher = (variables: RemoveMemberMutationVariables, options?: RequestInit['headers']) => fetcher<RemoveMemberMutation, RemoveMemberMutationVariables>(RemoveMemberDocument, variables, options);

export const GetUserInfoDocument = `
    query GetUserInfo {
  user: getUserInfo {
    id
    uid
    name
    avatar
    username
    nickname
    email
    role
    voteRole
    status
    inviteCode
    invitedBy
    hackCoin {
      coin
    }
    levelInfo {
      level
      exp
    }
  }
}
    `;

export const useGetUserInfoQuery = <
      TData = GetUserInfoQuery,
      TError = unknown
    >(
      variables?: GetUserInfoQueryVariables,
      options?: Omit<UseQueryOptions<GetUserInfoQuery, TError, TData>, 'queryKey'> & { queryKey?: UseQueryOptions<GetUserInfoQuery, TError, TData>['queryKey'] }
    ) => {
    
    return useQuery<GetUserInfoQuery, TError, TData>(
      {
    queryKey: variables === undefined ? ['GetUserInfo'] : ['GetUserInfo', variables],
    queryFn: fetcher<GetUserInfoQuery, GetUserInfoQueryVariables>(GetUserInfoDocument, variables),
    ...options
  }
    )};

useGetUserInfoQuery.getKey = (variables?: GetUserInfoQueryVariables) => variables === undefined ? ['GetUserInfo'] : ['GetUserInfo', variables];


useGetUserInfoQuery.fetcher = (variables?: GetUserInfoQueryVariables, options?: RequestInit['headers']) => fetcher<GetUserInfoQuery, GetUserInfoQueryVariables>(GetUserInfoDocument, variables, options);
